https://developer.apple.com/documentation/realitykit/scenelibrarySkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Happy Beam
Games
Runtime Events
Content synchronization
Postprocessing effects
Physics simulation
Collision detection
Scenes
Preliminary_Text
Text
Actions and Triggers
Behaviors
Preliminary_ReferenceImage
Preliminary_AnchoringAPI
Placing a Prim in the Real World
Documentation
Open Menu
Swift
Article
sceneLibrary
Metadata that partitions an asset into scene-based units.
Overview
Set a prim’s kind metadata to sceneLibrary to create a scene. Partitioning an asset’s contents into multiple scenes offers the following benefits:
Prims segment content into distinct parts that have differing utilities and lifetimes.
Unlike USD Variant Sets, you can mark each scene active or inactive independently.
Actions can operate on scenes.
The runtime doesn’t support multiple active scenes in a single file. When a USDZ file loads, the runtime displays the first active scene. The runtime ignores nested scenes. If an asset doesn’t define a scene, the runtime loads the full file contents as a single scene.
Define a scene using the def keyword to specify the asset’s active scene –– that is, the one that the runtime makes visible on load. Use the over keyword to specify inactive scenes –– those that are invisible on load. The runtime doesn’t display inactive scenes. The advantage of inactive scenes is that you can activate one in an editor during development, and an app can transition to an inactive scene during the AR experience.
This specificaiton is backward compatible because of the way traditional USD runtimes skip over definitions. A runtime that doesn’t support the sceneLibrary metadata displays only the first active scene.
Declaration
kind = "sceneLibrary"
Partition Content into Scenes
The following example demonstrates a scene template on which you can base your asset.
def Xform "Root" (
    # Because you can apply `kind` to any type of prim, that allows any prim to be a scene.
    kind = "sceneLibrary"
)
{
    # `PrimaryScene` is immediately active due to the `def` keyword.
    def Xform "PrimaryScene" (
        # `sceneName` can be any human-readable string.
        sceneName = "Primary Scene"
    )
    {
    }


    # `SecondaryScene` is inactive due to the over keyword.
    over Xform "SecondaryScene" (
        sceneName = "Secondary Scene"
    )
    {
    }
}
Use the sceneName property to refer to a scene to load it or transition to it from another scene.
Current page is sceneLibrary
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

