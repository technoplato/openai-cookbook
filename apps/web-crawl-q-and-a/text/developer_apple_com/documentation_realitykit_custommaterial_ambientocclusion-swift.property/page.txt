https://developer.apple.com/documentation/realitykit/custommaterial/ambientocclusion-swift.propertySkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
E
CustomMaterialError
T
CustomMaterial.Texture
T
CustomMaterial.Parameters
Defining Material Parameter Types
T
CustomMaterial.FaceCulling
E
MaterialParameterTypes.FaceCulling
P
var faceCulling: CustomMaterial.FaceCulling
Using Ambient Occlusion
S
CustomMaterial.Opacity
E
CustomMaterial.Blending
P
var blending: CustomMaterial.Blending
P
var opacityThreshold: Float?
Handling Entity Transparency
S
CustomMaterial.EmissiveColor
P
var emissiveColor: CustomMaterial.EmissiveColor
Documentation
Open Menu
Swift
Instance Property
ambientOcclusion
The ambient light exposure for a material.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
var ambientOcclusion: CustomMaterial.AmbientOcclusion { get set }
Discussion
Ambient occlusion (AO) represents the entity’s exposure to ambient light. Specify ambient occlusion using a UV-mapped image called an ambient occlusion map. In an AO map, black pixels represent parts of the model that receive no ambient light because of a crevice, dent, or recessed area, or another part of the entity blocking ambient light from reaching it. White pixels represent flat portions of the model that receive full ambient light. You generate ambient occlusion maps using a 3D software package.
The following code loads an ambient occlusion map and adds it to the custom material:
if let aoResource = try? TextureResource.load(named:"entity_ao") {
    let aoMap = MaterialParameters.Texture(aoResource)
    material.emissiveColor = .init(texture: aoMap)
}
In a custom material, RealityKit doesn’t automatically use the value you set on this property to render your entity. The ambient occlusion texture is available in the material’s shader functions, but RealityKit only renders ambient occlusion if the material’s lightingModel is CustomMaterial.LightingModel.lit or CustomMaterial.LightingModel.clearcoat and its surface shader calls params.surface().set_ambient_occlusion().
The following Metal code shows how to sample the ambient occlusion texture to set the AO value in a surface shader function:
    // Retrieve the entity's texture coordinates.
    float2 uv = params.geometry().uv0();


    // Entities loaded from USDZ or .reality files have texture coordinates
    // with a flipped y-axis. This adjusts for that.
    uv.y = 1.0 - uv.y;


    // Sample the ambient occlusion texture and use it to set the
    // ambient occlusion value to use during rendering.
    auto tex = params.textures();
    half metallic = tex.ambient_occlusion().sample(textureSampler, uv).r;
    params.surface().set_ambient_occlusion(metallic);
See Also
Using Ambient Occlusion
struct AmbientOcclusion
An object that defines an entity’s exposure to ambient light.
Current page is ambientOcclusion
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

