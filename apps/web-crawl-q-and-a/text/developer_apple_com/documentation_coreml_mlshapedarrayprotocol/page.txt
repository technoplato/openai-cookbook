https://developer.apple.com/documentation/coreml/mlshapedarrayprotocol

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
P
var multiArrayValue: MLMultiArray?
P
var sequenceValue: MLSequence?
P
var dictionaryValue: [AnyHashable : NSNumber]
Comparing Feature Values
M
func isEqual(to: MLFeatureValue) -> Bool
Supporting Types
E
MLFeatureType
S
MLShapedArray
init(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Self.Scalar>, [Int]) -> Void)
P
var strides: [Int]
P
var count: Int
P
var isScalar: Bool
P
var scalarCount: Int
P
var scalar: Self.Scalar?
P
var scalars: [Self.Scalar]
M
func withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R
Documentation
Open Menu
Swift
Protocol
MLShapedArrayProtocol
An interface that defines a shaped array type.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
Xcode 13.0+
protocol MLShapedArrayProtocol where Self.Index == Int
Topics
Creating a Shaped Array Type
init<S>(scalars: S, shape: [Int])
Creates a shaped array type from an array of values.
init(repeating: Self.Scalar, shape: [Int])
Creates a shaped array type that initializes every element to the same value.
init(identityMatrixOfSize: Int)
Creates a shaped array type that’s an identity matrix of integers.
Available when Scalar conforms to FixedWidthInteger.
init(randomScalarsIn: Range<Self.Scalar>, shape: [Int])
Creates a shaped array type that initializes the elements to random integer values within a range.
Available when Scalar conforms to FixedWidthInteger.
init(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)
Creates a shaped array type from a data pointer.
init(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)
Creates a shaped array type from a data pointer with memory strides.
Required
init(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Self.Scalar>, [Int]) -> Void)
Creates a shaped array type from a shape and a closure that initializes its memory.
Required
Creating a Shaped Array Type from Another Type
init(MLMultiArray)
Creates a shaped array type from a multiarray.
init(converting: MLMultiArray)
Creates a shaped array type by converting a multiarray.
init<T>(converting: T)
Creates a shaped array type by converting another shaped array type.
Inspecting a Shaped Array Type
var shape: [Int]
An integer array in which each element represents the size of the corresponding dimension.
Required
var strides: [Int]
An integer array in which each element is the number of memory locations that spans the length of the corresponding dimension.
Required
var count: Int
The number of elements in the shaped array’s first dimension.
var isScalar: Bool
A Boolean value that indicates whether the shaped array lacks a shape.
var scalarCount: Int
The total number of elements in the shaped array type.
var scalar: Self.Scalar?
A computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.
var scalars: [Self.Scalar]
A computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.
func withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R
Provides read-only access of the shaped array’s underlying memory to a closure.
Required
Accessing Elements
subscript<C>(scalarAt: C) -> Self.Scalar
Accesses an element and a multidimensional location.
Required Default implementation provided.
subscript<C>(C) -> MLShapedArraySlice<Self.Scalar>
Accesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.
Required
subscript<C>(C) -> MLShapedArraySlice<Self.Scalar>
Accesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.
Required Default implementations provided.
Modifying a Shaped Array Type
func fill(with: Self.Scalar)
Assigns the shaped array’s elements to a value.
func fill<C>(with: C)
Assigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary.
func withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Self.Scalar>, [Int], [Int]) -> R) -> R
Provides read-write access of the shaped array’s underlying memory to a closure.
Required
Supporting Types
associatedtype Scalar
Represents the underlying scalar type of the shaped array type.
Required
struct MLShapedArraySlice
A multidimensional subset of elements from a shaped array type.
protocol MLShapedArrayScalar
A type that associates a scalar with a shaped array.
protocol MLShapedArrayRangeExpression
An interface for a range expression, which you typically use with subscripts of shaped array types.
Relationships
Inherits From
ExpressibleByArrayLiteral
MutableCollection
RandomAccessCollection
Conforming Types
MLShapedArray
MLShapedArraySlice
See Also
Supporting Types
enum MLFeatureType
The possible types for feature values, input features, and output features.
struct MLShapedArray
A machine learning collection type that stores scalar values in a multidimensional array.
class MLMultiArray
A machine learning collection type that stores numeric values in an array with multiple dimensions.
class MLSequence
A machine learning collection type that stores a series of strings or integers.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLShapedArrayProtocol
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

