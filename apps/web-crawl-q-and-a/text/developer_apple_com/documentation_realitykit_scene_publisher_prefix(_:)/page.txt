https://developer.apple.com/documentation/realitykit/scene/publisher/prefix(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>
M
func merge(with: Self) -> Publishers.MergeMany<Self>
M
func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>
M
func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>
M
func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>
M
func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>
M
func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>
func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>
M
func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>
M
func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>
M
func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>
M
func dropFirst(Int) -> Publishers.Drop<Self>
M
func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>
M
func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>
Applying Sequence Operations to Elements
M
func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>
Documentation
Open Menu
Swift
Instance Method
prefix(_:)
Republishes elements up to the specified maximum count.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func prefix(_ maxLength: Int) -> Publishers.Output<Self>
Parameters
maxLength
The maximum number of elements to republish.
Return Value
A publisher that publishes up to the specified number of elements.
Discussion
Use prefix(_:) to limit the number of elements republished to the downstream subscriber.
In the example below, the prefix(_:) operator limits its output to the first two elements before finishing normally:
let numbers = (0...10)
cancellable = numbers.publisher
    .prefix(2)
    .sink { print("\($0)", terminator: " ") }


// Prints: "0 1"
See Also
Applying Sequence Operations to Elements
func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>
Ignores elements from the upstream publisher until it receives an element from a second publisher.
func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>
Omits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.
func dropFirst(Int) -> Publishers.Drop<Self>
Omits the specified number of elements before republishing subsequent elements.
func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>
Omits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.
func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>
Appends a publisher’s output with the specified elements.
func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>
Prefixes a publisher’s output with the specified values.
func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>
Republishes elements until another publisher emits an element.
func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>
Republishes elements while a predicate closure indicates publishing should continue.
func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>
Republishes elements while an error-throwing predicate closure indicates publishing should continue.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is prefix(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

