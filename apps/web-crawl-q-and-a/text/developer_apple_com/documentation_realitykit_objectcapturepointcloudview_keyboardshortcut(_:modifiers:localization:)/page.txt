https://developer.apple.com/documentation/realitykit/objectcapturepointcloudview/keyboardshortcut(_:modifiers:localization:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func interactiveDismissDisabled(Bool) -> some View
M
func invalidatableContent(Bool) -> some View
M
func italic(Bool) -> some View
M
func itemProvider(Optional<() -> NSItemProvider?>) -> some View
M
func kerning(CGFloat) -> some View
M
func keyboardShortcut(KeyboardShortcut) -> some View
M
func keyboardShortcut(KeyboardShortcut?) -> some View
M
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View
func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View
func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View
M
func lineLimit(Int, reservesSpace: Bool) -> some View
M
func lineSpacing(CGFloat) -> some View
M
func listItemTint(Color?) -> some View
M
func listItemTint(ListItemTint?) -> some View
M
func listRowBackground<V>(V?) -> some View
M
func listRowInsets(EdgeInsets?) -> some View
M
func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View
Documentation
Open Menu
Swift
Instance Method
keyboardShortcut(_:modifiers:localization:)
Defines a keyboard shortcut and assigns it to the modified control.
RealityKit
SwiftUI
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
visionOS 1.0+ Beta
func keyboardShortcut(
    _ key: KeyEquivalent,
    modifiers: EventModifiers = .command,
    localization: KeyboardShortcut.Localization
) -> some View
Discussion
Pressing the control’s shortcut while the control is anywhere in the frontmost window or scene, or anywhere in the macOS main menu, is equivalent to direct interaction with the control to perform its primary action.
The target of a keyboard shortcut is resolved in a leading-to-trailing, depth-first traversal of one or more view hierarchies. On macOS, the system looks in the key window first, then the main window, and then the command groups; on other platforms, the system looks in the active scene, and then the command groups.
If multiple controls are associated with the same shortcut, the first one found is used.
Localization
Provide a localization value to specify how this shortcut should be localized. Given that key is always defined in relation to the US-English keyboard layout, it might be hard to reach on different international layouts. For example the shortcut ⌘[ works well for the US layout but is hard to reach for German users, where [ is available by pressing ⌥5, making users type ⌥⌘5. The automatic keyboard shortcut remapping re-assigns the shortcut to an appropriate replacement, ⌘Ö in this case.
Certain shortcuts carry information about directionality. For instance, ⌘[ can reveal a previous view. Following the layout direction of the UI, this shortcut will be automatically mirrored to ⌘]. However, this does not apply to items such as “Align Left ⌘{”, which will be “left” independently of the layout direction. When the shortcut shouldn’t follow the directionality of the UI, but rather be the same in both right-to-left and left-to-right directions, using KeyboardShortcut/Localization-swift.struct/withoutMirroring will prevent the system from flipping it.
var body: some Commands {
    CommandMenu("Card") {
        Button("Align Left") { ... }
            .keyboardShortcut("{",
                 modifiers: .option,
                 localization: .withoutMirroring)
        Button("Align Right") { ... }
            .keyboardShortcut("}",
                 modifiers: .option,
                 localization: .withoutMirroring)
    }
}
Lastly, providing the option KeyboardShortcut/Localization-swift.struct/custom disables the automatic localization for this shortcut to tell the system that internationalization is taken care of in a different way.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is keyboardShortcut(_:modifiers:localization:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

