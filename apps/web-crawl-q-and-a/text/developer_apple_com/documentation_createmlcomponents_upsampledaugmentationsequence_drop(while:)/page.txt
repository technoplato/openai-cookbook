https://developer.apple.com/documentation/createmlcomponents/upsampledaugmentationsequence/drop(while:)

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
E
ModelUpdateError
E
CompatibilityError
Beta
Enumerations
func rootMeanSquaredError<T>([AnnotatedPrediction<T, T>]) -> T
Beta
func meanAbsolutePercentageError<T>([AnnotatedPrediction<T, T>]) -> T
Beta
func meanAbsoluteError<T>([AnnotatedPrediction<T, T>]) -> T
Beta
func maximumAbsoluteError<T>([AnnotatedPrediction<T, T>]) -> T
func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result
func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>
func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>
func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>
M
func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool
M
func contains(Self.Element) async rethrows -> Bool
M
func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>
M
func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>
M
func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool
Instance Methods
S
UpsampledAugmentationSequence.AsyncIterator
Structures
Documentation
Open Menu
Swift
Instance Method
drop(while:)
Omits elements from the base asynchronous sequence until a given closure returns false, after which it passes through all remaining elements.
Create ML Components
Swift
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
@preconcurrency
func drop(while predicate: @escaping (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>
Parameters
predicate
A closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the modified sequence.
Return Value
An asynchronous sequence that skips over values from the base sequence until the provided closure returns false.
Discussion
Use drop(while:) to omit elements from an asynchronous sequence until the element received meets a condition you specify.
In this example, an asynchronous sequence called Counter produces Int values from 1 to 10. The drop(while:) method causes the modified sequence to ignore received values until it encounters one that is divisible by 3:
let stream = Counter(howHigh: 10)
    .drop { $0 % 3 != 0 }
for await number in stream {
    print(number, terminator: " ")
}
// Prints "3 4 5 6 7 8 9 10 "
After the predicate returns false, the sequence never executes it again, and from then on the sequence passes through elements from its underlying sequence as-is.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is drop(while:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

