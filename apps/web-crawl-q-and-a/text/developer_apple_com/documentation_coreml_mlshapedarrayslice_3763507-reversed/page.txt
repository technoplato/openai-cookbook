https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763507-reversed

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
r
P
MLShapedArrayScalar
M
func formatted<S>(S) -> S.FormatOutput
Formatting a Shaped Array Slice
M
func split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]
M
func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]
M
func split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]
M
func reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result
func flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]
func flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]
func compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]
func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
func sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
M
func trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
M
func trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>
M
func trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)
M
func trimPrefix<Prefix>(Prefix)
M
func suffix(from: Int) -> MLShapedArraySlice<Scalar>
M
func suffix(Int) -> MLShapedArraySlice<Scalar>
M
func prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
M
func prefix(through: Int) -> MLShapedArraySlice<Scalar>
Documentation
Open Menu
Swift
Instance Method
reversed()
Returns a view presenting the elements of the collection in reverse order.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
Xcode 13.0+
func reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>
Discussion
You can reverse a collection without allocating new space for its elements by calling this reversed() method. A ReversedCollection instance wraps an underlying collection and provides access to its elements in reverse order. This example prints the characters of a string in reverse order:
let word = "Backwards"
for char in word.reversed() {
    print(char, terminator: "")
}
// Prints "sdrawkcaB"
If you need a reversed collection of the same type, you may be able to use the collection’s sequence-based or collection-based initializer. For example, to get the reversed version of a string, reverse its characters and initialize a new String instance from the result.
let reversedWord = String(word.reversed())
print(reversedWord)
// Prints "sdrawkcaB"
Complexity: O(1)
See Also
Generating a Shaped Array Slice
func first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the first element of the sequence that satisfies the given predicate.
func last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the last element of the sequence that satisfies the given predicate.
func dropFirst(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence containing all but the given number of initial elements.
func dropLast(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence containing all but the specified number of final elements.
func drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.
func joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>
Returns the elements of this sequence of sequences, concatenated.
func joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>
Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.
func min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the minimum element in the sequence, using the given predicate as the comparison between elements.
func max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the maximum element in the sequence, using the given predicate as the comparison between elements.
func prefix(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.
func prefix(upTo: Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence from the start of the collection up to, but not including, the specified position.
func prefix(through: Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence from the start of the collection through the specified position.
func prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.
func suffix(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence, up to the given maximum length, containing the final elements of the collection.
func suffix(from: Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence from the specified position to the end of the collection.
func trimPrefix<Prefix>(Prefix)
Removes the initial elements that satisfy the given predicate from the start of the sequence.
func trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)
Trims the array slice using a predicate.
func trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>
Returns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.
func trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
func shuffled() -> [MLShapedArraySlice<Scalar>]
Returns the elements of the sequence, shuffled.
func shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]
Returns the elements of the sequence, shuffled using the given generator as a source for randomness.
func sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]
Generates a copy of the shaped array slice by sorting its slices with a comparator.
func sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]
Generates a copy of the shaped array slice by sorting its slices with a sequence of comparators.
func sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.
func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is reversed()
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

