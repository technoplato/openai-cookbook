https://developer.apple.com/documentation/realitykit/entity/hastransform-implementationsSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func orientation(relativeTo: Entity?) -> simd_quatf
M
func move(to: Transform, relativeTo: Entity?, duration: TimeInterval, timingFunction: AnimationTimingFunction) -> AnimationPlaybackController
M
func move(to: float4x4, relativeTo: Entity?, duration: TimeInterval, timingFunction: AnimationTimingFunction) -> AnimationPlaybackController
M
func move(to: float4x4, relativeTo: Entity?)
M
func move(to: Transform, relativeTo: Entity?)
M
func look(at: SIMD3<Float>, from: SIMD3<Float>, upVector: SIMD3<Float>, relativeTo: Entity?, forward: Entity.ForwardDirection)
M
func look(at: SIMD3<Float>, from: SIMD3<Float>, upVector: SIMD3<Float>, relativeTo: Entity?)
HasSynchronization Implementations
HasHierarchy Implementations
Equatable Implementations
CustomDebugStringConvertible Implementations
Default Implementations
E
Entity.ForwardDirection
Beta
Enumerations
M
static func loadModel(named: String, in: Bundle?) throws -> ModelEntity
Documentation
Open Menu
Swift
HasTransform Implementations
Topics
Instance Properties
var orientation: simd_quatf
The rotation of the entity relative to its parent.
var position: SIMD3<Float>
The position of the entity relative to its parent.
var scale: SIMD3<Float>
The scale of the entity relative to its parent.
var transform: Transform
The transform of an entity relative to its parent.
Instance Methods
func convert(direction: SIMD3<Float>, from: Entity?) -> SIMD3<Float>
Converts a direction vector from the local space of a reference entity to the local space of the entity on which you called this method.
func convert(direction: SIMD3<Float>, to: Entity?) -> SIMD3<Float>
Converts a direction vector from the local space of the entity on which you called this method to the local space of a reference entity.
func convert(normal: SIMD3<Float>, from: Entity?) -> SIMD3<Float>
Converts a normal vector from the local space of a reference entity to the local space of the entity on which you called this method.
func convert(normal: SIMD3<Float>, to: Entity?) -> SIMD3<Float>
Converts a normal vector from the local space of the entity on which you called this method to the local space of a reference entity.
func convert(position: SIMD3<Float>, from: Entity?) -> SIMD3<Float>
Converts a position from the local space of a reference entity to the local space of the entity on which you called this method.
func convert(position: SIMD3<Float>, to: Entity?) -> SIMD3<Float>
Converts a position from the local space of the entity on which you called this method to the local space of a reference entity.
func convert(transform: Transform, from: Entity?) -> Transform
Converts the scale, rotation, and position of a transform from the local space of a reference entity to the local space of the entity on which you called this method.
func convert(transform: Transform, to: Entity?) -> Transform
Converts the scale, rotation, and position of a transform from the local space of the entity on which you called this method to the local space of a reference entity.
func look(at: SIMD3<Float>, from: SIMD3<Float>, upVector: SIMD3<Float>, relativeTo: Entity?)
Positions and orients the entity to look at a target from a given position.
func look(at: SIMD3<Float>, from: SIMD3<Float>, upVector: SIMD3<Float>, relativeTo: Entity?, forward: Entity.ForwardDirection)
Positions and orients the entity such that it looks at certain target from a give position.
func move(to: Transform, relativeTo: Entity?)
Moves an entity instantly to a new location given by a transform.
func move(to: float4x4, relativeTo: Entity?)
Moves an entity instantly to a new location given by a 4x4 matrix.
func move(to: float4x4, relativeTo: Entity?, duration: TimeInterval, timingFunction: AnimationTimingFunction) -> AnimationPlaybackController
Moves an entity over a period of time to a new location given by a 4x4 matrix.
func move(to: Transform, relativeTo: Entity?, duration: TimeInterval, timingFunction: AnimationTimingFunction) -> AnimationPlaybackController
Moves an entity over a period of time to a new location given by a transform.
func orientation(relativeTo: Entity?) -> simd_quatf
Gets the orientation of an entity relative to the given entity.
func position(relativeTo: Entity?) -> SIMD3<Float>
Gets the position of an entity relative to the given entity.
func scale(relativeTo: Entity?) -> SIMD3<Float>
Gets the scale of an entity relative to the given entity.
func setOrientation(simd_quatf, relativeTo: Entity?)
Sets the orientation of the entity relative to the given reference entity.
func setPosition(SIMD3<Float>, relativeTo: Entity?)
Sets the position of the entity relative to the given reference entity.
func setScale(SIMD3<Float>, relativeTo: Entity?)
Sets the scale factor of the entity relative to the given reference entity.
func setTransformMatrix(float4x4, relativeTo: Entity?)
Sets the transform of the entity relative to the given reference entity using a 4x4 matrix representation.
func transformMatrix(relativeTo: Entity?) -> float4x4
Gets the 4 x 4 transform matrix of an entity relative to the given entity.
func visualBounds(recursive: Bool, relativeTo: Entity?, excludeInactive: Bool) -> BoundingBox
Computes a bounding box for the entity in the specified space, optionally including child entities.
Current page is HasTransform Implementations
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

