https://developer.apple.com/documentation/realitykit/sceneeventsSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
P
var timebase: CMTimebase
Beta
Instance Properties
P
var hashValue: Int
M
func hash(into: inout Hasher)
static func != (Self, Self) -> Bool
static func == (Scene, Scene) -> Bool
Comparing Scenes
S
Scene.Publisher
M
func subscribe<E>(to: E.Type, on: (EventSource)?, componentType: (Component.Type)?, (E) -> Void) -> Cancellable
M
func publisher<E>(for: E.Type, on: (EventSource)?, componentType: (Component.Type)?) -> Scene.Publisher<E>
M
func subscribe<E>(to: E.Type, on: (EventSource)?, (E) -> Void) -> Cancellable
M
func publisher<E>(for: E.Type, on: (EventSource)?) -> Scene.Publisher<E>
Getting and Sending Events
r
P
SynchronizationService
P
var synchronizationService: (SynchronizationService)?
Documentation
Open Menu
Swift
Enumeration
SceneEvents
Events the scene triggers.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
enum SceneEvents
Overview
For more information on subscribing to scene events, see RealityKit/Scene/Event.
Topics
Update Events
struct Update
An event triggered once per frame interval that you can use to execute custom logic for each frame.
struct AnchoredStateChanged
An event triggered when the anchored state of an anchoring entity changes.
Structures
struct DidActivateEntity
Raised after an entity becomes active.
struct DidAddEntity
Raised after an entity is added to the scene.
struct DidReparentEntity
Raised after an entity has been reparented within the same scene.
struct WillDeactivateEntity
Raised before an entity becomes inactive.
struct WillRemoveEntity
Raised before an entity is removed from the scene.
See Also
Getting and Sending Events
func publisher<E>(for: E.Type, on: (EventSource)?) -> Scene.Publisher<E>
Generates a publisher for events of the specified type.
func subscribe<E>(to: E.Type, on: (EventSource)?, (E) -> Void) -> Cancellable
Receives events of the given type.
func publisher<E>(for: E.Type, on: (EventSource)?, componentType: (Component.Type)?) -> Scene.Publisher<E>
Returns a Publisher for events of the specified type in a Scene.
func subscribe<E>(to: E.Type, on: (EventSource)?, componentType: (Component.Type)?, (E) -> Void) -> Cancellable
Receive events of type E.
struct Publisher
A publisher for the given event type in the scene.
enum AnimationEvents
Notable milestones that the framework signals during animation playback.
enum AudioEvents
Events associated with audio playback.
enum CollisionEvents
Events associated with collisions.
protocol Event
A type that can be sent as an event.
protocol EventSource
A type on which events can be published and subscribed.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is SceneEvents
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

