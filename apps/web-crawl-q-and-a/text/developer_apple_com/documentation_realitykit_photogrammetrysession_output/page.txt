https://developer.apple.com/documentation/realitykit/photogrammetrysession/outputSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Enumeration Cases
S
PhotogrammetrySession.Output.ProgressInfo
Beta
Structures
S
PhotogrammetrySession.Outputs
T
PhotogrammetrySession.Outputs.Element
T
PhotogrammetrySession.Outputs.AsyncIterator
Iterating Outputs
P
var outputs: PhotogrammetrySession.Outputs
P
var isProcessing: Bool
P
var activeRequests: [PhotogrammetrySession.Request]
Monitoring the Session
S
PhotogrammetrySession.Configuration
P
var configuration: PhotogrammetrySession.Configuration
Configuring the Session
P
static var isSupported: Bool
Documentation
Open Menu
Swift
Enumeration
PhotogrammetrySession.Output
Status updates on the object-creation process.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 12.0+
Mac Catalyst 15.0+
enum Output
Overview
RealityKit’s Object Capture is a long-running background task. The session publishes messages status and error messages to outputs, a Swift AsyncSequence.
Your app can respond to these updates using a for-await-in loop inside of a Task, as this example demonstrates.
let waiter = Task {
    do {
        for try await output in session.outputs {
            switch output {
                case .processingComplete:
                    // RealityKit has processed all requests.
                case .requestError(let request, let error):
                    // Request encountered an error.
                case .requestComplete(let request, let result):
                    // RealityKit has finished processing a request.
                case .requestProgress(let request, let fractionComplete):
                    // Periodic progress update. Update UI here.
                case requestProgressInfo(let request, let progressInfo):
                    // Periodic progress info update.
                case .inputComplete:
                    // Ingestion of images is complete and processing begins.
                case .invalidSample(let id, let reason):
                    // RealityKit deemed a sample invalid and didn't use it.
                case .skippedSample(let id):
                    // RealityKit was unable to use a provided sample.
                case .automaticDownsampling:
                    // RealityKit downsampled the input images because of
                    // resource constraints.
                case .processingCancelled
                    // Processing was canceled.
                @unknown default:
                    // Unrecognized output.
            }
        }
    } catch {
        print("Output: ERROR = \(String(describing: error))")
        // Handle error.
    }
}
Topics
Monitoring Session Status
case inputComplete
The data ingestion portion of the process is complete.
case processingComplete
The session completed a request successfully.
case processingCancelled
All pending requests are canceled.
Monitoring Request Status
case requestProgress(PhotogrammetrySession.Request, fractionComplete: Double)
A progress update provided by the session.
case requestComplete(PhotogrammetrySession.Request, PhotogrammetrySession.Result)
The session finished handling all pending requests.
case requestError(PhotogrammetrySession.Request, Error)
The session aborted a request due to an error.
Monitoring Data Ingestion
case invalidSample(id: Int, reason: String)
A provided sample was invalid.
case automaticDownsampling
The session reduced the image size because of memory constraints.
case skippedSample(id: Int)
The type of element used for Object Capture updates. The PhotogrammetrySample with the id indicated was not able to be used for reconstruction.
Describing Updates
var localizedDescription: String
Localized string containing any extra information about the message, such as the reason why a sample is invalid.
Iterating Outputs
typealias AsyncIterator
The type of iterator used for Object Capture updates.
typealias Element
The type of element used for Photogrammetry Session updates.
struct Outputs
An asynchronous sequence of session-related updates.
Structures
struct ProgressInfo
ProgressInfo includes the estimated remaining time and the progress stage during reconstruction.
Beta
Enumeration Cases
case requestProgressInfo(PhotogrammetrySession.Request, PhotogrammetrySession.Output.ProgressInfo)
Beta
case stitchingIncomplete
The session reconstruction could not fully stitch all images of the object.
Beta
Enumerations
enum ProcessingStage
Processing stages during reconstruction.
Beta
See Also
Monitoring the Session
var activeRequests: [PhotogrammetrySession.Request]
The session’s active request objects.
var isProcessing: Bool
The session is actively processing requests.
var outputs: PhotogrammetrySession.Outputs
Returns the outputs message stream which can be asynchronously iterated on.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is PhotogrammetrySession.Output
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

