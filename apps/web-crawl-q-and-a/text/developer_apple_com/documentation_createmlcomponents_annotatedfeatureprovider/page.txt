https://developer.apple.com/documentation/createmlcomponents/annotatedfeatureprovider

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
T
EventHandler
S
Event
Event Handling
S
DataFrameTemporalAnnotationParameters
UpdatableSupervisedTabularEstimator Implementations
SupervisedTabularEstimator Implementations
Default Implementations
func fitted(to: DataFrame, validateOn: DataFrame?, eventHandler: EventHandler?) async throws -> ColumnSelectorTransformer<Base.Transformer, UnwrappedInput>
func encode(AnnotatedFeatureProvider<Base, UnwrappedInput>.Transformer, to: inout EstimatorEncoder) throws
func decode(from: inout EstimatorDecoder) throws -> AnnotatedFeatureProvider<Base, UnwrappedInput>.Transformer
S
AnnotatedFeature
S
AnnotatedFiles
Annotations
S
MLModelRegressorAdaptor
S
MLModelClassifierAdaptor
S
MLModelTransformerAdaptor
Core ML Adaptors
r
P
UpdatableTemporalEstimator
Documentation
Open Menu
Swift
Structure
AnnotatedFeatureProvider
An adaptor that converts a regular estimator to a tabular estimator by selecting features and annotations from columns.
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
tvOS 16.0+
visionOS 1.0+ Beta
struct AnnotatedFeatureProvider<Base, UnwrappedInput> where Base : SupervisedEstimator, Base.Transformer.Input == UnwrappedInput?
Overview
Tabular estimators use multiple features columns as input. When there is a single column of features, you may use a non-tabular estimator. Do this by combining multiple columns with a ColumnConcatenator transformer. Once there is a single column of features, use AnnotatedFeatureProvider to specify which column contains the features, which column contains the annotations, and which column should hold the results.
When using AnnotatedFeatureProvider, make sure to handle missing values before using a non-tabular estimator that takes non-optional values. This example includes an OptionalUnwrapper transformer.
let concatenation = ColumnConcatenator<Float>(
    columnSelection: .include(columnNames: ["type", "region"]),
    concatenatedColumnName: "features"
)
let regression = AnnotatedFeatureProvider(
    OptionalUnwrapper<MLShapedArray<Float>>().appending(LinearRegressor<Float>()),
    annotationsColumnName: "price",
    featuresColumnName: "features",
    resultsColumnName: "result"
)
let task = concatenation.appending(regression)
Topics
Initializers
init(Base, annotationsColumnName: String, featuresColumnName: String, resultsColumnName: String)
Creates an adaptor that converts a regular estimator to a tabular estimator.
Instance Properties
var annotationColumnID: ColumnID<AnnotatedFeatureProvider<Base, UnwrappedInput>.Annotation>
The annotation column identifier.
var base: Base
The base estimator.
var featuresColumnName: String
The features column name.
var resultsColumnName: String
The results column name.
Instance Methods
func decode(from: inout EstimatorDecoder) throws -> AnnotatedFeatureProvider<Base, UnwrappedInput>.Transformer
Decodes a previously fitted transformer.
func encode(AnnotatedFeatureProvider<Base, UnwrappedInput>.Transformer, to: inout EstimatorEncoder) throws
Encodes a fitted transformer.
func fitted(to: DataFrame, validateOn: DataFrame?, eventHandler: EventHandler?) async throws -> ColumnSelectorTransformer<Base.Transformer, UnwrappedInput>
Fits a transformer to a data frame
Type Aliases
typealias Annotation
The annotation type.
typealias Transformer
The transformer type created by this estimator.
Default Implementations
API Reference
SupervisedTabularEstimator Implementations
API Reference
UpdatableSupervisedTabularEstimator Implementations
Relationships
Conforms To
Sendable
SupervisedTabularEstimator
Conforms when Base conforms to UpdatableSupervisedEstimator and Base.Transformer.Input is UnwrappedInput?.
UpdatableSupervisedTabularEstimator
Conforms when Base conforms to UpdatableSupervisedEstimator and Base.Transformer.Input is UnwrappedInput?.
See Also
Annotations
struct AnnotatedFiles
An annotated files collection.
struct AnnotatedFeature
An annotated example for fitting a supervised estimator.
struct DataFrameTemporalAnnotationParameters
Annotation parameters for the dataframe containing temporal annotations.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is AnnotatedFeatureProvider
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

