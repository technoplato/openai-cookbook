Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Documentation
Open Menu
Swift
Framework
SwiftData
Write your model code declaratively to add managed persistence and automatic iCloud sync.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
Overview
Combining Core Data’s proven persistence technology and Swift’s modern concurrency features, SwiftData enables you to add persistence to your app quickly, with minimal code and no external dependencies. Using modern language features like macros, SwiftData enables you to write code that is fast, efficient, and safe, enabling you to describe the entire model layer (or object graph) for your app. The framework handles storing the underlying model data, and optionally, syncing that data across multiple devices.
SwiftData has uses beyond persisting locally created content. For example, an app that fetches data from a remote web service might use SwiftData to implement a lightweight caching mechanism and provide limited offline functionality.
SwiftData is unintrusive by design and supplements your app’s existing model classes. Attach the Model() macro to any model class to make it persistable. Customize the behavior of that model’s properties with the Attribute(_:originalName:hashModifier:) and Relationship(_:_:originalName:inverse:hashModifier:) macros. Use the ModelContext class to insert, update, and delete instances of that model, and to write unsaved changes to disk.
To display models in a SwiftUI view, use the Query property wrapper and specify a predicate or fetch descriptor. SwiftData performs the fetch when the view appears, and tells SwiftUI about any subsequent changes to the fetched models so the view can update accordingly. You can access the model context in any SwiftUI view using the modelContext environment value, and specify a particular model container or context for a view with the modelContainer(_:) and modelContext(_:) view modifiers.
As your app’s model layer evolves, SwiftData performs automatic migrations of the underlying model data so it remains in a consistent state. If the aggregate changes between two versions of the model layer exceed the capabilities of automatic migrations, use Schema and SchemaMigrationPlan to participate in those migrations and help them complete successfully.
Note
To provide automatic iCloud sync, SwiftData requires the CloudKit entitlement and an iCloud container. For more information, see Configuring iCloud services.
Topics
Essentials
Preserving your app’s model data across launches
Describe your model classes to SwiftData using the framework’s macros, and store instances of those models so they exist beyond the app’s runtime.
Building a document-based app using SwiftData
Code along with the WWDC presenter to transform an app with SwiftData.
Adopting SwiftData for a Core Data app
Persist data in your app intuitively with the Swift native persistence framework.
Model definition
macro Model()
Converts a Swift class into a stored model that’s managed by SwiftData.
protocol PersistentModel
An interface that enables SwiftData to manage a Swift class as a stored model.
macro Attribute(PropertyOptions..., originalName: String?, hashModifier: String?)
Specifies the custom behavior that SwiftData applies to the annotated property when managing the owning class.
macro Transient()
Tells SwiftData not to persist the annotated property when managing the owning class.
macro Relationship(Relationship.DeleteRule, PropertyOptions..., originalName: String?, inverse: AnyKeyPath?, hashModifier: String?)
Specifies the options that SwiftData needs to manage the annotated property as a relationship between two models.
protocol RelationshipCollection
class PropertyOptions
An object that defines the behavior of a property when SwiftData manages the owning class.
Model storage
class ModelContainer
An object that manages an app’s schema and model storage configuration.
class ModelContext
An object that enables you to fetch, insert, and delete models, and save any changes to disk.
struct ModelDocument
A document type that uses SwiftData to manage its storage.
Model fetch
struct Query
A property wrapper that fetches a set of models and keeps those models in sync with the underlying data.
macro Query()
macro Query<Element>(FetchDescriptor<Element>, animation: Animation)
macro Query<Element>(FetchDescriptor<Element>, transaction: Transaction?)
macro Query(animation: Animation)
macro Query<Element>(filter: Predicate<Element>?, sort: [SortDescriptor<Element>], animation: Animation)
macro Query<Value, Element>(filter: Predicate<Element>?, sort: KeyPath<Element, Value>, order: SortOrder, transaction: Transaction?)
macro Query<Value, Element>(filter: Predicate<Element>?, sort: KeyPath<Element, Value?>, order: SortOrder, transaction: Transaction?)
macro Query<Element>(filter: Predicate<Element>?, sort: [SortDescriptor<Element>], transaction: Transaction?)
macro Query(transaction: Transaction)
struct FetchDescriptor
A type that describes the criteria, sort order, and any additional configuration to use when performing a fetch.
struct Predicate
A logical condition used to test a set of input values for searching or filtering.
struct FetchResultsCollection
A collection that efficiently provides the results of a completed fetch.
Concurrency support
protocol ModelActor
An interface for providing mutually-exclusive access to the attributes of a conforming model.
class DefaultModelExecutor
An object that safely performs storage-related tasks using an isolated model context.
protocol ModelExecutor
An interface for performing storage-related tasks using an isolated model context.
Errors
struct SwiftDataError
A type that describes a SwiftData error.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is SwiftData
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Documentation
Open Menu
Swift
Framework
SwiftData
Write your model code declaratively to add managed persistence and automatic iCloud sync.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
Overview
Combining Core Data’s proven persistence technology and Swift’s modern concurrency features, SwiftData enables you to add persistence to your app quickly, with minimal code and no external dependencies. Using modern language features like macros, SwiftData enables you to write code that is fast, efficient, and safe, enabling you to describe the entire model layer (or object graph) for your app. The framework handles storing the underlying model data, and optionally, syncing that data across multiple devices.
SwiftData has uses beyond persisting locally created content. For example, an app that fetches data from a remote web service might use SwiftData to implement a lightweight caching mechanism and provide limited offline functionality.
SwiftData is unintrusive by design and supplements your app’s existing model classes. Attach the Model() macro to any model class to make it persistable. Customize the behavior of that model’s properties with the Attribute(_:originalName:hashModifier:) and Relationship(_:_:originalName:inverse:hashModifier:) macros. Use the ModelContext class to insert, update, and delete instances of that model, and to write unsaved changes to disk.
To display models in a SwiftUI view, use the Query property wrapper and specify a predicate or fetch descriptor. SwiftData performs the fetch when the view appears, and tells SwiftUI about any subsequent changes to the fetched models so the view can update accordingly. You can access the model context in any SwiftUI view using the modelContext environment value, and specify a particular model container or context for a view with the modelContainer(_:) and modelContext(_:) view modifiers.
As your app’s model layer evolves, SwiftData performs automatic migrations of the underlying model data so it remains in a consistent state. If the aggregate changes between two versions of the model layer exceed the capabilities of automatic migrations, use Schema and SchemaMigrationPlan to participate in those migrations and help them complete successfully.
Note
To provide automatic iCloud sync, SwiftData requires the CloudKit entitlement and an iCloud container. For more information, see Configuring iCloud services.
Topics
Essentials
Preserving your app’s model data across launches
Describe your model classes to SwiftData using the framework’s macros, and store instances of those models so they exist beyond the app’s runtime.
Building a document-based app using SwiftData
Code along with the WWDC presenter to transform an app with SwiftData.
Adopting SwiftData for a Core Data app
Persist data in your app intuitively with the Swift native persistence framework.
Model definition
macro Model()
Converts a Swift class into a stored model that’s managed by SwiftData.
protocol PersistentModel
An interface that enables SwiftData to manage a Swift class as a stored model.
macro Attribute(PropertyOptions..., originalName: String?, hashModifier: String?)
Specifies the custom behavior that SwiftData applies to the annotated property when managing the owning class.
macro Transient()
Tells SwiftData not to persist the annotated property when managing the owning class.
macro Relationship(Relationship.DeleteRule, PropertyOptions..., originalName: String?, inverse: AnyKeyPath?, hashModifier: String?)
Specifies the options that SwiftData needs to manage the annotated property as a relationship between two models.
protocol RelationshipCollection
class PropertyOptions
An object that defines the behavior of a property when SwiftData manages the owning class.
Model storage
class ModelContainer
An object that manages an app’s schema and model storage configuration.
class ModelContext
An object that enables you to fetch, insert, and delete models, and save any changes to disk.
struct ModelDocument
A document type that uses SwiftData to manage its storage.
Model fetch
struct Query
A property wrapper that fetches a set of models and keeps those models in sync with the underlying data.
macro Query()
macro Query<Element>(FetchDescriptor<Element>, animation: Animation)
macro Query<Element>(FetchDescriptor<Element>, transaction: Transaction?)
macro Query(animation: Animation)
macro Query<Element>(filter: Predicate<Element>?, sort: [SortDescriptor<Element>], animation: Animation)
macro Query<Value, Element>(filter: Predicate<Element>?, sort: KeyPath<Element, Value>, order: SortOrder, transaction: Transaction?)
macro Query<Value, Element>(filter: Predicate<Element>?, sort: KeyPath<Element, Value?>, order: SortOrder, transaction: Transaction?)
macro Query<Element>(filter: Predicate<Element>?, sort: [SortDescriptor<Element>], transaction: Transaction?)
macro Query(transaction: Transaction)
struct FetchDescriptor
A type that describes the criteria, sort order, and any additional configuration to use when performing a fetch.
struct Predicate
A logical condition used to test a set of input values for searching or filtering.
struct FetchResultsCollection
A collection that efficiently provides the results of a completed fetch.
Concurrency support
protocol ModelActor
An interface for providing mutually-exclusive access to the attributes of a conforming model.
class DefaultModelExecutor
An object that safely performs storage-related tasks using an isolated model context.
protocol ModelExecutor
An interface for performing storage-related tasks using an isolated model context.
Errors
struct SwiftDataError
A type that describes a SwiftData error.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is SwiftData
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

