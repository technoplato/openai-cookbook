https://developer.apple.com/documentation/realitykit/implementing-systems-for-entities-in-a-sceneSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Hello World
Scene content
USD Assets
Object capture
Reality Composer
Designing RealityKit content with Reality Composer Pro
Diorama
Essentials
RealityKit Systems
Loading Entities from a File
Building an Immersive Experience with RealityKit
Understanding RealityKit’s modular architecture
Entity Component System
r
P
RealityCoordinateSpaceConverting
Beta
S
SceneRealityCoordinateSpace
Beta
Documentation
Open Menu
Swift
Article
Implementing systems for entities in a scene
Apply behaviors and physical effects to the objects and characters in a RealityKit scene with the Entity Component System (ECS).
Overview
You can use RealityKit’s Entity Component System (ECS) to define and apply logic for entities in a scene. Systems are especially useful for implementing behavior that affects multiple entities in your scene, like the flocking behavior for a swarm of entities representing birds. In a traditional object-oriented approach, you implement an entity’s behavior by writing code on the entity class, which runs on every instance of that class on every frame. That approach can be inefficient if there are large numbers of entities in your scene, because RealityKit has to call every entity’s update method on every frame. That’s especially true if the logic for one entity depends on state contained in other entities.
With systems, RealityKit calls only one update method every frame per system, rather than calling an update method every frame for every entity. A system iterates through all relevant entities every frame and makes updates to their state as needed. Here’s how to implement your own systems.
Create a system class
Create a system by a creating a class that conforms to the System protocol and implements two methods: init(scene:) and update(context:). Perform the setup for your system in init(scene:), or add an empty implementation if your system doesn’t need any setup. Add the logic needed to run your system in update(context:), which RealityKit calls every frame automatically.
class MySystem : System {
    required init(scene: Scene) { 
        // Perform required initialization or setup.
    }


    func update(context: SceneUpdateContext) {
        // RealityKit automatically calls this every frame for every scene.
    }
}
Warning
Because RealityKit calls every system’s update(context:) method every frame, don’t do any unnecessary work in that method. If your update(context:) method takes a long time to return, it can negatively impact your app’s frame rate.
Retrieve entities with an entity query
To efficiently retrieve entities from a scene, use an EntityQuery, which you can use to fetch all entities, or just a subset of entities relevant to your system. While some systems operate on every entity in the scene, most only operate on a defined subset, often based on the entities’ components. A physics simulation system, for example, only needs to operate on entities that participate in the scene’s physics simulation and a rendering system only needs to operate on entities that are visible. To retrieve a subset of your scene’s entities, create a QueryPredicate with your criteria and pass the predicate into the initializer when creating your entity query.
Create your query as a static property of your system unless your query criteria change between frames. If the criteria changes between frames, create the query in your update method. Use the entity query in your update(context:) method to iterate over all the entities that your system affects. Here’s how a system iterates through all entities with a specific component.
struct MyComponent: Component {
    // Optionally, put any needed state here.
}


class MySystem : System {


    // Define a query to return all entities with a MyComponent.
    private static let query = EntityQuery(where: .has(MyComponent.self))


    // Initializer is required. Use an empty implementation if there's no setup needed.
    required init(scene: Scene) { }


    // Iterate through all entities containing a MyComponent.
    func update(context: SceneUpdateContext) {
        context.scene.performQuery(Self.query).forEach { entity in
            // Make per-frame changes to each entity here.
        }
    }
}
Create and add components in Reality Composer Pro
If you use a Reality Composer Pro package in your project, you can create new components within the editor by selecting an entity, clicking the Add Component button, and then selecting the New Component option. This creates a Swift template for the new component, which you can then edit in Xcode.
To add a custom component onto an entity, define the custom component in a file in your Reality Composer Pro package. Select the entity you want to add the custom component to, click the Add Component button, then select the name of your custom component. This entity then responds and behaves according to the same systems that you wrote to query for the custom component.
Specify system dependencies
If a system relies on another system to function, or if you need to specify the update order for multiple systems, declare a dependencies array in your system. To tell RealityKit that a dependency must update before your system, use the SystemDependency.before(_:) enumeration case, passing the other system as a parameter. For dependencies that must update after your system, use SystemDependency.after(_:), instead.
class SystemB : RealityKit.System {
    static var dependencies: [SystemDependency] { 
        [.after(SystemA.self),        // Run SystemB after SystemA.
         .before(SystemC.self)]       // Run SystemB before SystemC.
     }
    // ... 
}
Register the system
You don’t create System instances manually. RealityKit creates them for you, but only if you tell RealityKit about your system by calling its registerSystem() method before displaying your app’s ARView. Once you’ve registered your system, RealityKit automatically creates an instance on your system for every active scene, then repeatedly calls its update(context:) method every frame.
MySystem.registerSystem()
See Also
Essentials
struct SystemUpdateCondition
A condition which causes a System to update.
Beta
Current page is Implementing systems for entities in a scene
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

