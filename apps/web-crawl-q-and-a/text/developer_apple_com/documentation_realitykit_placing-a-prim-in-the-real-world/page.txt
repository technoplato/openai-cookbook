https://developer.apple.com/documentation/realitykit/placing-a-prim-in-the-real-worldSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Transforms: Position, Orientation, and Scale
Runtime modifications
r
P
RealityCoordinateSpace
Beta
Animation
Audio
Scene reconstruction and understanding
Cameras and lighting
Anchoring
playbackMode
autoPlay
Animation
USDZ Schemas for AR
Exporting a Reality Composer Scene to USDZ
Essentials
USD Assets
Documentation
Open Menu
Swift
Article
Placing a Prim in the Real World
Anchor a prim to a real-world object that the runtime recognizes in the physical environment.
Overview
When the runtime detects real-world landmarks such as surfaces, images, and faces, it keeps tabs on them in case the app needs to refer to them later as data points for adding virtual content. To track a landmark, the runtime assigns an anchor and updates it to track the orientation and position of that landmark while it’s visible in the camera feed.
Use this schema to attach prims to anchors that the runtime can recognize and track in the physical environment. When you assign the prim an anchor type, the runtime places the prim on the first anchor of that type that it sees in the AR experience.
Note
When a RealityKit app loads an anchored prim with loadAnchor(named:in:), RealityKit instantiates an AnchorEntity with the AnchoringComponent.Target set to the anchor type specified by the prim, such as a plane, image, or face.
Place a Prim on a Surface, Image, or Face
The following cube requests that the runtime place it on the first real-world horizontal surface detected in the physical environment.
def Cube "PlaneAnchoredCube" (
    prepend apiSchemas = [ "Preliminary_AnchoringAPI" ]
)
{
    uniform token preliminary:anchoring:type = "plane"
    uniform token preliminary:planeAnchoring:alignment = "horizontal"
    ...
}
The cube defined in the following example sends a request to the runtime to place it at the real-world location of an image described by image.png.
def Cube "ImageAnchoredCube" (
    prepend apiSchemas = [ "Preliminary_AnchoringAPI" ]
)
{
    uniform token preliminary:anchoring:type = "image"
    rel preliminary:imageAnchoring:referenceImage = <ImageReference>
    ...


    def Preliminary_ReferenceImage "ImageReference"
    {
      uniform asset image = @image.png@
      uniform double physicalWidth = 0.12
    }
}
The following example instructs the runtime to place a cube at the real-word location of a detected face. In RealityKit, a face anchor centers its content at its origin, which is the detected face’s plane midpoint.
def Cube "FaceAnchoredCube" (
    prepend apiSchemas = [ "Preliminary_AnchoringAPI" ]
)
{
    uniform token preliminary:anchoring:type = "face"
    ...
}
See Also
Anchoring
API Reference
Preliminary_AnchoringAPI
A schema that defines the placement of a prim and its children at a real-world location.
API Reference
Preliminary_ReferenceImage
A schema that defines the properties of an image in the physical environment.
Current page is Placing a Prim in the Real World
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

