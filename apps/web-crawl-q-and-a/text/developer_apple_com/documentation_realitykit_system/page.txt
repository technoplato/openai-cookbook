https://developer.apple.com/documentation/realitykit/systemSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
QueryResult
S
QueryPredicate
S
EntityQuery
Entity Queries
S
SceneUpdateContext
S
OpacityComponent
Beta
S
PhysicsSystem
System type
S
SystemUpdateCondition
Beta
Implementing systems for entities in a scene
Essentials
RealityKit Systems
Loading Entities from a File
Building an Immersive Experience with RealityKit
Understanding RealityKit’s modular architecture
Documentation
Open Menu
Swift
Protocol
System
An object that affects multiple entities in every frame of a RealityKit scene.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
visionOS 1.0+ Beta
protocol System
Overview
In RealityKit’s Entity Component System (ECS), a system represents continuous behavior that affects multiple entities in the scene. Use systems to implement any behavior or logic that updates entities every frame, such as different types of objects or characters. For example, a physics simulation system calculates and applies the affect of gravity, forces, and collisions for all entities.
Systems often work with components. You might, for example, create a system that calculates the hunger levels for entities in a game capable of feeling hunger. To identify which entities experience hunger, use a component that stores hunger-related state data and add it to the selected entities. The hunger system then iterates through all entities in every frame that contain a hunger component and updates their state based on relevant factors, such as when the entity ate last or how much energy it expends.
A complex game or experience may consist of many systems which need to be executed in a specific order. The dependencies property defines when the update method for each system is called each frame. Update order is defined between system types and not between individual system instances.
Systems and their dependencies form a directed acyclic graph (DAG). Custom systems are executed in dependency order. Systems without dependencies are updated in the order they were registered. If there are conflicting dependencies or cycles, then RealityKit ignores some conflicting dependencies and logs a warning. Each system instance is only run once per simulation step.
Properties of a system are never serialized to a file or synced over the network. Therefore, data should usually be stored on entities using components, rather than as part of the system.
For more information, see Implementing systems for entities in a scene.
Topics
Registering a System
static func registerSystem()
Registers a system with RealityKit.
Specifying Dependencies
static var dependencies: [SystemDependency]
An array of dependencies for this system.
Required Default implementation provided.
enum SystemDependency
Defines update order relative to other systems. An object that specifies the update order between multiple systems.
Creating a System
init(scene: Scene)
Creates a new system.
Required
Implementing System Logic
func update(context: SceneUpdateContext)
Updates entities every frame.
Required Default implementation provided.
struct SceneUpdateContext
An object that contains information about the scene to update.
struct EntityQuery
An object that retrieves entities from a scene.
struct QueryPredicate
An object that defines the criteria for an entity query.
struct QueryResult
An object that returns the results of an entity query.
Provided Systems
struct PhysicsSystem
Defines the built-in Engine systems. It is used to specify custom system update order with respects to the built-in Engine systems. Note that system registration for those systems are taken care of Example usage: class ASystem: System { static var dependencies: [SystemDependency] = [ .before(PhysicsSystem.self) ] }
Beta
struct OpacityComponent
Beta
Relationships
Conforming Types
NetworkReceiveSystem
NetworkSendSystem
PhysicsSystem
See Also
System type
struct SceneUpdateContext
An object that contains information about the scene to update.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is System
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

