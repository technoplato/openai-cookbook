https://developer.apple.com/documentation/realitykit/realityview/background(_:ignoressafeareaedges:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func buttonBorderShape(ButtonBorderShape) -> some View
M
func brightness(Double) -> some View
M
func border<S>(S, width: CGFloat) -> some View
M
func bold(Bool) -> some View
M
func blur(radius: CGFloat, opaque: Bool) -> some View
M
func blendMode(BlendMode) -> some View
M
func baselineOffset(CGFloat) -> some View
M
func background<Background>(Background, alignment: Alignment) -> some View
M
func autocorrectionDisabled(Bool) -> some View
M
func autocapitalization(UITextAutocapitalizationType) -> some View
M
func aspectRatio(CGSize, contentMode: ContentMode) -> some View
M
func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View
M
func animation<V>(Animation?, value: V) -> some View
M
func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View
M
func animation(Animation?) -> some View
Deprecated
Documentation
Open Menu
Swift
Instance Method
background(_:ignoresSafeAreaEdges:)
Sets the view’s background to a style.
RealityKit
SwiftUI
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
func background<S>(
    _ style: S,
    ignoresSafeAreaEdges edges: Edge.Set = .all
) -> some View where S : ShapeStyle
Parameters
style
An instance of a type that conforms to ShapeStyle that SwiftUI draws behind the modified view.
edges
The set of edges for which to ignore safe area insets when adding the background. The default value is Edge/Set/all. Specify an empty set to respect safe area insets on all edges.
Return Value
A view with the specified style drawn behind it.
Discussion
Use this modifier to place a type that conforms to the ShapeStyle protocol — like a Color, Material, or HierarchicalShapeStyle — behind a view. For example, you can add the ShapeStyle/regularMaterial behind a Label:
struct FlagLabel: View {
    var body: some View {
        Label("Flag", systemImage: "flag.fill")
            .padding()
            .background(.regularMaterial)
    }
}
SwiftUI anchors the style to the view’s bounds. For the example above, the background fills the entirety of the label’s frame, which includes the padding:
SwiftUI limits the background style’s extent to the modified view’s container-relative shape. You can see this effect if you constrain the FlagLabel view with a View/containerShape(_:) modifier:
FlagLabel()
    .containerShape(RoundedRectangle(cornerRadius: 16))
The background takes on the specified container shape:
By default, the background ignores safe area insets on all edges, but you can provide a specific set of edges to ignore, or an empty set to respect safe area insets on all edges:
Rectangle()
    .background(
        .regularMaterial,
        ignoresSafeAreaEdges: []) // Ignore no safe area insets.
If you want to specify a View or a stack of views as the background, use View/background(alignment:content:) instead. To specify a Shape or InsettableShape, use View/background(_:in:fillStyle:)-89n7j or View/background(_:in:fillStyle:)-20tq5, respectively. To configure the background of a presentation, like a sheet, use View/presentationBackground(_:).
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is background(_:ignoresSafeAreaEdges:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

