https://developer.apple.com/documentation/realitykit/realityview/swipeactions(edge:allowsfullswipe:content:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func speechAnnouncementsQueued(Bool) -> some View
M
func speechSpellsOutCharacters(Bool) -> some View
M
func springLoadingBehavior(SpringLoadingBehavior) -> some View
M
func statusBar(hidden: Bool) -> some View
Deprecated
M
func statusBarHidden(Bool) -> some View
M
func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View
M
func submitLabel(SubmitLabel) -> some View
M
func submitScope(Bool) -> some View
M
func textEditorStyle(some TextEditorStyle) -> some View
M
func textFieldStyle<S>(S) -> some View
M
func textInputAutocapitalization(TextInputAutocapitalization?) -> some View
M
func textScale(Text.Scale, isEnabled: Bool) -> some View
M
func textSelection<S>(S) -> some View
M
func tint(Color?) -> some View
M
func toggleStyle<S>(S) -> some View
Documentation
Open Menu
Swift
Instance Method
swipeActions(edge:allowsFullSwipe:content:)
Adds custom swipe actions to a row in a list.
RealityKit
SwiftUI
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
func swipeActions<T>(
    edge: HorizontalEdge = .trailing,
    allowsFullSwipe: Bool = true,
    @ViewBuilder content: () -> T
) -> some View where T : View
Parameters
edge
The edge of the view to associate the swipe actions with. The default is HorizontalEdge/trailing.
allowsFullSwipe
A Boolean value that indicates whether a full swipe automatically performs the first action. The default is true.
content
The content of the swipe actions.
Discussion
Use this method to add swipe actions to a view that acts as a row in a list. Indicate the HorizontalEdge where the swipe action originates, and define individual actions with Button instances. For example, if you have a list of messages, you can add an action to toggle a message as unread on a swipe from the leading edge, and actions to delete or flag messages on a trailing edge swipe:
List {
    ForEach(store.messages) { message in
        MessageCell(message: message)
            .swipeActions(edge: .leading) {
                Button { store.toggleUnread(message) } label: {
                    if message.isUnread {
                        Label("Read", systemImage: "envelope.open")
                    } else {
                        Label("Unread", systemImage: "envelope.badge")
                    }
                }
            }
            .swipeActions(edge: .trailing) {
                Button(role: .destructive) {
                    store.delete(message)
                } label: {
                    Label("Delete", systemImage: "trash")
                }
                Button { store.flag(message) } label: {
                    Label("Flag", systemImage: "flag")
                }
            }
        }
    }
}
Actions appear in the order you list them, starting from the swipe’s originating edge. In the example above, the Delete action appears closest to the screen’s trailing edge:
For labels or images that appear in swipe actions, SwiftUI automatically applies the SymbolVariants/fill-swift.type.property symbol variant, as shown above.
By default, the user can perform the first action for a given swipe direction with a full swipe. For the example above, the user can perform both the toggle unread and delete actions with full swipes. You can opt out of this behavior for an edge by setting the allowsFullSwipe parameter to false. For example, you can disable the full swipe on the leading edge:
.swipeActions(edge: .leading, allowsFullSwipe: false) {
    Button { store.toggleUnread(message) } label: {
        if message.isUnread {
            Label("Read", systemImage: "envelope.open")
        } else {
            Label("Unread", systemImage: "envelope.badge")
        }
    }
}
When you set a role for a button using one of the values from the ButtonRole enumeration, SwiftUI styles the button according to its role. In the example above, the delete action appears in ShapeStyle/red because it has the ButtonRole/destructive role. If you want to set a different color — for example, to match the overall theme of your app’s UI — add the View/tint(_:) modifier to the button:
MessageCell(message: message)
    .swipeActions(edge: .leading) {
        Button { store.toggleUnread(message) } label: {
            if message.isUnread {
                Label("Read", systemImage: "envelope.open")
            } else {
                Label("Unread", systemImage: "envelope.badge")
            }
        }
        .tint(.blue)
    }
    .swipeActions(edge: .trailing) {
        Button(role: .destructive) { store.delete(message) } label: {
            Label("Delete", systemImage: "trash")
        }
        Button { store.flag(message) } label: {
            Label("Flag", systemImage: "flag")
        }
        .tint(.orange)
    }
The modifications in the code above make the toggle unread action ShapeStyle/blue and the flag action ShapeStyle/orange:
When you add swipe actions, SwiftUI no longer synthesizes the Delete actions that otherwise appear when using the ForEach/onDelete(perform:) method on a ForEach instance. You become responsible for creating a Delete action, if appropriate, among your swipe actions.
Actions accumulate for a given edge if you call the modifier multiple times on the same list row view.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is swipeActions(edge:allowsFullSwipe:content:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

