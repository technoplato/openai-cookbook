https://developer.apple.com/documentation/realitykit/scene/publisher/reduce(_:_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>
M
func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>
M
func dropFirst(Int) -> Publishers.Drop<Self>
M
func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>
M
func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>
Applying Sequence Operations to Elements
M
func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>
M
func ignoreOutput() -> Publishers.IgnoreOutput<Self>
M
func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>
M
func collect(Int) -> Publishers.CollectByCount<Self>
M
func collect() -> Publishers.Collect<Self>
Reducing Elements
M
func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>
M
func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>
M
func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>
Documentation
Open Menu
Swift
Instance Method
reduce(_:_:)
Applies a closure that collects each element of a stream and publishes a final result upon completion.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func reduce<T>(
    _ initialResult: T,
    _ nextPartialResult: @escaping (T, Self.Output) -> T
) -> Publishers.Reduce<Self, T>
Parameters
initialResult
The value that the closure receives the first time it’s called.
nextPartialResult
A closure that produces a new value by taking the previously-accumulated value and the next element it receives from the upstream publisher.
Return Value
A publisher that applies the closure to all received elements and produces an accumulated value when the upstream publisher finishes. If reduce(_:_:) receives an error from the upstream publisher, the operator delivers it to the downstream subscriber, the publisher terminates and publishes no value.
Discussion
Use reduce(_:_:) to collect a stream of elements and produce an accumulated value based on a closure you provide.
In the following example, the reduce(_:_:) operator collects all the integer values it receives from its upstream publisher:
let numbers = (0...10)
cancellable = numbers.publisher
    .reduce(0, { accum, next in accum + next })
    .sink { print("\($0)") }


// Prints: "55"
See Also
Reducing Elements
func collect() -> Publishers.Collect<Self>
Collects all received elements, and emits a single array of the collection when the upstream publisher finishes.
func collect(Int) -> Publishers.CollectByCount<Self>
Collects up to the specified number of elements, and then emits a single array of the collection.
func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>
Collects elements by a given time-grouping strategy, and emits a single array of the collection.
func ignoreOutput() -> Publishers.IgnoreOutput<Self>
Ignores all upstream elements, but passes along the upstream publisher’s completion state (finished or failed).
func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>
Applies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is reduce(_:_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

