https://developer.apple.com/documentation/realitykit/scene/publisher/breakpoint(receivesubscription:receiveoutput:receivecompletion:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Default Implementations
M
func findEntity(id: Entity.ID) -> Entity?
Instance Methods
P
var timebase: CMTimebase
Beta
Instance Properties
P
var hashValue: Int
M
func hash(into: inout Hasher)
func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>
func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>
Debugging
M
func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable
M
func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable
M
func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable
Connecting Simple Subscribers
M
func makeConnectable() -> Publishers.MakeConnectable<Self>
Adding Explicit Connectability
M
func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>
Documentation
Open Menu
Swift
Instance Method
breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)
Raises a debugger signal when a provided closure needs to stop the process in the debugger.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func breakpoint(
    receiveSubscription: ((Subscription) -> Bool)? = nil,
    receiveOutput: ((Self.Output) -> Bool)? = nil,
    receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)? = nil
) -> Publishers.Breakpoint<Self>
Parameters
receiveSubscription
A closure that executes when the publisher receives a subscription. Return true from this closure to raise SIGTRAP, or false to continue.
receiveOutput
A closure that executes when the publisher receives a value. Return true from this closure to raise SIGTRAP, or false to continue.
receiveCompletion
A closure that executes when the publisher receives a completion. Return true from this closure to raise SIGTRAP, or false to continue.
Return Value
A publisher that raises a debugger signal when one of the provided closures returns true.
Discussion
Use breakpoint(receiveSubscription:receiveOutput:receiveCompletion:) to examine one or more stages of the subscribe/publish/completion process and stop in the debugger, based on conditions you specify. When any of the provided closures returns true, this operator raises the SIGTRAP signal to stop the process in the debugger. Otherwise, this publisher passes through values and completions as-is.
In the example below, a PassthroughSubject publishes strings to a breakpoint republisher. When the breakpoint receives the string “DEBUGGER”, it returns true, which stops the app in the debugger.
let publisher = PassthroughSubject<String?, Never>()
cancellable = publisher
    .breakpoint(
        receiveOutput: { value in return value == "DEBUGGER" }
    )
    .sink { print("\(String(describing: $0))" , terminator: " ") }


publisher.send("DEBUGGER")


// Prints: "error: Execution was interrupted, reason: signal SIGTRAP."
// Depending on your specific environment, the console messages may
// also include stack trace information, which is not shown here.
See Also
Debugging
func breakpointOnError() -> Publishers.Breakpoint<Self>
Raises a debugger signal upon receiving a failure.
func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>
Performs the specified closures when publisher events occur.
func print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>
Prints log messages for all publishing events.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is breakpoint(receiveSubscription:receiveOutput:receiveCompletion:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

