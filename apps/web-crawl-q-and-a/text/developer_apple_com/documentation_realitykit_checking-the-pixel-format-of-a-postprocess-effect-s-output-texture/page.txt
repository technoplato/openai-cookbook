https://developer.apple.com/documentation/realitykit/checking-the-pixel-format-of-a-postprocess-effect-s-output-textureSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Custom Materials and Shader Functions
S
NetworkSendSystem
Beta
S
NetworkReceiveSystem
Beta
C
NetworkCompatibilityToken
E
SynchronizationEvents
r
P
SynchronizationService
C
MultipeerConnectivityService
Implementing Special Rendering Effects with RealityKit Postprocessing
Using Metal Performance Shaders to Create Custom Postprocess Effects
Metal effects
Applying Core Image Filters as a Postprocess Effect
Core Image effects
S
ARView.RenderCallbacks
S
ARView.PostProcessContext
Implementing Postprocess Effects Using Metal Compute Functions
Documentation
Open Menu
Swift
Article
Checking the Pixel Format of a Postprocess Effect’s Output Texture
Make sure your postprocess effect works on all devices.
Overview
Some device GPUs require that the output texture for postprocess effects be in a specific format. If the current device doesn’t support MTLGPUFamily.apple2, convert the output texture to MTLPixelFormat.bgra8Unorm before encoding the processed framebuffer to it. An easy way to do that, is to add a derived property to ARView.PostProcessContext using an extension:
extension RealityKit.ARView.PostProcessContext {
    // Returns the output texture, ensuring that the pixel format is 
    // appropriate for the current device's GPU.
    var compatibleTargetTexture: MTLTexture! {
        if self.device.supportsFamily(.apple2) {
            return targetColorTexture
        } else {
            return targetColorTexture.makeTextureView(pixelFormat: .bgra8Unorm)!
        }
    }
}
If you use this derived property instead of targetColorTexture when encoding the results of a postprocess effect, it ensures the effect works on all devices.
See Also
Metal effects
Using Metal Performance Shaders to Create Custom Postprocess Effects
Leverage the Metal Performance Shaders framework to create special rendering effects for your RealityKit scenes.
Passing Structured Data to a Metal Compute Function
Send nontexture data from Swift to your Metal shaders using a shared header file.
Implementing Postprocess Effects Using Metal Compute Functions
Create custom shaders to implement postprocess effects.
Current page is Checking the Pixel Format of a Postprocess Effect’s Output Texture
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

