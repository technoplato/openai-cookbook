https://developer.apple.com/documentation/coreml/mlshapedarray

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
init(from: Decoder)
Encoding and decoding
M
init(data: Data, shape: [Int], strides: [Int])
M
init(data: Data, shape: [Int])
Creating a shaped array from data
M
init(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Scalar>, [Int]) -> Void)
M
init(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)
E
MLFeatureType
Supporting Types
M
func isEqual(to: MLFeatureValue) -> Bool
Comparing Feature Values
P
var dictionaryValue: [AnyHashable : NSNumber]
P
var sequenceValue: MLSequence?
P
var multiArrayValue: MLMultiArray?
M
func shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?
Documentation
Open Menu
Swift
Generic Structure
MLShapedArray
A machine learning collection type that stores scalar values in a multidimensional array.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
Xcode 13.0+
struct MLShapedArray<Scalar> where Scalar : MLShapedArrayScalar
Overview
A shaped array is a multidimensional array type that’s the Swift counterpart to MLMultiArray. MLShapedArray is one of the underlying types of MLFeatureValue that stores scalar values. You can convert a shaped array to an MLMultiArray with its init(_:) initializer, and convert back to a shaped array with its init(_:) initializer. All elements in an MLShapedArray are of the same type, and that type must conform to MLShapedArrayScalar:
Int32
Float
Double
Each dimension in a shaped array is typically significant or meaningful. For example, a model could have an input that accepts images as a three-dimensional array of pixels, C x H x W. The first dimension, C, represents the number of color channels, and the second and third dimensions, H and W, represent the image’s height and width, respectively. The number of dimensions and size of each dimension define the shaped array’s shape.
Note
Some models use a one-dimensional multiarray for an input or output. This type of shaped array is conceptually identical to a conventional Array.
A shaped array’s shape property is an integer array in which each element defines the size of the corresponding dimension. To inspect the shape and constraints of a model’s multiarray input or output feature:
Access the model’s modelDescription property.
Find the multiarray input or output feature in the model description’s inputDescriptionsByName or outputDescriptionsByName property, respectively.
Access the feature description’s multiArrayConstraint property.
Inspect the multiarray constraint’s shape and shapeConstraint.
Topics
Creating a Shaped Array
init(scalar: Scalar)
Creates a shaped array with exactly one value and zero dimensions.
init(arrayLiteral: Scalar...)
Creates a shaped array from a list of values.
init<S>(scalars: S, shape: [Int])
Creates a shaped array from an array of values.
init(repeating: Scalar, shape: [Int])
Creates a shaped array that initializes every element to the same value.
init(identityMatrixOfSize: Int)
Creates a shaped array that’s an identity matrix of integers.
Available when Scalar conforms to FixedWidthInteger.
init(randomScalarsIn: Range<Scalar>, shape: [Int])
Creates a shaped array that initializes the elements to random integer values within a range.
Available when Scalar conforms to FixedWidthInteger.
Creating a Shaped Array from Another Type
init(MLMultiArray)
Creates a shaped array from a multiarray.
init(converting: MLMultiArray)
Creates a shaped array by converting a multiarray.
init<T>(converting: T)
Creates a shaped array by converting another shaped array type.
init<S>(concatenating: S, alongAxis: Int)
Merges a sequence of shaped arrays into one shaped array along an axis.
Creating a shaped array with pointers to memory
init(bytesNoCopy: UnsafeRawPointer, shape: [Int], deallocator: Data.Deallocator)
Creates a shaped array from a data pointer.
init(bytesNoCopy: UnsafeRawPointer, shape: [Int], strides: [Int], deallocator: Data.Deallocator)
Creates a shaped array from a data pointer with memory strides.
init(unsafeUninitializedShape: [Int], initializingWith: (inout UnsafeMutableBufferPointer<Scalar>, [Int]) -> Void)
Creates a shaped array from a shape and a closure that initializes its memory.
Creating a shaped array from data
init(data: Data, shape: [Int])
Creates a shaped array from a block of data and a shape.
init(data: Data, shape: [Int], strides: [Int])
Creates a shaped array from a block of data, a shape, and strides.
Encoding and decoding
init(from: Decoder)
Creates a shaped array from a decoder.
Available when Scalar conforms to Decodable.
func encode(to: Encoder)
Encode a shaped array.
Available when Scalar conforms to Encodable.
Inspecting a Shaped Array
var isScalar: Bool
A Boolean value that indicates whether the shaped array has zero dimensions.
var shape: [Int]
An integer array in which each element represents the size of the corresponding dimension.
var strides: [Int]
An integer array in which each element is the number of memory locations that span the length of the corresponding dimension.
var isEmpty: Bool
A Boolean value indicating whether the collection is empty.
var scalarCount: Int
The total number of elements in the shaped array.
var count: Int
The number of elements in the collection.
var underestimatedCount: Int
A value less than or equal to the number of elements in the collection.
var description: String
A text representation of the shaped array.
Accessing an Element
var scalar: Scalar?
A computed property that returns the first element when the shape isn’t empty, or sets the shaped array’s underlying scalar type.
var scalars: [Scalar]
A computed property that generates a linear array that contains every element, or assigns the elements of an array to the shaped array’s elements.
subscript(scalarAt: Int...) -> Scalar
Accesses an element in the shaped array using a list of indices that represent a multidimensional location.
subscript<C>(scalarAt: C) -> Scalar
Accesses an element in the shaped array using a collection of indices that represent a multidimensional location.
Accessing a Slice from the First Dimension
subscript(Int) -> MLShapedArraySlice<Scalar>
Accesses a slice at an index in the shaped array’s first dimension.
subscript(Range<Int>) -> MLShapedArraySlice<Scalar>
Accesses a slice with a range in the shaped array’s first dimension.
subscript<R>(R) -> MLShapedArraySlice<Scalar>
Accesses a slice with an integer range expression in the shaped array’s first dimension.
subscript(MLShapedArrayRangeExpression) -> MLShapedArraySlice<Scalar>
Accesses a slice with a shaped-array range expression in the shaped array’s first dimension.
subscript((UnboundedRange_) -> Void) -> MLShapedArraySlice<Scalar>
Accesses a slice with an unbounded range in the shaped array’s first dimension.
subscript((UnboundedRange_) -> ()) -> MLShapedArraySlice<Scalar>
Accesses a slice with an unbounded range in the shaped array’s first dimension.
Accessing a Slice from Multiple Dimensions
subscript(Int...) -> MLShapedArraySlice<Scalar>
Accesses a slice using a list of integers, in which each element is an index in the corresponding dimension.
subscript<C>(C) -> MLShapedArraySlice<Scalar>
Accesses a slice using a collection of integers, in which each element is an index in the corresponding dimension.
subscript<C>(C) -> MLShapedArraySlice<Scalar>
Accesses a slice using a collection of integer ranges, in which each element is a range in the corresponding dimension.
subscript(MLShapedArrayRangeExpression...) -> MLShapedArraySlice<Scalar>
Accesses a slice using a list of range expressions, in which each element is a range in the corresponding dimension.
subscript<C>(C) -> MLShapedArraySlice<Scalar>
Accesses a slice using a collection of range expressions, in which each element is a range in the corresponding dimension.
Inspecting the Underlying Memory of a Shaped Array
func withUnsafeShapedBufferPointer<R>((UnsafeBufferPointer<Scalar>, [Int], [Int]) -> R) -> R
Provides a closure with a read-only pointer to the shaped array’s underlying memory.
Modifying a Shaped Array
func fill(with: Scalar)
Sets all the shaped array’s elements to a scalar value.
func fill<C>(with: C)
Assigns the shaped array’s elements to the elements in a collection, repeatedly, if necessary.
func withUnsafeMutableShapedBufferPointer<R>((inout UnsafeMutableBufferPointer<Scalar>, [Int], [Int]) -> R) -> R
Provides a closure with a read-write pointer to the shaped array’s underlying memory.
Comparing Shaped Arrays
static func == (MLShapedArray<Scalar>, MLShapedArray<Scalar>) -> Bool
Returns a Boolean value that indicates whether two values are equal.
Available when Scalar conforms to Equatable.
Beta
static func != (MLShapedArray<Scalar>, MLShapedArray<Scalar>) -> Bool
Returns a Boolean value that indicates whether two values are not equal.
Available when Scalar conforms to Equatable.
Beta
Supporting Types
typealias MLShapedArray.Element
A type that defines the shaped array’s elements.
typealias MLShapedArray.Index
A type that defines the shaped array’s indices.
typealias MLShapedArray.Indices
A type that defines the shaped array’s index ranges.
typealias MLShapedArray.Iterator
A type that defines the shaped array’s iterator.
typealias MLShapedArray.SubSequence
A type that defines the shaped array’s slices.
typealias MLShapedArray.ArrayLiteralElement
A type that restricts the elements of an array literal that initializes the shaped array.
API Reference
Shaped Array Collection Operations
Relationships
Conforms To
CustomStringConvertible
Decodable
Conforms when Scalar conforms to Decodable.
Encodable
Conforms when Scalar conforms to Encodable.
Equatable
Conforms when Scalar conforms to Equatable.
MLShapedArrayProtocol
See Also
Supporting Types
enum MLFeatureType
The possible types for feature values, input features, and output features.
protocol MLShapedArrayProtocol
An interface that defines a shaped array type.
class MLMultiArray
A machine learning collection type that stores numeric values in an array with multiple dimensions.
class MLSequence
A machine learning collection type that stores a series of strings or integers.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLShapedArray
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

