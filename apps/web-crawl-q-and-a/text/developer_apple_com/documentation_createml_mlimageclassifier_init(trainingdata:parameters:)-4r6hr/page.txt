https://developer.apple.com/documentation/createml/mlimageclassifier/init(trainingdata:parameters:)-4r6hr

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
P
var playgroundDescription: Any
P
var debugDescription: String
P
var description: String
Describing an Image Classifier
P
let modelParameters: MLImageClassifier.ModelParameters
P
var model: MLModel
Inspecting an Image Classifier Model
init(trainingData: MLImageClassifier.DataSource, parameters: MLImageClassifier.ModelParameters) throws
Training an Image Classifier Synchronously
M
init(checkpoint: MLCheckpoint) throws
Creating an Image Classifier from a Checkpoint
M
static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLImageClassifier>
M
static func resume(MLTrainingSession<MLImageClassifier>) throws -> MLJob<MLImageClassifier>
M
static func train(trainingData: MLImageClassifier.DataSource, parameters: MLImageClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLImageClassifier>
Training an Image Classifier Asynchronously
S
MLImageClassifier
Documentation
Open Menu
Swift
Initializer
init(trainingData:parameters:)
Creates an image classifier with a training dataset represented by a data source.
iOS 15.0+
iPadOS 15.0+
macOS 11.0+
Mac Catalyst 15.0+
visionOS 1.0+ Beta
init(
    trainingData: MLImageClassifier.DataSource,
    parameters: MLImageClassifier.ModelParameters = ModelParameters(
            validation: .split(strategy: .automatic),
            augmentation: [],
            algorithm: .transferLearning(
                featureExtractor: .scenePrint(revision: 1),
                classifier: .logisticRegressor
            )
        )
) throws
Parameters
trainingData
A set of labeled images the task uses to train the image classifier model, contained in a data source.
parameters
An MLImageClassifier.ModelParameters instance you use to configure the model for the training session.
Discussion
When you create an MLImageClassifier instance, initialize it with an MLImageClassifier.ModelParameters structure. This allows you to configure the image classifier training process. For example, you can explicitly define the validation dataset instead of allowing the model to choose a random selection of your training data. Alternatively, as shown in the following example, set validationData to nil to allow the classifier to choose the validation data for you from among your training data. This lets you set other parameters—like maximum iterations and augmentation options—to values other than the default.
let parameters = MLImageClassifier.ModelParameters(
    featureExtractor: .scenePrint(revision: 1),
    validationData: nil,
    maxIterations: 20,
    augmentationOptions: [.crop]
)
Use the parameter structure and your training data to build a classifier. The following example uses training data from labeled directories within a directory called Training, which resides in the Downloads directory:
if let downloads = FileManager.default.urls(for: .downloadsDirectory, in: .userDomainMask).first {
    let trainingURL = downloads.appendingPathComponent("Training")
    let classifier = try MLImageClassifier(
        trainingData: .labeledDirectories(at: trainingURL),
        parameters: parameters
    )
}
Training begins immediately.
Note
If you represent your training data with a dictionary of strings and corresponding URL arrays, use init(trainingData:parameters:) instead.
See Also
Training an Image Classifier Synchronously
init(trainingData: [String : [URL]], parameters: MLImageClassifier.ModelParameters) throws
Creates an image classifier with a training dataset represented by a dictionary.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(trainingData:parameters:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

