https://developer.apple.com/documentation/visionos/making-your-app-compatible-with-visionosSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Interacting with your app in the visionOS simulator
Running your app in Simulator or on a device
Simulator
Configuring your app icon
Creating a performance plan for your visionOS app
Diagnosing issues in the appearance of a running app
Diagnosing and resolving bugs in your running app
Xcode and Instruments
Documentation
Open Menu
Article
Making your existing app compatible with visionOS
Modify your iPadOS or iOS app to run successfully in visionOS.
Overview
A compatible iPadOS or iOS app links against the iOS SDK and runs in visionOS. Although visionOS provides a complete set of iOS frameworks for linking, some features of those frameworks might be unavailable due to hardware or usage differences. To ensure your app runs correctly in visionOS, handle any missing features gracefully and provide workarounds wherever possible.
Perform availability and authorization checks before using features
Some frameworks offer APIs to let you determine when framework features are available or whether your app is authorized to use them. Always check these APIs before you try to use the corresponding features, and don’t assume a feature is available because the necessary hardware is present. The device’s configuration also plays a role in determining the results of some availability and authorization checks, and features might not be present when your app runs in Simulator. If an availability or authorization check fails, don’t try to use the associated feature in your app.
The following frameworks support availability or authorization checks:
ActivityKit. Check the areActivitiesEnabled property of ActivityAuthorizationInfo to determine if Live Activities are authorized.
ARKit. Check the isSupported property of your configuration object to determine availability of augmented reality features. In visionOS, ARKit views such as ARView are never available, so isolate interface code containing those views to the iOS version of your app.
AVFoundation. Identify what cameras are available using the AVCaptureDevice.DiscoverySession class. Don’t assume the presence of specific cameras.
Automatic Assessment Configuration. Check for error values when you configure an AEAssessmentSession object.
Contacts. Use the CNContactStore class to determine your app’s authorization status.
Core Bluetooth. Use the CBCentralManager and CBPeripheralManager classes to determine feature availability and your app’s authorization status.
Core Haptics. Call the capabilitiesForHardware() method of the haptic engine to determine the available features.
Core Location. Check the properties of CLLocationManager to determine the availability of location services.
Core Motion. Check the properties of CMMotionManager to determine the availability of accelerometers, gyroscopes, magnetometers, and other hardware sensors.
Core NFC. Check the readingAvailable property of your reader session to determine if NFC tag reading is available.
EventKit. Use the EKEventStore class to determine your app’s authorization status.
ExposureNotification. Use the ENManager class to determine your app’s authorization status.
HealthKit. Use the HKHealthStore class to determine if health-related data is available.
HomeKit. Check the properties of HMHomeManager to determine your app’s authorization status.
Local Authentication. Use the LAContext class to determine the authentication policies you can use.
Media Player. Use the MPMediaLibrary class to determine your app’s authorization status.
Nearby Interaction. Check the deviceCapabilities property of your session to determine whether features are available.
PhotoKit. Use the PHPhotoLibrary class to determine your app’s authorization status.
ProximityReader. Check the isSupported property of the card reader object to determine if Tap to Pay on iPhone is available.
ReplayKit. Check the isAvailable property of RPScreenRecorder to determine if screen recording support is available.
RoomPlan. Check the isSupported property of the RoomCaptureSession object to determine if LiDAR scanning is available on the device.
SensorKit. Use the SRSensorReader class to determine your app’s authorization status.
Speech. Use the SFSpeechRecognizer class to determine if speech recognition is available.
User Notifications. Use the getNotificationSettings(completionHandler:) method of UNUserNotificationCenter to determine your app’s authorization status.
WatchConnectivity. Call the isSupported() method of the WCSession object to determine if the framework is available.
Handle environmental differences appropriately
Apple frameworks take a device-agnostic approach whenever possible to minimize issues when you use them on different device types. Apple devices come in a variety of shapes and sizes, and with different sets of features. Rather than build your app for a specific device, make sure it adapts to any device and can gracefully handle differences.
Build robustness into your app during the design process. Avoid assumptions that might cause your app to break when it runs on a new device, and make sure your app adapts dynamically to different conditions. For example:
Don’t assume the device type or idiom is always iPhone, iPad, or iPod Touch. Avoid decisions based on the current idiom. If you do rely on the current idiom, provide reasonable defaults for unknown idioms.
Design your app to handle unavailable hardware or features. Specific hardware and features might be unavailable for many different reasons. For example, a feature might be unavailable when your app runs in Simulator. Perform availability checks whenever possible, and handle missing features gracefully.
Design your windows and views to adapt dynamically. Build your interface to adapt dynamically to any size using SwiftUI or Auto Layout. Assume the size of your app can change dynamically.
Don’t assume the device has a specific number of displays. People can connect iPad and iPhone to an external display, and visionOS devices use two displays to create a stereoscopic version of your app’s content.
Don’t make assumptions based on the available frameworks or symbols. The presence or absence of frameworks or code symbols is an unreliable way to identify a device type, and can change in later software updates.
Don’t assume your app runs in the background. visionOS doesn’t support the location, external accessory, or Bluetooth-peripheral background execution modes.
Don’t assume that background apps are hidden. In visionOS, the windows of background apps remain visible, but are dimmed when no one looks at them. The only time app windows disappear is when one app presents an immersive space.
When you make decisions using device details, your app might produce inconsistent or erroneous results on an unknown device type, or it might fail altogether. Find solutions that rely on environmental information, rather than the device type. For example, SwiftUI and UIKit start layout using the app’s window size, which isn’t necessarily the same size as the device’s display.
Note
Device-specific information is available when you absolutely need it, but validate the information you receive and provide reasonable default behavior for unexpected values.
Audit your interface code
To minimize disruptions, visionOS runs your compatible iPad or iPhone app in an environment that matches an iPad as much as possible. Windows and views retain the same appearance that they have in iPadOS or iOS, and the system sizes your app’s window to fit an iPad whenever possible.
When building your app’s interface, make choices that ensure your app runs well in visionOS too. Adopt the following best practices for your interface-related code:
Support iPad and iPhone in the same app. Create one app that supports both device types, rather than separate apps for each device. SwiftUI and UIKit support adaptable interfaces, and Xcode provides tools to help you visualize your interface at different supported sizes.
Organize your interface using scenes. Scenes are a fundamental tool for managing your app’s interface. Use the scene types in SwiftUI and UIKit to assemble and manage the views you display in windows.
Adapt your interface to any size. Design your interface to adapt naturally to different sizes. For an introduction to SwiftUI views and layout, see Declaring a custom view. For information about laying out views in UIKit, see View layout.
Don’t access screen details. visionOS provides reasonable values for UIScreen objects, but don’t use those values to make decisions.
Specify the supported interface orientations. Add the UISupportedInterfaceOrientations key to your app’s Info.plist file to specify the interface orientations it supports. Support all interface orientations whenever possible. visionOS adds an interface rotation for your app button only when this key is present.
Update hover effects in custom views. Hover effects convey the focused view or control in your interface. Standard system views apply hover effects as needed. For custom views and controls, verify that the hover effects look appropriate in visionOS. Add or update the content shape for your hover effects if needed.
Adopt vector-based images when possible. Vector-based images scale well to different sizes while retaining a crisp appearance. If you use bitmap-based assets, make them the exact size you need. Don’t use oversized assets, which require extra work to display at the correct size.
If you want visionOS to display your app’s interface in a particular orientation at launch, add the UIPreferredDefaultInterfaceOrientation key to your app’s Info.plist file. Set the value of the key to one of the values in your app’s UISupportedInterfaceOrientations key. For example, to specify a preference for a portrait orientation, set the value to UIInterfaceOrientationPortrait. Add ~ipad or ~iphone to the key name to specify device-specific orientation preferences.
Respond gracefully to missing features
If your app relies on frameworks that behave differently in visionOS, update your code to handle those differences. Availability checks give you a clear indication when you can’t use a feature, but some frameworks might have more subtle behavior. Throughout your code, make sure you respond to unusual situations:
Handle error conditions. If a function throws an exception or returns an error, handle the error. Use error information to adjust your app’s behavior or provide an explanation of why it can’t perform certain operations.
Handle nil or empty values gracefully. Validate objects and return values before you try to use them.
Update your interface. Provide appropriate messaging in your interface when a feature is missing, or remove feature-specific views entirely if you can do so cleanly. Don’t leave empty views where the feature was.
For information about frameworks that behave differently in visionOS, see Checking whether your existing app is compatible with visionOS.
Remove code that uses deprecated APIs
If your app currently uses deprecated APIs or frameworks, update your code to use appropriate replacements. Deprecated symbols represent outdated features, and in some cases might not do anything when you call them. To prevent potential issues, replace them with modern equivalents to ensure your code behaves as expected.
The following frameworks are deprecated in their entirety in iPadOS, iOS, and visionOS. If your app still uses these frameworks, move off of them immediately. The reference documentation for each framework includes information about how to update your code.
Accounts
Address Book
Address Book UI
Assets Library
iAd
Newsstand Kit
NotificationCenter
OpenGL ES
See Also
iOS migration and compatibility
Bringing your existing apps to visionOS
Build a version of your iPadOS or iOS app using the visionOS SDK, and update your code for platform differences.
Bringing your ARKit app to visionOS
Update an iPadOS or iOS app that uses ARKit, and provide an equivalent experience in visionOS.
Checking whether your existing app is compatible with visionOS
Determine whether your existing iOS or iPadOS app runs as is in visionOS or requires modifications to handle platform differences.
Current page is Making your existing app compatible with visionOS
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

