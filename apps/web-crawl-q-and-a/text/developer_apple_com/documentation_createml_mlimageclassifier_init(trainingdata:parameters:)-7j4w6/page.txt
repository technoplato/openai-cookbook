https://developer.apple.com/documentation/createml/mlimageclassifier/init(trainingdata:parameters:)-7j4w6

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Supporting Types
P
var playgroundDescription: Any
P
var debugDescription: String
P
var description: String
Describing an Image Classifier
P
let modelParameters: MLImageClassifier.ModelParameters
P
var model: MLModel
M
init(trainingData: MLImageClassifier.DataSource, parameters: MLImageClassifier.ModelParameters) throws
Training an Image Classifier Synchronously
M
init(checkpoint: MLCheckpoint) throws
Creating an Image Classifier from a Checkpoint
M
static func restoreTrainingSession(sessionParameters: MLTrainingSessionParameters) throws -> MLTrainingSession<MLImageClassifier>
M
static func resume(MLTrainingSession<MLImageClassifier>) throws -> MLJob<MLImageClassifier>
M
static func train(trainingData: MLImageClassifier.DataSource, parameters: MLImageClassifier.ModelParameters, sessionParameters: MLTrainingSessionParameters) throws -> MLJob<MLImageClassifier>
Training an Image Classifier Asynchronously
Documentation
Open Menu
Swift
Initializer
init(trainingData:parameters:)
Creates an image classifier with a training dataset represented by a dictionary.
iOS 15.0–16.0 Deprecated
iPadOS 15.0–16.0 Deprecated
macOS 10.14–11.0 Deprecated
Mac Catalyst 15.0–16.0 Deprecated
visionOS 1.0+ Beta
init(
    trainingData: [String : [URL]],
    parameters: MLImageClassifier.ModelParameters = ModelParameters(validationData: nil)
) throws
Parameters
trainingData
A set of labeled images the task uses to train the image classifier model, contained in a dictionary whose keys are the image labels. Each dictionary value is an array of URLs to images.
parameters
An MLImageClassifier.ModelParameters instance you use to configure the model for the training session.
Discussion
When you create an MLImageClassifier instance, initialize it with an MLImageClassifier.ModelParameters structure. This allows you to configure the image classifier training process. For example, you can explicitly define the validation dataset instead of allowing the model to choose a random selection of your training data. Alternatively, as shown in the following example, set validationData to nil to allow the classifier to choose the validation data for you from among your training data. This lets you set other parameters—like maximum iterations and augmentation options—to values other than the default:
let parameters = MLImageClassifier.ModelParameters(
    featureExtractor: .scenePrint(revision: 1),
    validationData: nil,
    maxIterations: 20,
    augmentationOptions: [.crop]
)
For this particular initialization method—there’s another with the same signature but a different training data type—represent your training data with a dictionary that uses labels as keys. The corresponding values are arrays of URLs that indicate the images associated with that label. In this example, if you have elephant and giraffe images stored in a directory called Training within your Downloads directory, you can construct a dictionary with the URL of each image:
// Get the URL of the directory that holds the validation data.
guard let downloadsURL = FileManager.default.urls(for: .downloadsDirectory, in: .userDomainMask).first
else { fatalError("Can't find Downloads directory") }
let url = downloadsURL.appendingPathComponent("Training")


// For a real classifier, use at least 10 images per label. More is better.
let trainingData = [
    "Elephant": [
        url.appendingPathComponent("Elephant.1.jpg"),
        url.appendingPathComponent("Elephant.2.jpg")
    ],
    "Giraffe": [
        url.appendingPathComponent("Giraffe.1.jpg"),
        url.appendingPathComponent("Giraffe.2.jpg")
    ]
]
Note
If you have training data in an MLImageClassifier.DataSource instance, use the similarly named init(trainingData:parameters:) instead. That initialization method takes a data source instead of a dictionary as its training data.
Use the parameter structure and training data to initialize the classifier. Training begins immediately.
let classifier = try MLImageClassifier(trainingData: trainingData, parameters: parameters)
See Also
Training an Image Classifier Synchronously
init(trainingData: MLImageClassifier.DataSource, parameters: MLImageClassifier.ModelParameters) throws
Creates an image classifier with a training dataset represented by a data source.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(trainingData:parameters:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

