https://developer.apple.com/documentation/createml/mlphase

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Equatable Implementations
Default Implementations
static func != (Self, Self) -> Bool
Comparing Phases
P
var hashValue: Int
M
func hash(into: inout Hasher)
Providing a Phase’s Hash Value
P
var phase: MLPhase
Checking a Training Session’s Progress
C
MLTrainingSession
C
MLJob
Model Training Control
S
MLObjectDetectorMetrics
S
MLRecommenderMetrics
S
MLWordTaggerMetrics
Documentation
Open Menu
Swift
Enumeration
MLPhase
The possible states of a training session.
iOS 15.0+
iPadOS 15.0+
macOS 11.0+
Mac Catalyst 15.0+
tvOS 16.0+
visionOS 1.0+ Beta
enum MLPhase
Topics
Retrieving Session Phases
case initialized
The training session is in the initial idle state before extracting features and training.
case extractingFeatures
The training session is extracting features from the training dataset.
case training
The training session is training a model from the features it extracted from the training dataset.
case evaluating
The training session is evaluating the model it trained.
case inferencing
The training session is using the model to make a prediction.
Creating a Phase from a String
init?(rawValue: String)
Creates a new instance with the specified raw value.
Getting a Phase’s String Value
var rawValue: String
The corresponding value of the raw type.
typealias RawValue
The raw type that can be used to represent all values of the conforming type.
Encoding and Decoding a Phase
func encode(to: Encoder) throws
Encodes this value into the given encoder, when the type’s RawValue is String.
Available when Self conforms to Encodable and RawValue is String.
init(from: Decoder) throws
Creates a new instance by decoding from the given decoder, when the type’s RawValue is String.
Available when Self conforms to Decodable and RawValue is String.
Providing a Phase’s Hash Value
func hash(into: inout Hasher)
Available when Self conforms to Hashable and RawValue conforms to Hashable.
var hashValue: Int
Available when Self conforms to Hashable and RawValue conforms to Hashable.
Comparing Phases
static func != (Self, Self) -> Bool
Default Implementations
API Reference
Equatable Implementations
API Reference
RawRepresentable Implementations
Relationships
Conforms To
Decodable
Encodable
Equatable
Hashable
RawRepresentable
Sendable
See Also
Checking a Training Session’s Progress
var phase: MLPhase
The training session’s current state.
var iteration: Int
The iteration number of a training session’s phase.
var checkpoints: [MLCheckpoint]
An array of checkpoints the training session has created so far.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLPhase
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

