https://developer.apple.com/documentation/realitykit/physicallybasedmaterial/emissivecolor-swift.struct/init(color:texture:)-5hl9iSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
P
var triangleFillMode: PhysicallyBasedMaterial.TriangleFillMode
Instance Properties
T
PhysicallyBasedMaterial.Texture
T
PhysicallyBasedMaterial.Parameters
Defining Material Parameter Types
T
PhysicallyBasedMaterial.FaceCulling
E
MaterialParameterTypes.FaceCulling
M
init(color: UIColor, texture: MaterialParameters.Texture?)
Creating an Emissive Color Object
S
PhysicallyBasedMaterial.EmissiveColor
P
var emissiveColor: PhysicallyBasedMaterial.EmissiveColor
P
var emissiveIntensity: Float
Adding Light Emission
S
PhysicallyBasedMaterial.AnisotropyAngle
P
var anisotropyAngle: PhysicallyBasedMaterial.AnisotropyAngle
Documentation
Open Menu
Swift
Initializer
init(color:texture:)
Creates a color of emitted light in iOS.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
visionOS 1.0+ Beta
init(
    color: NSColor = .black,
    texture: MaterialParameters.Texture? = nil
)
Parameters
color
The color of the emitted light. Defaults to black.
texture
An optional UV-mapped image texture.
Discussion
This initializer creates an object from a color, an image texture, or from both. The color property defaults to black, which results in no light emissions. With custom materials, color and texture are available as inputs in your surface shader, but your surface shader must call params.surface().set_emissive_color(), otherwise RealityKit renders no light emission.
The following Metal code demonstrates how to replicate the emissive behavior of PhysicallyBasedMaterial in your surface shader code:
    // Retrieve the emissive color tint from the CustomMaterial.
    half3 emissiveColorTint = (half3)params.material_constants()
                              .emissive_color_tint();


    // Retrieve the primary texture coordinates.
    float2 uv = params.geometry().uv0();


    // Flip the UV coordinate’s y-axis. You only need to do this
    // for models you load from USDZ or .reality files.
    uv.y = 1.0 - uv.y;


    auto tex = params.textures();
    half3 color = (half3)tex.emissive_color()
                  .sample(textureSampler, uv).rgb;


    // Multiply the tint and the sampled value from the texture,
    // and assign the result to the shader's emissive color
    // property.
    color *= emissiveColorTint;
    params.surface().set_emissive_color(color);
Note
Unlike PhysicallyBasedMaterial, CustomMaterial has no emissiveIntensity value. If you need to pass an emissive intensity value to your surface shader, use the custom property or another unused attribute property.
See Also
Creating an Emissive Color Object
init(color: UIColor, texture: MaterialParameters.Texture?)
Creates a color of emitted light in iOS.
init(CustomMaterial.EmissiveColor)
Creates a color of emitted light from a custom material’s emissive color property.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(color:texture:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

