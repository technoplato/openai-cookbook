https://developer.apple.com/documentation/swiftdata/fetchdescriptor

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func insert<T>(T)
P
var insertedObjectsArray: [PersistentModel]
Inserting models
M
func registeredModel<T>(for: PersistentIdentifier) -> T?
M
func object(with: PersistentIdentifier) -> PersistentModel
M
func enumerate<T>(FetchDescriptor<T>, batchSize: Int, allowEscapingMutations: Bool?, block: (T) throws -> Void) throws
S
FetchResultsCollection
M
func fetchCount<T>(FetchDescriptor<T>) throws -> Int
M
func fetch<T>(FetchDescriptor<T>) throws -> [T]
Fetching models
C
ModelContainer
M
init(ModelContainer)
Creating a model context
C
ModelContext
C
ModelContainer
Documentation
Open Menu
Swift
Structure
FetchDescriptor
A type that describes the criteria, sort order, and any additional configuration to use when performing a fetch.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
Swift 5.9+
struct FetchDescriptor<T> where T : PersistentModel
Topics
Creating a fetch descriptor
init(predicate: Predicate<T>?, sortBy: [SortDescriptor<T>])
struct Predicate
A logical condition used to test a set of input values for searching or filtering.
struct SortDescriptor
A serializable description of how to sort numerics and strings.
Constraining the fetch
var predicate: Predicate<T>?
var sortBy: [SortDescriptor<T>]
var fetchLimit: Int?
var fetchOffset: Int?
var includePendingChanges: Bool
Specifying the fetched attributes
var relationshipKeyPathsForPrefetching: [PartialKeyPath<T>]
var propertiesToFetch: [PartialKeyPath<T>]
See Also
Model fetch
struct Query
A property wrapper that fetches a set of models and keeps those models in sync with the underlying data.
Beta
macro Query()
Beta
macro Query<Element>(FetchDescriptor<Element>, animation: Animation)
Beta
macro Query<Element>(FetchDescriptor<Element>, transaction: Transaction?)
Beta
macro Query(animation: Animation)
Beta
macro Query<Element>(filter: Predicate<Element>?, sort: [SortDescriptor<Element>], animation: Animation)
Beta
macro Query<Value, Element>(filter: Predicate<Element>?, sort: KeyPath<Element, Value>, order: SortOrder, transaction: Transaction?)
Beta
macro Query<Value, Element>(filter: Predicate<Element>?, sort: KeyPath<Element, Value?>, order: SortOrder, transaction: Transaction?)
Beta
macro Query<Element>(filter: Predicate<Element>?, sort: [SortDescriptor<Element>], transaction: Transaction?)
Beta
macro Query(transaction: Transaction)
Beta
struct FetchResultsCollection
A collection that efficiently provides the results of a completed fetch.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is FetchDescriptor
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

