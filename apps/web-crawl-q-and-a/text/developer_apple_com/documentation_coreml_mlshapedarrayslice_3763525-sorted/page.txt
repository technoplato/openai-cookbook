https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763525-sorted

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
C
MLDictionaryFeatureProvider
r
P
MLFeatureProvider
C
MLSequence
C
MLMultiArray
r
P
MLShapedArrayRangeExpression
r
P
MLShapedArrayScalar
M
func formatted<S>(S) -> S.FormatOutput
func split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]
func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]
func split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]
func flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]
func flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]
func compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]
func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
func sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
M
func sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]
M
func sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]
M
func shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]
M
func shuffled() -> [MLShapedArraySlice<Scalar>]
M
func reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>
M
func trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
M
func trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>
M
func trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)
Documentation
Open Menu
Swift
Instance Method
sorted(by:)
Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
Xcode 13.0+
func sorted(by areInIncreasingOrder: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) throws -> Bool) rethrows -> [MLShapedArraySlice<Scalar>]
Parameters
areInIncreasingOrder
A predicate that returns true if its first argument should be ordered before its second argument; otherwise, false.
Return Value
A sorted array of the sequence’s elements.
Discussion
When you want to sort a sequence of elements that don’t conform to the Comparable protocol, pass a predicate to this method that returns true when the first element should be ordered before the second. The elements of the resulting array are ordered according to the given predicate.
In the following example, the predicate provides an ordering for an array of a custom HTTPResponse type. The predicate orders errors before successes and sorts the error responses by their error code.
enum HTTPResponse {
    case ok
    case error(Int)
}


let responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]
let sortedResponses = responses.sorted {
    switch ($0, $1) {
    // Order errors by code
    case let (.error(aCode), .error(bCode)):
        return aCode < bCode


    // All successes are equivalent, so none is before any other
    case (.ok, .ok): return false


    // Order errors before successes
    case (.error, .ok): return true
    case (.ok, .error): return false
    }
}
print(sortedResponses)
// Prints "[.error(403), .error(404), .error(500), .ok, .ok]"
You also use this method to sort elements that conform to the Comparable protocol in descending order. To sort your sequence in descending order, pass the greater-than operator (>) as the areInIncreasingOrder parameter.
let students: Set = ["Kofi", "Abena", "Peter", "Kweku", "Akosua"]
let descendingStudents = students.sorted(by: >)
print(descendingStudents)
// Prints "["Peter", "Kweku", "Kofi", "Akosua", "Abena"]"
Calling the related sorted() method is equivalent to calling this method and passing the less-than operator (<) as the predicate.
print(students.sorted())
// Prints "["Abena", "Akosua", "Kofi", "Kweku", "Peter"]"
print(students.sorted(by: <))
// Prints "["Abena", "Akosua", "Kofi", "Kweku", "Peter"]"
The predicate must be a strict weak ordering over the elements. That is, for any elements a, b, and c, the following conditions must hold:
areInIncreasingOrder(a, a) is always false. (Irreflexivity)
If areInIncreasingOrder(a, b) and areInIncreasingOrder(b, c) are both true, then areInIncreasingOrder(a, c) is also true. (Transitive comparability)
Two elements are incomparable if neither is ordered before the other according to the predicate. If a and b are incomparable, and b and c are incomparable, then a and c are also incomparable. (Transitive incomparability)
The sorting algorithm is guaranteed to be stable. A stable sort preserves the relative order of elements for which areInIncreasingOrder does not establish an order.
Complexity: O(n log n), where n is the length of the sequence.
See Also
Generating a Shaped Array Slice
func first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the first element of the sequence that satisfies the given predicate.
func last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the last element of the sequence that satisfies the given predicate.
func dropFirst(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence containing all but the given number of initial elements.
func dropLast(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence containing all but the specified number of final elements.
func drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.
func joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>
Returns the elements of this sequence of sequences, concatenated.
func joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>
Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.
func min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the minimum element in the sequence, using the given predicate as the comparison between elements.
func max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the maximum element in the sequence, using the given predicate as the comparison between elements.
func prefix(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.
func prefix(upTo: Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence from the start of the collection up to, but not including, the specified position.
func prefix(through: Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence from the start of the collection through the specified position.
func prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.
func suffix(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence, up to the given maximum length, containing the final elements of the collection.
func suffix(from: Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence from the specified position to the end of the collection.
func trimPrefix<Prefix>(Prefix)
Removes the initial elements that satisfy the given predicate from the start of the sequence.
func trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)
Trims the array slice using a predicate.
func trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>
Returns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.
func trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
func reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>
Returns a view presenting the elements of the collection in reverse order.
func shuffled() -> [MLShapedArraySlice<Scalar>]
Returns the elements of the sequence, shuffled.
func shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]
Returns the elements of the sequence, shuffled using the given generator as a source for randomness.
func sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]
Generates a copy of the shaped array slice by sorting its slices with a comparator.
func sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]
Generates a copy of the shaped array slice by sorting its slices with a sequence of comparators.
func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is sorted(by:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

