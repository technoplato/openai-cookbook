https://developer.apple.com/documentation/realitykit/realityview/layoutvalue(key:value:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func luminanceToAlpha() -> some View
M
func listStyle<S>(S) -> some View
M
func listSectionSpacing(CGFloat) -> some View
M
func listSectionSpacing(ListSectionSpacing) -> some View
M
func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View
M
func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View
M
func listRowSpacing(CGFloat?) -> some View
M
func layoutPriority(Double) -> some View
M
func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View
M
func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View
M
func labelsHidden() -> some View
M
func labeledContentStyle<S>(S) -> some View
M
func labelStyle<S>(S) -> some View
M
func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View
M
func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View
Documentation
Open Menu
Swift
Instance Method
layoutValue(key:value:)
Associates a value with a custom layout property.
RealityKit
SwiftUI
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
tvOS 16.0+
watchOS 9.0+
visionOS 1.0+ Beta
func layoutValue<K>(
    key: K.Type,
    value: K.Value
) -> some View where K : LayoutValueKey
Parameters
key
The type of the key that you want to set a value for. Create the key as a type that conforms to the LayoutValueKey protocol.
value
The value to assign to the key for this view. The value must be of the type that you establish for the key’s associated value when you implement the key’s LayoutValueKey/defaultValue property.
Return Value
A view that has the specified value for the specified key.
Discussion
Use this method to set a value for a custom property that you define with LayoutValueKey. For example, if you define a Flexibility key, you can set the key on a Text view using the key’s type and a value:
Text("Another View")
    .layoutValue(key: Flexibility.self, value: 3)
For convenience, you might define a method that does this in an extension to View:
extension View {
    func layoutFlexibility(_ value: CGFloat?) -> some View {
        layoutValue(key: Flexibility.self, value: value)
    }
}
This method makes the call site easier to read:
Text("Another View")
    .layoutFlexibility(3)
If you perform layout operations in a type that conforms to the Layout protocol, you can read the key’s associated value for each subview of your custom layout type. Do this by indexing the subview’s proxy with the key. For more information, see LayoutValueKey.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is layoutValue(key:value:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

