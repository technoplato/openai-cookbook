https://developer.apple.com/documentation/realitykit/scene/publisher/flatmap(maxpublishers:_:)-9f9ieSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>
M
func ignoreOutput() -> Publishers.IgnoreOutput<Self>
M
func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>
M
func collect(Int) -> Publishers.CollectByCount<Self>
M
func collect() -> Publishers.Collect<Self>
Reducing Elements
M
func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>
func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>
func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>
M
func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>
M
func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>
Mapping Elements
M
func subscribe<S>(S) -> AnyCancellable
M
func subscribe<S>(S)
M
func receive<S>(subscriber: S)
Working with Subscribers
T
Scene.Publisher.Failure
Documentation
Open Menu
Swift
Instance Method
flatMap(maxPublishers:_:)
Transforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func flatMap<T, P>(
    maxPublishers: Subscribers.Demand = .unlimited,
    _ transform: @escaping (Self.Output) -> P
) -> Publishers.FlatMap<P, Self> where T == P.Output, P : Publisher, Self.Failure == P.Failure
Parameters
maxPublishers
Specifies the maximum number of concurrent publisher subscriptions, or Combine/Subscribers/Demand/unlimited if unspecified.
transform
A closure that takes an element as a parameter and returns a publisher that produces elements of that type.
Return Value
A publisher that transforms elements from an upstream publisher into a publisher of that element’s type.
Discussion
Combine‘s flatMap(maxPublishers:_:) operator performs a similar function to the doc://com.apple.documentation/documentation/Swift/Sequence/2905332-flatmap operator in the Swift standard library, but turns the elements from one kind of publisher into a new publisher that is sent to subscribers. Use flatMap(maxPublishers:_:) when you want to create a new series of events for downstream subscribers based on the received value. The closure creates the new Scene.Publisher based on the received value. The new Scene.Publisher can emit more than one event, and successful completion of the new Scene.Publisher does not complete the overall stream. Failure of the new Scene.Publisher causes the overall stream to fail.
In the example below, a PassthroughSubject publishes WeatherStation elements. The flatMap(maxPublishers:_:) receives each element, creates a URL from it, and produces a new URLSession.DataTaskPublisher, which will publish the data loaded from that URL.
public struct WeatherStation {
    public let stationID: String
}


var weatherPublisher = PassthroughSubject<WeatherStation, URLError>()


cancellable = weatherPublisher.flatMap { station -> URLSession.DataTaskPublisher in
    let url = URL(string:"https://weatherapi.example.com/stations/\(station.stationID)/observations/latest")!
    return URLSession.shared.dataTaskPublisher(for: url)
}
.sink(
    receiveCompletion: { completion in
        // Handle publisher completion (normal or error).
    },
    receiveValue: {
        // Process the received data.
    }
 )


weatherPublisher.send(WeatherStation(stationID: "KSFO")) // San Francisco, CA
weatherPublisher.send(WeatherStation(stationID: "EGLC")) // London, UK
weatherPublisher.send(WeatherStation(stationID: "ZBBB")) // Beijing, CN
See Also
Mapping Elements
func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>
Transforms all elements from the upstream publisher with a provided closure.
func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>
Transforms all elements from the upstream publisher with a provided error-throwing closure.
func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>
Converts any failure from the upstream publisher into a new error.
func replaceNil<T>(with: T) -> Publishers.Map<Self, T>
Replaces nil elements in the stream with the provided element.
func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>
Transforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.
func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>
Transforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.
func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>
Changes the failure type declared by the upstream publisher.
Available when Failure is Never.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is flatMap(maxPublishers:_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

