https://developer.apple.com/documentation/createml/mlgazetteer

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
CustomStringConvertible Implementations
CustomPlaygroundDisplayConvertible Implementations
CustomDebugStringConvertible Implementations
Default Implementations
P
var playgroundDescription: Any
P
var debugDescription: String
P
var description: String
init(labeledData: MLDataTable, textColumn: String, labelColumn: String, parameters: MLGazetteer.ModelParameters) throws
S
MLWordTagger
S
MLTextClassifier
Creating a text classifier model
Text Models
S
MLStyleTransfer
S
MLHandActionClassifier
S
MLActionClassifier
Detecting Human Actions in a Live Video Feed
Documentation
Open Menu
Swift
Structure
MLGazetteer
A collection of terms and their labels, which augments a tagger that analyzes natural language text.
macOS 10.15+
visionOS 1.0+ Beta
struct MLGazetteer
Overview
Use an MLGazetteer to configure a gazetteer and save it to a file, which you then add to your app in Xcode. Your app uses the gazetteer file at runtime to create an instance of NLGazetteer, which augments an NLTagger to tag specific terms with a label.
You configure a gazetteer with a dictionary, keyed by labels. Each value in the dictionary is an array of terms (words or phrases) for each label. For example, you can store the names of real and fictional planets in a gazetteer.
let planets = [
    "real planet": ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"],
    "fictional planet" : ["Arrakis", "Hoth", "Vulcan", "Pandora", "Tatooine", "Bajor", "Alderaan", "Romulus"]
]


let parameters = MLGazetteer.ModelParameters(language: .english)
let planetGazetteer = try! MLGazetteer(dictionary: planets, parameters: parameters)
Once you’ve configured an MLGazetteer, save it to an .mlmodel file to include in your app.
try planetGazetteer.write(toFile: "~/Desktop/PlanetGazetteer.mlmodel")
A gazetteer file can efficiently store many labels, and many terms for each label.
Topics
Creating a Gazetteer
init(dictionary: [String : [String]], parameters: MLGazetteer.ModelParameters) throws
Creates a gazetteer from a dictionary of labels and terms.
init(labeledData: MLDataTable, textColumn: String, labelColumn: String, parameters: MLGazetteer.ModelParameters) throws
Creates a gazetteer from a table of labels and terms.
struct ModelParameters
The model configuration parameters.
let modelParameters: MLGazetteer.ModelParameters
The model configuration parameters.
Testing a Gazetteer
func prediction(from: String) throws -> String
Predicts the label for the given term.
func predictions(from: [String]) throws -> [String]
Predicts the labels for the given terms.
func predictions(from: MLDataColumn<String>) throws -> MLDataColumn<String>
Predicts the labels for the given terms in the table column.
Saving a Gazetteer
func write(to: URL, metadata: MLModelMetadata?) throws
Exports the gazetteer as a Core ML model file at the specified URL.
func write(toFile: String, metadata: MLModelMetadata?) throws
Exports the gazetteer as a Core ML model file at the specified file path.
Describing a Gazetteer
var model: MLModel
The gazetteer contained within a Core ML model file stored in memory.
var description: String
A text representation of the gazetteer.
var debugDescription: String
A text representation of the gazetteer that’s suitable for output during debugging.
var playgroundDescription: Any
A description of the gazetteer shown in a playground.
Default Implementations
API Reference
CustomDebugStringConvertible Implementations
API Reference
CustomPlaygroundDisplayConvertible Implementations
API Reference
CustomStringConvertible Implementations
Relationships
Conforms To
CustomDebugStringConvertible
CustomPlaygroundDisplayConvertible
CustomStringConvertible
Sendable
See Also
Text Models
Creating a text classifier model
Train a machine learning model to classify natural language text.
struct MLTextClassifier
A model you train to classify natural language text.
struct MLWordTagger
A word-tagging model you train to classify natural language text at the word level.
struct MLWordEmbedding
A map of strings in a vector space that enable your app to find similar strings by looking at a string’s neighbors.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLGazetteer
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

