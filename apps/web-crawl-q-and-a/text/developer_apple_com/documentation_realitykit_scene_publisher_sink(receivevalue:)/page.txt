https://developer.apple.com/documentation/realitykit/scene/publisher/sink(receivevalue:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Instance Methods
P
var timebase: CMTimebase
Beta
Instance Properties
P
var hashValue: Int
M
func hash(into: inout Hasher)
static func != (Self, Self) -> Bool
static func == (Scene, Scene) -> Bool
func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>
func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>
M
func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable
M
func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable
Connecting Simple Subscribers
M
func makeConnectable() -> Publishers.MakeConnectable<Self>
Adding Explicit Connectability
M
func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>
M
func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>
Specifying Schedulers
Documentation
Open Menu
Swift
Instance Method
sink(receiveValue:)
Attaches a subscriber with closure-based behavior to a publisher that never fails.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func sink(receiveValue: @escaping ((Self.Output) -> Void)) -> AnyCancellable
Available when Failure is Never.
Parameters
receiveValue
The closure to execute on receipt of a value.
Return Value
A cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.
Discussion
Use sink(receiveValue:) to observe values received by the publisher and print them to the console. This operator can only be used when the stream doesn’t fail, that is, when the publisher’s Scene.Publisher.Failure type is Never.
In this example, a Range publisher publishes integers to a sink(receiveValue:) operator’s receiveValue closure that prints them to the console:
let integers = (0...3)
integers.publisher
    .sink { print("Received \($0)") }


// Prints:
//  Received 0
//  Received 1
//  Received 2
//  Received 3
This method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.
See Also
Connecting Simple Subscribers
func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable
Assigns each element from a publisher to a property on an object.
Available when Failure is Never.
func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable
Attaches a subscriber with closure-based behavior.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is sink(receiveValue:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

