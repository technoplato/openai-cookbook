https://developer.apple.com/documentation/coreml/mlshapedarrayslice/3763493-randomelement

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool
M
func formIndex(inout Int, offsetBy: Int)
M
func formIndex(after: inout Int)
M
func formIndex(before: inout Int)
M
func index(of: MLShapedArraySlice<Scalar>) -> Int?
Deprecated
M
func index(Int, offsetBy: Int, limitedBy: Int) -> Int?
M
func index(Int, offsetBy: Int) -> Int
func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool
func starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool
func elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool
func difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>
func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?
M
func enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>
M
func forEach((MLShapedArraySlice<Scalar>) -> Void)
M
func makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>
subscript<R>(R) -> MLShapedArraySlice<Scalar>
M
func contains<C>(C) -> Bool
M
func contains(MLShapedArraySlice<Scalar>) -> Bool
M
func contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool
M
func allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool
Documentation
Open Menu
Swift
Instance Method
randomElement()
Returns a random element of the collection.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
Xcode 13.0+
func randomElement() -> MLShapedArraySlice<Scalar>?
Return Value
A random element from the collection. If the collection is empty, the method returns nil.
Discussion
Call randomElement() to select a random element from an array or another collection. This example picks a name at random from an array:
let names = ["Zoey", "Chloe", "Amani", "Amaia"]
let randomName = names.randomElement()!
// randomName == "Amani"
This method is equivalent to calling randomElement(using:), passing in the system’s default random generator.
Complexity: O(1) if the collection conforms to RandomAccessCollection; otherwise, O(n), where n is the length of the collection.
See Also
Inspecting a Slice of a Shaped Array Slice
func allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool
Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.
func contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool
Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.
func contains(MLShapedArraySlice<Scalar>) -> Bool
Returns a Boolean value indicating whether the sequence contains the given element.
func contains<C>(C) -> Bool
Returns a Boolean value indicating whether the collection contains the given sequence.
subscript<R>(R) -> MLShapedArraySlice<Scalar>
Accesses the contiguous subrange of the collection’s elements specified by a range expression.
func makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>
Returns an iterator over the elements of the collection.
func forEach((MLShapedArraySlice<Scalar>) -> Void)
Calls the given closure on each element in the sequence in the same order as a for-in loop.
func enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>
Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.
func randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?
Returns a random element of the collection, using the given generator as a source for randomness.
func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?
Executes a closure on the sequence’s contiguous storage.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is randomElement()
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

