https://developer.apple.com/documentation/realitykit/taking-control-of-scene-anchoringSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Adding Procedural Assets to a Scene
Manipulating Reality Composer Scenes from Code
Arranging Elements in a Scene
Configuring Elements in a Scene
Adding Elements to a 3D Scene
Loading Reality Composer Files Manually Without Generated Code
Loading Reality Composer Files Using Generated Code
Selecting an Anchor for a Reality Composer Scene
Scene Anchors
Creating 3D Content with Reality Composer
Scene Creation
Reality Composer
Designing RealityKit content with Reality Composer Pro
Diorama
Asset creation
Documentation
Open Menu
Swift
Article
Taking Control of Scene Anchoring
Create a more interactive user experience by choosing exactly where to anchor Reality Composer scenes.
Overview
You might sometimes want to take direct control over anchoring in a Reality Composer scene. If, for example, multiple surfaces or objects in your scene are appropriate as anchors, you could let the user choose where to anchor the scene. Alternatively, you could create an algorithm that determines which of the available anchors to use, such as selecting the anchor closest to the center of the screen or the anchor that’s closest to the user. To allow for direct control over anchoring in a scene, you load it without anchoring information and then anchor it manually.
Load the Scene Without Anchoring Information
Use one of these options:
For synchronous loading, use load(contentsOf:withName:) instead of loadAnchor(contentsOf:withName:).
For asynchronous loading, use loadAsync(contentsOf:withName:) instead of loadAnchorAsync(contentsOf:withName:).
This example shows the synchronous loading option:
func loadUnanchoredScene (filename: String,
                          fileExtension: String,
                          sceneName: String) -> (Entity & HasAnchoring)? {
    guard let realitySceneURL = createRealityURL(filename: filename,
                                                 fileExtension: fileExtension,
                                                 sceneName: sceneName) else {
        return nil
    }
    let loadedScene = try? Entity.load(contentsOf: realitySceneURL)


    return loadedScene
}
Anchor the Scene Manually
When you load scenes without anchoring information, you can’t add them directly to a scene’s anchors. Instead, manually create a new AnchorEntity at the desired location, add your loaded scene as a child of the AnchorEntity, and then add the scene to the ARView scene anchors. For example, if you want to place your scene where the user taps, you can use raycast(from:allowing:alignment:) to look for a suitable surface, and then place it on the tapped surface if one exists.
@discardableResult
func addUnanchoredEntityWhereTapped(_ entity: Entity, 
                                    _ touchPoint:CGPoint)  -> Bool {
    let results = arView.raycast(from: touchPoint, 
                                 allowing: .estimatedPlane, 
                                 alignment: .horizontal)
        if let result = results.first {
            let anchorEntity = AnchorEntity(world: result.worldTransform)
            anchorEntity.addChild(entity)
            arView.scene.addAnchor(anchorEntity)      
            return true
        }
    return false
}
See Also
Scene Anchors
Selecting an Anchor for a Reality Composer Scene
Decide which anchor is right for your scenes.
Current page is Taking Control of Scene Anchoring
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

