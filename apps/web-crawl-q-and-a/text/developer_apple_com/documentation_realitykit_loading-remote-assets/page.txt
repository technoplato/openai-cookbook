https://developer.apple.com/documentation/realitykit/loading-remote-assetsSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Simulation
S
CustomMaterial
Modifying RealityKit Rendering Using Custom Materials
Custom Materials and Shader Functions
S
NetworkSendSystem
Beta
S
NetworkReceiveSystem
Beta
C
NetworkCompatibilityToken
C
NetworkCompatibilityToken
C
MultipeerConnectivityService
Multipeer synchronization
r
P
HasSynchronization
S
SynchronizationComponent
r
P
SynchronizationService
Entity synchronization
Content synchronization
Documentation
Open Menu
Swift
Article
Loading remote assets in multiplayer apps
Ensure assets load on all connected peers before using them.
Overview
When a networked RealityKit app relies on assets stored on a remote server or loaded from the device’s file system outside of the app bundle, there are special precautions you must take to ensure RealityKit is able to sync those assets between peers. Because load times on different devices can vary greatly when loading assets such as 3D models, sound files, images, or movies, especially when those assets are stored on a remote server, it’s possible for network errors or other issues to prevent assets from loading on some connected peers. The host app must ensure that all exist on all peers before it attempts to add them to the synchronized RealityKit scene. If any peers are missing a resource, or are still in the process of loading a resource when the host attempts to sync with it, the sync fails and the app errors.
Assign Non-Bundle Assets a Name When Loading
When loading networked assets from a remote server or from the local file system, it’s important to specify a name for the loaded asset. RealityKit uses this name to match up and sync objects on different devices, so the same asset must have the same on all connected peers in order for RealityKit to sync correctly.
When loading assets from the app’s bundle, RealityKit automatically assigns the asset’s name based on its filename, but when loading assets from other locations, you must specify the name manually using Entity/load(named:in:) or loadAsync(named:in:). If your app fails to specify a name, or uses different names on different devices, RealityKit will see those assets as different entities and won’t attempt to sync them.
Load assets before you need them
One way to ensure that non-bundle assets have been successfully loaded on all peers before attempting to sync them, is to load them well before they are needed. Loading assets during app launch, before the user has a chance to start or join a multipeer session, for example, ensures that all peers load asset before they’re synced. In the case of apps with multiple or very large scenes, this approach may not be feasible, but for many apps, this is the best way to avoid issues caused by a peer’s resource load issues.
Communicate Load Status
If you’re not able to load all assets ahead of time, one way to ensure that all peers have finished loading assets is to broadcast a message using send(_:toPeers:with:) when each peer is done loading. The host app can then keep track of which peers have sent that message and only add the resources to the ARView once all peers have notified it that they have finished loading. You can also have your app broadcast a different message when a peer is unable to load a particular asset. If a peer is unable to load an asset, the host can choose to send that peer a copy of the resourc or to disconnect that peer.
Here’s a simple example of sending a sync message to connected peers:
enum SyncMessage: String {
    case beganAssetLoad
    case assetLoadFinishedSuccessfully
    case asetLoadFailed
}


private func notifyPeers(message: SyncMessage) {
    do {
        let messageData = Data(message.rawValue.utf8)
        let messageJSON = try JSONEncoder().encode(messageData)
        try session.send(messageJSON, toPeers: myPeers, with: .reliable)
    } catch {
        // Handle error here.
    }
}
For more information on sending data between connected peers, see Creating a Collaborative Session.
Send Missing Resources to Peers
Because a non-bundle resource load can fail for a number of reasons, a networked RealityKit app can implement a mechanism to allow peers to request resources they’re unable to load themselves. If one peer has successfully loaded an asset, it can use sendResource(at:withName:toPeer:withCompletionHandler:) to send it to any other connected peer. Once any missing asset are successfully sent to the peers that need it, the host can safely add those assets to the shared RealityKit scene.
See Also
Related Documentation
static func loadAsync(named: String, in: Bundle?) -> LoadRequest<Entity>
Loads an entity from a file in a bundle asynchronously.
Deprecated
Loading Entities from a File
Retrieve an entity from storage on disk using a synchronous or an asynchronous load operation.
Multipeer synchronization
class MultipeerConnectivityService
A service that provides scene synchronization among all peers in a multipeer connectivity session.
class NetworkCompatibilityToken
An opaque token used to check the networking compatibility between two peers in a multipeer connection.
Current page is Loading remote assets in multiplayer apps
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

