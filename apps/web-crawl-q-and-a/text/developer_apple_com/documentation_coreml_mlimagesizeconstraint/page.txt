https://developer.apple.com/documentation/coreml/mlimagesizeconstraint

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func shapedArrayValue<Scalar>(of: Scalar.Type) -> MLShapedArray<Scalar>?
P
var imageBufferValue: CVPixelBuffer?
P
var stringValue: String
P
var doubleValue: Double
P
var int64Value: Int64
P
var isUndefined: Bool
Accessing the Feature’s Value
P
var sizeConstraint: MLImageSizeConstraint
Inspecting Acceptable Sizes
P
var pixelFormatType: OSType
P
var pixelsHigh: Int
P
var pixelsWide: Int
Accessing the Constraints
C
MLImageConstraint
M
init(imageAt: URL, orientation: CGImagePropertyOrientation, constraint: MLImageConstraint, options: [MLFeatureValue.ImageOption : Any]?)
Documentation
Open Menu
Class
MLImageSizeConstraint
A list or range of sizes that augment an image constraint's default size.
iOS 12.0+
iPadOS 12.0+
macOS 10.14+
Mac Catalyst 13.1+
tvOS 12.0+
watchOS 5.0+
visionOS 1.0+ Beta
class MLImageSizeConstraint : NSObject
Overview
You use an MLImageSizeConstraint to express what image sizes of an image feature a model will accept as input or produce as output.
Use type to determine which properties describe what image sizes the model's image feature expects as input or produces as output.
If type is:
MLImageSizeConstraintType.range, the image feature accepts any image that has a width in pixelsWideRange and a height in pixelsHighRange.
MLImageSizeConstraintType.enumerated, the image feature accepts any image size listed in enumeratedImageSizes.
MLImageSizeConstraintType.unspecified, the MLImageSizeConstraint instance is not configured and should be ignored. Instead, use the image feature's default image size constraint, defined by pixelsWide and pixelsHigh.
Figure 1 An example of an image size that meets a range-based constraint
Topics
Determining Relevant Constraints
var type: MLImageSizeConstraintType
Indicator of which properties to inspect for this image size constraint.
enum MLImageSizeConstraintType
The modes that determine how the model defines a feature's image size constraint.
Accessing the Image Size Ranges
var pixelsWideRange: NSRange
The range of widths a model's image feature accepts as input or produces as output.
var pixelsHighRange: NSRange
The range of heights a model's image feature accepts as input or produces as output.
Accessing the Enumerated Image Sizes
var enumeratedImageSizes: [MLImageSize]
An array of image sizes a model's image feature accepts as input or produces as output.
class MLImageSize
The width and height of an image feature size.
Relationships
Inherits From
NSObject
Conforms To
NSSecureCoding
See Also
Inspecting Acceptable Sizes
var sizeConstraint: MLImageSizeConstraint
Additional sizes this image feature supports.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLImageSizeConstraint
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

