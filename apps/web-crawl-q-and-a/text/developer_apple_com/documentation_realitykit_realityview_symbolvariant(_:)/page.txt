https://developer.apple.com/documentation/realitykit/realityview/symbolvariant(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View
M
func toolbar<Content>(id: String, content: () -> Content) -> some View
M
func toolbar<Content>(content: () -> Content) -> some View
M
func toolbar<Content>(content: () -> Content) -> some View
M
func toolbar(Visibility, for: ToolbarPlacement...) -> some View
M
func toggleStyle<S>(S) -> some View
M
func tint(Color?) -> some View
M
func symbolRenderingMode(SymbolRenderingMode?) -> some View
M
func symbolEffectsRemoved(Bool) -> some View
M
func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View
M
func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View
M
func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View
M
func submitScope(Bool) -> some View
M
func submitLabel(SubmitLabel) -> some View
M
func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View
Documentation
Open Menu
Swift
Instance Method
symbolVariant(_:)
Makes symbols within the view show a particular variant.
RealityKit
SwiftUI
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
func symbolVariant(_ variant: SymbolVariants) -> some View
Parameters
variant
The variant to use for symbols. Use the values in SymbolVariants.
Return Value
A view that applies the specified symbol variant or variants to itself and its child views.
Discussion
When you want all the SF Symbols in a part of your app’s user interface to use the same variant, use the symbolVariant(_:) modifier with a SymbolVariants value, like SymbolVariants/fill-swift.type.property:
VStack(spacing: 20) {
    HStack(spacing: 20) {
        Image(systemName: "person")
        Image(systemName: "folder")
        Image(systemName: "gearshape")
        Image(systemName: "list.bullet")
    }


    HStack(spacing: 20) {
        Image(systemName: "person")
        Image(systemName: "folder")
        Image(systemName: "gearshape")
        Image(systemName: "list.bullet")
    }
    .symbolVariant(.fill) // Shows filled variants, when available.
}
A symbol that doesn’t have the specified variant remains unaffected. In the example above, the list.bullet symbol doesn’t have a filled variant, so the symbolVariant(_:) modifer has no effect.
If you apply the modifier more than once, its effects accumulate. Alternatively, you can apply multiple variants in one call:
Label("Airplane", systemImage: "airplane.circle.fill")


Label("Airplane", systemImage: "airplane")
    .symbolVariant(.circle)
    .symbolVariant(.fill)


Label("Airplane", systemImage: "airplane")
    .symbolVariant(.circle.fill)
All of the labels in the code above produce the same output:
You can apply all these variants in any order, but if you apply more than one shape variant, the one closest to the symbol takes precedence. For example, the following image uses the SymbolVariants/square-swift.type.property shape:
Image(systemName: "arrow.left")
    .symbolVariant(.square) // This shape takes precedence.
    .symbolVariant(.circle)
    .symbolVariant(.fill)
To cause a symbol to ignore the variants currently in the environment, directly set the EnvironmentValues/symbolVariants environment value to SymbolVariants/none using the View/environment(_:_:) modifer.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is symbolVariant(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

