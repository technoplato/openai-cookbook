https://developer.apple.com/documentation/realitykit/custommaterial/roughness-swift.struct/init(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
E
CustomMaterial.Blending
P
var blending: CustomMaterial.Blending
P
var opacityThreshold: Float?
Handling Entity Transparency
S
CustomMaterial.EmissiveColor
P
var emissiveColor: CustomMaterial.EmissiveColor
Adding Light Emission
M
init(scale: Float, texture: CustomMaterial.Texture?)
M
init(floatLiteral: Float)
Creating a Roughness Object
S
CustomMaterial.Roughness
P
var roughness: CustomMaterial.Roughness
Specifying Entity Roughness
S
CustomMaterial.BaseColor
P
var baseColor: CustomMaterial.BaseColor
Documentation
Open Menu
Swift
Initializer
init(_:)
Creates a roughness object from a physically based material’s roughness property.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
visionOS 1.0+ Beta
init(_ value: PhysicallyBasedMaterial.Roughness)
Parameters
value
The physically based material’s roughness property.
Discussion
This initializer creates a roughness object by copying the scale and texture values from an existing PhysicallyBasedMaterial.Roughness object.
With custom materials, the texture and scale properties of the CustomMaterial.Roughness object are available in your surface shader function, but RealityKit doesn’t automatically use them when rendering your entity. To render an entity with roughness, lightingModel must be CustomMaterial.LightingModel.lit or CustomMaterial.LightingModel.clearcoat and the custom material’s surface shader function must call params.surface().set_roughness().
To achieve the same roughness behavior as PhysicallyBasedMaterial, the surface shader function multiplies roughness scale by the sampled value from the texture, as the following Metal code demonstrates:
    // Retrieve the roughness scale from the CustomMaterial.
    float roughnessScale = params.material_constants().roughness_scale();


    // Retrieve the entity's UV texture coordinates.
    float2 uv = params.geometry().uv0();


    // Models loaded from USDZ or Reality Composer use UVs that are flipped
    // on the y-axis. This compensates for that.
    uv.y = 1.0 - uv.y;


    // Sample the texture based on the resulting UVs.
    auto tex = params.textures();
    half roughness = tex.roughness().sample(textureSampler, uv).r;


    // Multiply the scale and the sampled value from the texture, and assign
    // the result to the shader's base color property.
    roughness *= roughnessScale;


    // Set the roughness value to be used by the custom material shader.
    params.surface().set_roughness(roughness);
For more information on creating custom materials and writing shader functions, see Modifying RealityKit Rendering Using Custom Materials.
See Also
Creating a Roughness Object
init(floatLiteral: Float)
Creates an object to specify the amount of roughness, using a single value that applies to the entire material.
init(scale: Float, texture: CustomMaterial.Texture?)
Creates a roughness object from a color or texture.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

