https://developer.apple.com/documentation/createml/mlregressor

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
E
case linear(MLLinearRegressor)
Regressor Cases
P
var playgroundDescription: Any
P
var debugDescription: String
P
var description: String
P
var model: MLModel
Describing a Regressor
E
MLClassifier
Creating a Model from Tabular Data
Tabular Models
S
MLActivityClassifier
Motion Models
S
MLSoundClassifier
Sound Models
S
MLWordEmbedding
Documentation
Open Menu
Swift
Enumeration
MLRegressor
A model you train to estimate continuous values.
macOS 10.14+
visionOS 1.0+ Beta
enum MLRegressor
Overview
Use an MLRegressor to estimate continuous values like price, time, or temperature.
A regressor differs from a classifier because it can predict output values not seen during the training process. By contrast, a classifier can only classify input into the categories you provide in the training data.
For example, when estimating housing prices on Mars, a regressor can interpolate between the examples to estimate prices not seen during training. The figure below shows a linear regressor for Mars real-estate prices similar to the Integrating a Core ML Model into Your App sample.
In this case, there are no data points with three solar panels, but the regressor can make an informed prediction about the housing price.
When you create an MLRegressor, Create ML inspects your data and automatically chooses a specific regressor (see Supporting Regressor Types).
Topics
Creating and Training a Regressor
init(trainingData: MLDataTable, targetColumn: String, featureColumns: [String]?) throws
Creates a regressor from the feature columns in the training data to predict the values in the target column.
var targetColumn: String
The name of the column you selected at initialization to define which feature the regressor predicts.
var featureColumns: [String]
The names of the columns you selected at initialization to train the regressor.
Assessing Model Accuracy
var trainingMetrics: MLRegressorMetrics
Measurements of the regressor’s performance on the training data set.
var validationMetrics: MLRegressorMetrics
Measurements of the regressor’s performance on the validation data set.
Evaluating a Regressor
func evaluation(on: MLDataTable) -> MLRegressorMetrics
Evaluates the classifier on the provided labeled data.
Testing a Regressor
func predictions(from: MLDataTable) throws -> MLUntypedColumn
Predicts the target value from the provided data.
Saving a Regressor
func write(to: URL, metadata: MLModelMetadata?) throws
Exports a Core ML model file for use in your app.
func write(toFile: String, metadata: MLModelMetadata?) throws
Exports a Core ML model file for use in your app.
Describing a Regressor
var model: MLModel
The underlying Core ML model stored in memory.
var description: String
A text representation of the regressor.
var debugDescription: String
A text representation of the regressor that’s suitable for output during debugging.
var playgroundDescription: Any
A description of the regressor shown in a playground.
Regressor Cases
The regressor case picked automatically when initializing an MLRegressor.
case linear(MLLinearRegressor)
A regressor that estimates the target as a linear function of the features.
case decisionTree(MLDecisionTreeRegressor)
A regressor that estimates the target by learning rules to split the data.
case boostedTree(MLBoostedTreeRegressor)
A regressor based on a collection of decision trees combined with gradient boosting.
case randomForest(MLRandomForestRegressor)
A regressor based on a collection of decision trees trained on subsets of the data.
Supporting Regressor Types
struct MLLinearRegressor
A regressor that estimates the target as a linear function of the features.
struct MLDecisionTreeRegressor
A regressor that estimates the target by learning rules to split the data.
struct MLRandomForestRegressor
A regressor based on a collection of decision trees trained on subsets of the data.
struct MLBoostedTreeRegressor
A regressor based on a collection of decision trees combined with gradient boosting.
Initializers
init(trainingData: DataFrame, targetColumn: String, featureColumns: [String]?) throws
Creates a regressor.
Instance Methods
func evaluation(on: DataFrame) -> MLRegressorMetrics
Evaluates the classifier on the provided labeled data.
func predictions(from: DataFrame) throws -> AnyColumn
Default Implementations
API Reference
CustomDebugStringConvertible Implementations
API Reference
CustomPlaygroundDisplayConvertible Implementations
API Reference
CustomStringConvertible Implementations
Relationships
Conforms To
CustomDebugStringConvertible
CustomPlaygroundDisplayConvertible
CustomStringConvertible
Sendable
See Also
Tabular Models
enum MLClassifier
A model you train to classify data into discrete categories.
struct MLRecommender
A model you train to make recommendations based on item similarity, grouping, and, optionally, item ratings.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLRegressor
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

