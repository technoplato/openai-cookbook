https://developer.apple.com/documentation/realitykit/shaperesource/generatestaticmesh(from:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
PhysicsMotionComponent
S
PhysicsBodyComponent
Equatable Implementations
Component Implementations
Default Implementations
P
var isStatic: Bool
Beta
P
var collisionOptions: CollisionComponent.CollisionOptions
init(shapes: [ShapeResource], mode: CollisionComponent.Mode, collisionOptions: CollisionComponent.CollisionOptions, filter: CollisionFilter)
static func generateStaticMesh(positions: [SIMD3<Float>], faceIndices: [UInt16]) async throws -> ShapeResource
M
static func generateConvex(from: MeshResource) async throws -> ShapeResource
M
static func generateConvex(from: [SIMD3<Float>]) async throws -> ShapeResource
Type Methods
P
var bounds: BoundingBox
Instance Properties
P
var hashValue: Int
M
func hash(into: inout Hasher)
static func != (Self, Self) -> Bool
Documentation
Open Menu
Swift
Type Method
generateStaticMesh(from:)
Creates a mesh-based collision shape derived from an ARKit Scene Understanding mesh anchor.
visionOS 1.0+ Beta
nonisolated static func generateStaticMesh(from meshAnchor: MeshAnchor) async throws -> ShapeResource
Parameters
meshAnchor
The mesh anchor which will be used for the collision shape. This anchor must have meshAnchor.geometry.faces.primitive == GeometryElement.Primitive.triangle.
Return Value
The new shape.
Discussion
The returned ShapeResource can only be used under the following circumstances:
This shape can only be used with PhysicsBodyMode.static (not .dynamic or .kinematic)
This shape cannot be used with CollisionComponent.Mode.trigger
In other words, the returned shape can only be used for static world geometry.
Note
Generating a shape resource from the AR mesh takes time, because the input mesh must be preprocessed (“cooked”) by the physics engine before it can be used. This function is marked async because ideally this precomputation should occur in the background. For example, when calling from non-async code, you can use Swift’s Task API to assign a priority (see the example below).
Below is example usage of this function, assumed to be called from a non-async block:
let myAnchor: MeshAnchor = ...
// It is recommended to use a low-priority task, since generating the collision mesh can take a while.
let myShapeTask = Task(priority: .low) {
    let shape = await ShapeResource.generateStaticMesh(from: myAnchor)


    // Now we can do something with `shape`, such as create an entity with it.
    // Make sure to call non-async RealityKit methods from the main actor:
    await MainActor.run {
        let entity = Entity()
        entity.components[CollisionComponent.self] = .init(shapes: [shape])


        // Note that `mode` can not be set to `.dynamic`.  Only `.static` is supported.
        entity.components[PhysicsBodyComponent.self] = .init(massProperties: .default,
                                                             material: nil,
                                                             mode: .static)
        // ...
    }
}
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is generateStaticMesh(from:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

