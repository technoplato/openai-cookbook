https://developer.apple.com/documentation/realitykit/scene/publisher/map(_:)-6m6k7Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>
M
func collect(Int) -> Publishers.CollectByCount<Self>
M
func collect() -> Publishers.Collect<Self>
Reducing Elements
M
func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>
M
func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>
M
func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>
func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>
Mapping Elements
M
func subscribe<S>(S) -> AnyCancellable
M
func subscribe<S>(S)
M
func receive<S>(subscriber: S)
Working with Subscribers
T
Scene.Publisher.Failure
T
Scene.Publisher.Output
Declaring Publisher Topography
Documentation
Open Menu
Swift
Instance Method
map(_:)
Transforms all elements from the upstream publisher with a provided closure.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func map<T>(_ transform: @escaping (Self.Output) -> T) -> Publishers.Map<Self, T>
Parameters
transform
A closure that takes one element as its parameter and returns a new element.
Return Value
A publisher that uses the provided closure to map elements from the upstream publisher to new elements that it then publishes.
Discussion
Combine’s Publisher/map(_:)-99evh operator performs a function similar to that of doc://com.apple.documentation/documentation/Swift/Sequence/3018373-map in the Swift standard library: it uses a closure to transform each element it receives from the upstream publisher. You use Publisher/map(_:)-99evh to transform from one kind of element to another.
The following example uses an array of numbers as the source for a collection based publisher. A Publisher/map(_:)-99evh operator consumes each integer from the publisher and uses a dictionary to transform it from its Arabic numeral to a Roman equivalent, as a String. If the Publisher/map(_:)-99evh’s closure fails to look up a Roman numeral, it returns the string (unknown).
let numbers = [5, 4, 3, 2, 1, 0]
let romanNumeralDict: [Int : String] =
   [1:"I", 2:"II", 3:"III", 4:"IV", 5:"V"]
cancellable = numbers.publisher
    .map { romanNumeralDict[$0] ?? "(unknown)" }
    .sink { print("\($0)", terminator: " ") }


// Prints: "V IV III II I (unknown)"
If your closure can throw an error, use Combine’s tryMap(_:) operator instead.
See Also
Mapping Elements
func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>
Transforms all elements from the upstream publisher with a provided error-throwing closure.
func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>
Transforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.
func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>
Converts any failure from the upstream publisher into a new error.
func replaceNil<T>(with: T) -> Publishers.Map<Self, T>
Replaces nil elements in the stream with the provided element.
func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>
Transforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.
func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>
Transforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.
func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>
Changes the failure type declared by the upstream publisher.
Available when Failure is Never.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is map(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

