https://developer.apple.com/documentation/realitykit/validating-usd-filesSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Adding Components
r
P
HasHierarchy
S
Entity.ChildCollection
M
func removeChild(Entity, preservingWorldTransform: Bool)
M
func addChild(Entity, preservingWorldTransform: Bool)
P
var children: Entity.ChildCollection
M
func removeFromParent(preservingWorldTransform: Bool)
Validating USD feature support
Creating USD files for Apple devices
Loading Entities from a File
Stored Entities
Loading a Stored Entity
M
func didClone(from: Entity)
M
func clone(recursive: Bool) -> Self
M
init()
Documentation
Open Menu
Swift
Article
Validating feature support for USD files
Ensure that the renderer that displays your USD assets supports its features.
Overview
Depending on the device, its operating system, and the app, there are three renderers that might display your 3D assets: RealityKit, SceneKit, or Storm. Each renderer supports a subset of the USD features. Use the tables below to determine which features are available. See Creating USD Files for Apple Devices for more information on how to determine which engine renders your USD asset. This article identifies feature support for assets imported from USD files. In some cases, the renderers might support features listed below, but do not support importing those features from USD files. In the case of Storm, feature support may differ from the open source version.
Review general and media features
Each rendering engine supports a set of general and media attributes that cover fundamental features, such as which file types the renderer supports, and whether it supports instancing, which is a performance optimization where a rendererer can inexpensively display a single asset multiple times in a scene.
USD
RealityKit
SceneKit
Storm
Instancing
✔
✔
✔
Point instancing
✔
Transform animation
✔
✔
✔
.usdz files
✔
✔
✔
.usd / .usdc / .usda
✔
✔
✔
Visibility attribute
✔
✔
✔
Defer payload loading
✔
Variants
✔
partial
✔
Spatial audio
✔
All three renderers support using attributes specified in the USD file, but RealityKit only supports instancing, .usd, .usdc, .usda, visibility attribute, and variants on visionOS, visionOS Simulator, and Reality Composer Pro.
Variant support is handled differently between the three renderers:
All three renderers support loading the active variant.
Storm supports changing the variant after loading the asset.
In Reality Composer Pro, RealityKit also supports changing the variant after loading the asset.
RealityKit supports instancing of mesh and texture data from imported USD files.
Review geometry feature support
USD supports multiple ways to represent the shape of a 3D object, and has several features that affect the way these objects render.
If a renderer doesn’t support a feature that:
defines the shape of a 3D object, such as a NURBS patch (a mathematical description of a 3D surface), then the object doesn’t render at all. For example, assets defined using a NURBS patch render on Storm, but not on SceneKit or RealityKit.
modifies how an asset renders, the feature is just not used, but the object still displays. For example, an asset that uses subdivision surfaces (a feature that generates additional geometry on the fly) displays on all three renderers, but is only drawn with aditional geometry on Storm and SceneKit, not RealityKit.
USD
RealityKit
SceneKit
Storm
Polygon meshes
✔
✔
✔
Vertex animation
✔
Primitive shapes
✔
✔
✔
Double-sided meshes
✔
✔
Subdivision
✔
✔
NURBS patches
Basis curves
Points
✔
✔
Camera
✔
✔
Geometry subsets
✔
✔
✔
Alembic
✔
✔
✔
Draco compression
Vertex colors
✔
✔
✔
Purpose
✔
✔
✔
All three renderers support using attributes specified in the USD file, but RealityKit only supports Alembic and vertex colors on visionOS, visionOS Simulator, and Reality Composer Pro.
Primitive Shapes are basic geometry types such as cubes, cones, and spheres. The plane type is unsupported.
Alembic supports requires files written using the Ogawa format. The Legacy HDF5 format is not supported.
The Preview purpose is used by all three renderers.
Storm supports materials on geometry subset, beginning with macOS 14.
Review lighting support
The USD specification supports many kinds of lights, some that are well-suited to real-time use and others that are primarily intended for use in offline production tasks, such as rendering animations or special effects for movies, because they are computationally expensive. SceneKit and Storm don’t support USD light types that are too computationally expensive for real-time use. Because Realitykit is an AR-first renderer, it doesn’t use any lights included in a USD file, and instead bases its lighting on the scene’s real-world lighting.
USD
RealityKit
SceneKit
Storm
Rectangle light
Distant light
✔
✔
Sphere light
✔
✔
Cylinder light
✔
Dome light
✔
✔
Disk light
Mesh light
Volume light
Light shaping
✔
Shadow API
Light lists
Light filters
Portal light
Review physics support
USD supports many physics simulation features. Only the RealityKit renderer supports simulation features.
USD
RealityKit
SceneKit
Storm
Physics scene
✔
Rigid body
✔
Mass
✔
Collisions
✔
Mesh collisions
Physics materials
✔
Collision groups
Filtered pairs
Physics joints
Physics limits
Physics drive
Articulation root
Review shader features
The USD specification includes a number of features for use by shaders and even includes a number of pre-defined shaders to ensure consistent rendering across platforms.
USD
RealityKit
SceneKit
Storm
Material graph
✔
✔
✔
USD preview surface shader
✔
✔
✔
MaterialX
✔
Textures
✔
✔
✔
Texture wrap modes
✔
✔
✔
Texture channel references
partial
✔
✔
Texture transforms
partial
✔
✔
Specular workflow
✔
Multiple UV sets
partial
✔
✔
Scale
partial
✔
Bias
✔
ColorSpace
✔
Displacement
All three renderers support using attributes specified in the USD file, but RealityKit only supports MaterialX and ColorSpace on visionOS, visionOS Simulator, and Reality Composer Pro.
RealityKit has partial support for some shader features:
Texture channel references
RealityKit supports only a single packed texture per material. You can, however, reference multiple scalar channels within a single texture.
Texture transforms
RealityKit supports a single UsdTransform2d per material. If a material contains multiple UsdTransform2D instances, the renderer will use the first one it finds.
Multiple UV sets
RealityKit supports a single UV Set in iOS 15 and macOS 12. In iOS 16 and macOS 13, it supports two.
Scale
RealityKit supports USD texture scaling except for normal map textures.
ColorSpace
RealityKit supports some known colorSpaces like DisplayP3 and sRGB. Color constants and textures will get conversions applied if colorSpace specifies a known name like “srgb_texture”, “lin_srgb”, “srgb_displayp3”, or “lin_displayp3”.
sourceColorSpace
If colorSpace is not specified then the sourceColorSpace attribute is used for conversion of color textures, such as “sRGB” or “raw”.
If no colorSpace or sourceColorSpace value is provided then the embedded image color profile is used when loading color textures.
Review skeletons
Skeletal animation deforms a model based on a hierarchy of joints, which allows you to animate character assets and complex mechanical objects.
USD
RealityKit
SceneKit
Storm
Skeletons
✔
✔
✔
Skeleton animation
✔
✔
✔
Blendshapes
✔
✔
Current page is Validating feature support for USD files
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

