https://developer.apple.com/documentation/realitykit/objectcapturepointcloudview/transaction(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Scene content
USD Assets
M
func zIndex(Double) -> some View
M
func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View
M
func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View
M
func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View
M
func unredacted() -> some View
func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View
func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View
func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View
M
func tracking(CGFloat) -> some View
M
func toolbarTitleMenu<C>(content: () -> C) -> some View
M
func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View
M
func toolbarRole(ToolbarRole) -> some View
M
func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View
M
func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View
M
func toolbar<Content>(id: String, content: () -> Content) -> some View
M
func toolbar<Content>(content: () -> Content) -> some View
Documentation
Open Menu
Swift
Instance Method
transaction(_:)
Applies the given transaction mutation function to all animations used within the view.
RealityKit
SwiftUI
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func transaction(_ transform: @escaping (inout Transaction) -> Void) -> some View
Parameters
transform
The transformation to apply to transactions within this view.
Return Value
A view that wraps this view and applies a transformation to all transactions used within the view.
Discussion
Use this modifier to change or replace the animation used in a view. Consider three identical animations controlled by a button that executes all three animations simultaneously:
The first animation rotates the “Rotation” Text view by 360 degrees.
The second uses the transaction(_:) modifier to change the animation by adding a delay to the start of the animation by two seconds and then increases the rotational speed of the “Rotation\nModified” Text view animation by a factor of 2.
The third animation uses the transaction(_:) modifier to replace the rotation animation affecting the “Animation\nReplaced” Text view with a spring animation.
The following code implements these animations:
struct TransactionExample: View {
    @State private var flag = false


    var body: some View {
        VStack(spacing: 50) {
            HStack(spacing: 30) {
                Text("Rotation")
                    .rotationEffect(Angle(degrees:
                                            self.flag ? 360 : 0))


                Text("Rotation\nModified")
                    .rotationEffect(Angle(degrees:
                                            self.flag ? 360 : 0))
                    .transaction { view in
                        view.animation =
                            view.animation?.delay(2.0).speed(2)
                    }


                Text("Animation\nReplaced")
                    .rotationEffect(Angle(degrees:
                                            self.flag ? 360 : 0))
                    .transaction { view in
                        view.animation = .interactiveSpring(
                            response: 0.60,
                            dampingFraction: 0.20,
                            blendDuration: 0.25)
                    }
            }


            Button("Animate") {
                withAnimation(.easeIn(duration: 2.0)) {
                    self.flag.toggle()
                }
            }
        }
    }
}
Use this modifier on leaf views such as Image or Button rather than container views such as VStack or HStack. The transformation applies to all child views within this view; calling transaction(_:) on a container view can lead to unbounded scope of execution depending on the depth of the view hierarchy.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is transaction(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

