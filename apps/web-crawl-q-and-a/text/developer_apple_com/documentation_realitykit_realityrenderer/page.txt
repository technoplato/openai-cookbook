https://developer.apple.com/documentation/realitykit/realityrendererSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func updateAndRender(deltaTime: TimeInterval, cameraOutput: RealityRenderer.CameraOutput, whenScheduled: ((RealityRenderer) -> Void)?, onComplete: ((RealityRenderer) -> Void)?, actionsBeforeRender: [RealityRenderer.MetalEventAction], actionsAfterRender: [RealityRenderer.MetalEventAction]) throws
M
func update(TimeInterval) throws
M
func subscribe<E>(to: E.Type, on: (EventSource)?, componentType: (Component.Type)?, (E) -> Void) -> EventSubscription
Instance Methods
P
var lighting: RealityRenderer.ImageBasedLight
P
var entities: RealityRenderer.EntityCollection
P
var cameraSettings: RealityRenderer.CameraSettings
Documentation
Open Menu
Swift
Class
RealityRenderer
visionOS 1.0+ Beta
class RealityRenderer
Topics
Structures
struct CameraOutput
Output produced by rendering with a camera.
struct CameraSettings
Settings for rendering with a camera.
struct EntityCollection
A collection of entities in a RealityRenderer.
struct ImageBasedLight
Describe the lighting properties for the scene.
struct MetalEventAction
The structure describing an event and value to be signaled or waited for.
Initializers
init() throws
Instance Properties
var activeCamera: Entity?
The camera to be used for rendering.
var cameraSettings: RealityRenderer.CameraSettings
The settings to be used for rendering with activeCamera.
var entities: RealityRenderer.EntityCollection
The RealityKit entities to be displayed in this RealityRenderer.
var lighting: RealityRenderer.ImageBasedLight
The lighting used in the environment of a particular scene.
Instance Methods
func subscribe<E>(to: E.Type, on: (EventSource)?, componentType: (Component.Type)?, (E) -> Void) -> EventSubscription
Subscribes to the provided RealityKit Event with handler.
func update(TimeInterval) throws
Tick the simulation
func updateAndRender(deltaTime: TimeInterval, cameraOutput: RealityRenderer.CameraOutput, whenScheduled: ((RealityRenderer) -> Void)?, onComplete: ((RealityRenderer) -> Void)?, actionsBeforeRender: [RealityRenderer.MetalEventAction], actionsAfterRender: [RealityRenderer.MetalEventAction]) throws
Tick the simulation and render using activeCamera and the camera rendering output.
See Also
Presentation
class ARView
A view that enables you to display an AR experience with RealityKit.
struct Model3D
A view that asynchronously loads and displays a 3D model.
Beta
struct RealityView
A SwiftUI view for displaying RealityKit content on visionOS.
Beta
struct SceneRealityCoordinateSpace
The RealityCoordinateSpace representing ARKit world space.
Beta
protocol RealityCoordinateSpaceConverting
A value that can be converted between SwiftUI CoordinateSpaces and
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is RealityRenderer
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

