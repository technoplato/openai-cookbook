https://developer.apple.com/documentation/realitykit/loadrequest/sink(receivecompletion:receivevalue:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Loading a Flattened Body-Tracked Entity
M
static func loadModelAsync(contentsOf: URL, withName: String?) -> LoadRequest<ModelEntity>
M
static func loadModelAsync(named: String, in: Bundle?) -> LoadRequest<ModelEntity>
M
static func loadModel(contentsOf: URL, withName: String?) throws -> ModelEntity
Loading a Flattened Model Entity
M
static func loadAnchorAsync(contentsOf: URL, withName: String?) -> LoadRequest<AnchorEntity>
M
static func loadAnchorAsync(named: String, in: Bundle?) -> LoadRequest<AnchorEntity>
func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>
func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>
func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable
Connecting Simple Subscribers
M
func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>
M
func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>
Specifying Schedulers
M
func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>
Performing Type Erasure
M
func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>
Buffering Elements
Documentation
Open Menu
Swift
Instance Method
sink(receiveCompletion:receiveValue:)
Attaches a subscriber with closure-based behavior.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func sink(
    receiveCompletion: @escaping ((Subscribers.Completion<Self.Failure>) -> Void),
    receiveValue: @escaping ((Self.Output) -> Void)
) -> AnyCancellable
Parameters
receiveComplete
The closure to execute on completion.
receiveValue
The closure to execute on receipt of a value.
Return Value
A cancellable instance, which you use when you end assignment of the received value. Deallocation of the result will tear down the subscription stream.
Discussion
Use Publisher/sink(receiveCompletion:receiveValue:) to observe values received by the publisher and process them using a closure you specify.
In this example, a Range publisher publishes integers to a Publisher/sink(receiveCompletion:receiveValue:) operator’s receiveValue closure that prints them to the console. Upon completion the Publisher/sink(receiveCompletion:receiveValue:) operator’s receiveCompletion closure indicates the successful termination of the stream.
let myRange = (0...3)
cancellable = myRange.publisher
    .sink(receiveCompletion: { print ("completion: \($0)") },
          receiveValue: { print ("value: \($0)") })


// Prints:
//  value: 0
//  value: 1
//  value: 2
//  value: 3
//  completion: finished
This method creates the subscriber and immediately requests an unlimited number of values, prior to returning the subscriber. The return value should be held, otherwise the stream will be canceled.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is sink(receiveCompletion:receiveValue:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

