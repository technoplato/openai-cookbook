https://developer.apple.com/documentation/realitykit/collisiongroupSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func intersection(Self) -> Self
M
func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)
M
func formUnion(Self)
M
func formSymmetricDifference(Self)
M
func formIntersection(Self)
M
func contains(Self) -> Bool
P
let rawValue: UInt32
E
CollisionCastQueryType
S
CollisionCastHit
M
func convexCast(convexShape: ShapeResource, fromPosition: SIMD3<Float>, fromOrientation: simd_quatf, toPosition: SIMD3<Float>, toOrientation: simd_quatf, query: CollisionCastQueryType, mask: CollisionGroup, relativeTo: Entity?) -> [CollisionCastHit]
M
func raycast(from: SIMD3<Float>, to: SIMD3<Float>, query: CollisionCastQueryType, mask: CollisionGroup, relativeTo: Entity?) -> [CollisionCastHit]
M
func raycast(origin: SIMD3<Float>, direction: SIMD3<Float>, length: Float, query: CollisionCastQueryType, mask: CollisionGroup, relativeTo: Entity?) -> [CollisionCastHit]
Detecting Intersections
M
func performQuery(EntityQuery) -> QueryResult<Entity>
S
QueryPredicate
Documentation
Open Menu
Swift
Structure
CollisionGroup
A bitmask used to define the collision group to which an entity belongs.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
struct CollisionGroup
Overview
You use collision groups along with CollisionFilter to define custom collision properties for entities in your scene and controlling which entities collide wit which other entities. By default, all entities that participate in the physics simulation collide with all other participating entities. There are times, however, when you need certain entities to not collide with certain other entities, and that’s where collision groups and filters come into play.
Create individual collision groups using raw bit flag values, like this:
    let redGroup = CollisionGroup(rawValue: 1 << 0)
    let blueGroup = CollisionGroup(rawValue: 1 << 1)
    let greenGroup = CollisionGroup(rawValue: 1 << 2)
    let greenGroup = CollisionGroup(rawValue: 1 << 3)
Because CollisionGroup conforms to OptionSet, this allows you to create aggregate groups that encompass multiple individual collision groups, like so:
    let blueAndRedGroup = redGroup.union(blueGroup)
    let greenAndYellowGroup = greenGroup.union(yellowGroup)
You can also define groups that have all entities except those in specific groups. In a game, for example, you might want to turn off collisions between members of the same team or between pieces owned by the same player. This is what creating that kind of filter would look like:
    let allButRedGroup = CollisionGroup.all.subtracting(redGroup)
Collision groups aren’t assigned directly to entities. Instead, you create a CollisionFilter for the group, and then assign that filter to all the entities you wish to include in its group. The collision filter’s mask defines which objects the entities in this group collide with, and all entities that share the same filter are part of the same collision group.
let allButRedFilter = CollisionFilter(group: redGroup, mask:allButRedGroup)
redTeamPlayer1.collision?.filter = allButRedFilter
Topics
Standard Collision Groups
static let `default`: CollisionGroup
The default collision group for objects.
static let all: CollisionGroup
The collision group that represents all groups.
static let sceneUnderstanding: CollisionGroup
The default collision group for reconstructed meshes.
Creating a Collision Group
init()
Creates an empty option set.
Available when RawValue conforms to FixedWidthInteger.
init(rawValue: UInt32)
Creates a collision group from a raw value.
init<S>(S)
Creates a new set from a finite sequence of items.
init(arrayLiteral: Self.Element...)
Creates a set containing the elements of the given array literal.
Available when ArrayLiteralElement is Self.Element.
Option Set
let rawValue: UInt32
The raw value for this collision group.
static func != (Self, Self) -> Bool
Compares two collision groups for inequality, return true if they are different.
typealias Element
The type of element that this option set can hold.
var isEmpty: Bool
A Boolean value that indicates whether the set has no elements.
let rawValue: UInt32
The raw value for this collision group.
func contains(Self) -> Bool
Returns a Boolean value that indicates whether a given element is a member of the option set.
Available when Self is Self.Element.
func formIntersection(Self)
Removes all elements of this option set that are not also present in the given set.
Available when RawValue conforms to FixedWidthInteger.
func formSymmetricDifference(Self)
Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both.
Available when RawValue conforms to FixedWidthInteger.
func formUnion(Self)
Inserts the elements of another set into this option set.
Available when RawValue conforms to FixedWidthInteger.
func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)
Adds the given element to the option set if it is not already a member.
Available when Self is Self.Element.
func intersection(Self) -> Self
Returns a new option set with only the elements contained in both this set and the given set.
func isDisjoint(with: Self) -> Bool
Returns a Boolean value that indicates whether the set has no members in common with the given set.
func isStrictSubset(of: Self) -> Bool
Returns a Boolean value that indicates whether this set is a strict subset of the given set.
func isStrictSuperset(of: Self) -> Bool
Returns a Boolean value that indicates whether this set is a strict superset of the given set.
func isSubset(of: Self) -> Bool
Returns a Boolean value that indicates whether the set is a subset of another set.
func isSuperset(of: Self) -> Bool
Returns a Boolean value that indicates whether the set is a superset of the given set.
func remove(Self.Element) -> Self.Element?
Removes the given element and all elements subsumed by it.
Available when Self is Self.Element.
func subtract(Self)
Removes the elements of the given set from this set.
func subtracting(Self) -> Self
Returns a new set containing the elements of this set that do not occur in the given set.
func symmetricDifference(Self) -> Self
Returns a new option set with the elements contained in this set or in the given set, but not in both.
func union(Self) -> Self
Returns a new option set of the elements contained in this set, in the given set, or in both.
func update(with: Self.Element) -> Self.Element?
Inserts the given element into the set.
Available when Self is Self.Element.
typealias ArrayLiteralElement
The type of the elements of an array literal.
typealias RawValue
The raw type that can be used to represent all values of the conforming type.
Default Implementations
API Reference
Equatable Implementations
API Reference
OptionSet Implementations
API Reference
SetAlgebra Implementations
Relationships
Conforms To
Equatable
ExpressibleByArrayLiteral
OptionSet
RawRepresentable
SetAlgebra
See Also
Simulation
Designing Scene Hierarchies for Efficient Physics Simulation
Configure your RealityKit scenes to avoid performance bottlenecks.
Handling Different-Sized Objects in Physics Simulations
Set up a scene hierarchy for accurate physics simulations.
struct CollisionComponent
A component that gives an entity the ability to collide with other entities that also have collision components.
struct CollisionFilter
A set of masks that determine whether entities can collide during simulations.
struct ParticleEmitterComponent
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is CollisionGroup
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

