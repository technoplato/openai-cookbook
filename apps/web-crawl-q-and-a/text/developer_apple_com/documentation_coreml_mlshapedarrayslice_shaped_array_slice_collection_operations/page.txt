https://developer.apple.com/documentation/coreml/mlshapedarrayslice/shaped_array_slice_collection_operations

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>
M
func difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>
M
func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult
Comparing Shaped Array Slices
M
func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?
M
func randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?
M
func randomElement() -> MLShapedArraySlice<Scalar>?
T
MLShapedArraySlice.ArrayLiteralElement
T
MLShapedArraySlice.SubSequence
T
MLShapedArraySlice.Iterator
T
MLShapedArraySlice.Indices
T
MLShapedArraySlice.Index
T
MLShapedArraySlice.Element
Supporting Types
static func != (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool
Beta
Documentation
Open Menu
Swift
API Collection
Shaped Array Slice Collection Operations
Overview
Properties and methods a shaped array slice inherits from collection protocols.
Topics
Inspecting a Shaped Array’s Scalars
var first: MLShapedArraySlice<Scalar>?
The first element of the collection.
var last: MLShapedArraySlice<Scalar>?
The last element of the collection.
var publisher: Publishers.Sequence<MLShapedArraySlice<Scalar>, Never>
A publisher that produces the element in the shaped array slice as separate values.
var lazy: LazySequence<MLShapedArraySlice<Scalar>>
A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.
Inspecting a Slice of a Shaped Array Slice
func allSatisfy((MLShapedArraySlice<Scalar>) -> Bool) -> Bool
Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.
func contains(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Bool
Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.
func contains(MLShapedArraySlice<Scalar>) -> Bool
Returns a Boolean value indicating whether the sequence contains the given element.
func contains<C>(C) -> Bool
Returns a Boolean value indicating whether the collection contains the given sequence.
subscript<R>(R) -> MLShapedArraySlice<Scalar>
Accesses the contiguous subrange of the collection’s elements specified by a range expression.
func makeIterator() -> IndexingIterator<MLShapedArraySlice<Scalar>>
Returns an iterator over the elements of the collection.
func forEach((MLShapedArraySlice<Scalar>) -> Void)
Calls the given closure on each element in the sequence in the same order as a for-in loop.
func enumerated() -> EnumeratedSequence<MLShapedArraySlice<Scalar>>
Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.
func randomElement() -> MLShapedArraySlice<Scalar>?
Returns a random element of the collection.
func randomElement<T>(using: inout T) -> MLShapedArraySlice<Scalar>?
Returns a random element of the collection, using the given generator as a source for randomness.
func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?
Executes a closure on the sequence’s contiguous storage.
Comparing Shaped Array Slices
func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult
Returns a comparison result by comparing two shaped array slices.
func difference<C>(from: C, by: (C.Element, MLShapedArraySlice<Scalar>) -> Bool) -> CollectionDifference<MLShapedArraySlice<Scalar>>
Returns the difference needed to produce this collection’s ordered elements from the given collection, using the given predicate as an equivalence test.
func difference<C>(from: C) -> CollectionDifference<MLShapedArraySlice<Scalar>>
Returns the difference needed to produce this collection’s ordered elements from the given collection.
func elementsEqual<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, OtherSequence.Element) -> Bool) -> Bool
Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.
func elementsEqual<OtherSequence>(OtherSequence) -> Bool
Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.
func starts<PossiblePrefix>(with: PossiblePrefix, by: (MLShapedArraySlice<Scalar>, PossiblePrefix.Element) -> Bool) -> Bool
Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.
func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> Bool
Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.
Finding an Index in a Shaped Array Slice
var startIndex: Int
The index of the first element in the shaped array slice.
var endIndex: Int
The index of the last element in the shaped array slice.
func index(after: Int) -> Int
Returns the index immediately after an index you provide.
func index(Int, offsetBy: Int) -> Int
Returns the index at a relative distance to an index you provide.
func index(Int, offsetBy: Int, limitedBy: Int) -> Int?
Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.
func index(of: MLShapedArraySlice<Scalar>) -> Int?
Returns the first index where the specified value appears in the collection.
Deprecated
func formIndex(before: inout Int)
Replaces the given index with its predecessor.
func formIndex(after: inout Int)
Replaces the given index with its successor.
func formIndex(inout Int, offsetBy: Int)
Offsets the given index by the specified distance.
func formIndex(inout Int, offsetBy: Int, limitedBy: Int) -> Bool
Offsets the given index by the specified distance, or so that it equals the given limiting index.
func firstIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?
Returns the first index in which an element of the collection satisfies the given predicate.
func firstIndex(of: MLShapedArraySlice<Scalar>) -> Int?
Returns the first index where the specified value appears in the collection.
func firstRange<C>(of: C) -> Range<Int>?
Finds and returns the range of the first occurrence of a given collection within this collection.
func lastIndex(where: (MLShapedArraySlice<Scalar>) -> Bool) -> Int?
Returns the index of the last element in the collection that matches the given predicate.
func lastIndex(of: MLShapedArraySlice<Scalar>) -> Int?
Returns the last index where the specified value appears in the collection.
func ranges<C>(of: C) -> [Range<Int>]
Finds and returns the ranges of the all occurrences of a given sequence within the collection.
func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool
Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.
Modifying a Shaped Array Slice
subscript(Range<Int>) -> MLShapedArraySlice<Scalar>
Accesses a slice with a range in the shaped array’s first dimension.
func swapAt(Int, Int)
Exchanges the values at the specified indices of the collection.
func partition(by: (MLShapedArraySlice<Scalar>) -> Bool) -> Int
Reorders the elements of the collection such that all the elements that match the given predicate are after all the elements that don’t match.
func sort<Comparator>(using: Comparator)
Reorders a shaped array slice by sorting its slices with a comparator.
func sort<S, Comparator>(using: S)
Reorders a shaped array slice by sorting its slices with a sequence of comparators.
func sort(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool)
Sorts the collection in place, using the given predicate as the comparison between elements.
func popFirst() -> MLShapedArraySlice<Scalar>?
Removes and returns the first element of the collection.
func popLast() -> MLShapedArraySlice<Scalar>?
Removes and returns the last element of the collection.
func removeFirst() -> MLShapedArraySlice<Scalar>
Removes and returns the first element of the collection.
func removeLast() -> MLShapedArraySlice<Scalar>
Removes and returns the last element of the collection.
func removeFirst(Int)
Removes the specified number of elements from the beginning of the collection.
func removeLast(Int)
Removes the given number of elements from the end of the collection.
func reverse()
Reverses the elements of the collection in place.
func shuffle()
Shuffles the collection in place.
func shuffle<T>(using: inout T)
Shuffles the collection in place, using the given generator as a source for randomness.
func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<MLShapedArraySlice<Scalar>>) -> R) -> R?
Executes a closure on the collection’s contiguous storage.
Generating a Shaped Array Slice
func first(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the first element of the sequence that satisfies the given predicate.
func last(where: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the last element of the sequence that satisfies the given predicate.
func dropFirst(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence containing all but the given number of initial elements.
func dropLast(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence containing all but the specified number of final elements.
func drop(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.
func joined() -> FlattenSequence<MLShapedArraySlice<Scalar>>
Returns the elements of this sequence of sequences, concatenated.
func joined<Separator>(separator: Separator) -> JoinedSequence<MLShapedArraySlice<Scalar>>
Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.
func min(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the minimum element in the sequence, using the given predicate as the comparison between elements.
func max(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>?
Returns the maximum element in the sequence, using the given predicate as the comparison between elements.
func prefix(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.
func prefix(upTo: Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence from the start of the collection up to, but not including, the specified position.
func prefix(through: Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence from the start of the collection through the specified position.
func prefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.
func suffix(Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence, up to the given maximum length, containing the final elements of the collection.
func suffix(from: Int) -> MLShapedArraySlice<Scalar>
Returns a subsequence from the specified position to the end of the collection.
func trimPrefix<Prefix>(Prefix)
Removes the initial elements that satisfy the given predicate from the start of the sequence.
func trimPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool)
Trims the array slice using a predicate.
func trimmingPrefix<Prefix>(Prefix) -> MLShapedArraySlice<Scalar>
Returns a new collection of the same type by removing initial elements that satisfy the given predicate from the start.
func trimmingPrefix(while: (MLShapedArraySlice<Scalar>) -> Bool) -> MLShapedArraySlice<Scalar>
func reversed() -> ReversedCollection<MLShapedArraySlice<Scalar>>
Returns a view presenting the elements of the collection in reverse order.
func shuffled() -> [MLShapedArraySlice<Scalar>]
Returns the elements of the sequence, shuffled.
func shuffled<T>(using: inout T) -> [MLShapedArraySlice<Scalar>]
Returns the elements of the sequence, shuffled using the given generator as a source for randomness.
func sorted<Comparator>(using: Comparator) -> [MLShapedArraySlice<Scalar>]
Generates a copy of the shaped array slice by sorting its slices with a comparator.
func sorted<S, Comparator>(using: S) -> [MLShapedArraySlice<Scalar>]
Generates a copy of the shaped array slice by sorting its slices with a sequence of comparators.
func sorted(by: (MLShapedArraySlice<Scalar>, MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.
func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.
Transforming a Shaped Array Slice
func map<T>((MLShapedArraySlice<Scalar>) -> T) -> [T]
Returns an array containing the results of mapping the given closure over the sequence’s elements.
func compactMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]
Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.
func flatMap<SegmentOfResult>((MLShapedArraySlice<Scalar>) -> SegmentOfResult) -> [SegmentOfResult.Element]
Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.
func flatMap<ElementOfResult>((MLShapedArraySlice<Scalar>) -> ElementOfResult?) -> [ElementOfResult]
Generates an array that concatenates the sequences from a transform closure that returns an optional.
Deprecated
func filter((MLShapedArraySlice<Scalar>) -> Bool) -> [MLShapedArraySlice<Scalar>]
Returns an array containing, in order, the elements of the sequence that satisfy the given predicate.
func filter(Predicate<MLShapedArraySlice<Scalar>>) -> [MLShapedArraySlice<Scalar>]
Beta
func reduce<Result>(Result, (Result, MLShapedArraySlice<Scalar>) -> Result) -> Result
Returns the result of combining the elements of the sequence using the given closure.
func reduce<Result>(into: Result, (inout Result, MLShapedArraySlice<Scalar>) -> ()) -> Result
Returns the result of combining the elements of the sequence using the given closure.
func split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<MLShapedArraySlice<Scalar>>]
Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.
func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]
Returns the longest possible subsequences of the collection, in order, around elements equal to the given separator.
func split(separator: MLShapedArraySlice<Scalar>, maxSplits: Int, omittingEmptySubsequences: Bool) -> [MLShapedArraySlice<Scalar>]
Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.
Formatting a Shaped Array Slice
func formatted<S>(S) -> S.FormatOutput
Generates a formatted output based on a style.
See Also
Supporting Types
typealias MLShapedArraySlice.Element
A type that defines the shaped array’s elements.
typealias MLShapedArraySlice.Index
A type that defines the shaped array’s indices.
typealias MLShapedArraySlice.Indices
A type that defines the shaped array’s index ranges.
typealias MLShapedArraySlice.Iterator
A type that defines the shaped array’s iterator.
typealias MLShapedArraySlice.SubSequence
A type that defines the shaped array’s slices.
typealias MLShapedArraySlice.ArrayLiteralElement
A type that restricts the elements of an array literal that initializes the shaped array.
Current page is Shaped Array Slice Collection Operations
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

