https://developer.apple.com/documentation/realitykit/scene/publisherSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>
M
func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>
M
func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>
M
func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>
Filtering Elements
M
func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>
M
func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>
func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>
M
func subscribe<E>(to: E.Type, on: (EventSource)?, componentType: (Component.Type)?, (E) -> Void) -> Cancellable
M
func publisher<E>(for: E.Type, on: (EventSource)?, componentType: (Component.Type)?) -> Scene.Publisher<E>
M
func subscribe<E>(to: E.Type, on: (EventSource)?, (E) -> Void) -> Cancellable
M
func publisher<E>(for: E.Type, on: (EventSource)?) -> Scene.Publisher<E>
Getting and Sending Events
r
P
SynchronizationService
P
var synchronizationService: (SynchronizationService)?
Synchronizing Entities Between Devices
Documentation
Open Menu
Swift
Structure
Scene.Publisher
A publisher for the given event type in the scene.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
struct Publisher<E> where E : Event
Topics
Declaring Publisher Topography
typealias Output
The kind of values published by this publisher.
typealias Failure
The kind of errors this publisher might publish.
Working with Subscribers
func receive<S>(subscriber: S)
Attaches the specified subscriber to this publisher.
func subscribe<S>(S)
Attaches the specified subscriber to this publisher.
func subscribe<S>(S) -> AnyCancellable
Attaches the specified subject to this publisher.
Mapping Elements
func map<T>((Self.Output) -> T) -> Publishers.Map<Self, T>
Transforms all elements from the upstream publisher with a provided closure.
func tryMap<T>((Self.Output) throws -> T) -> Publishers.TryMap<Self, T>
Transforms all elements from the upstream publisher with a provided error-throwing closure.
func flatMap<T, P>(maxPublishers: Subscribers.Demand, (Self.Output) -> P) -> Publishers.FlatMap<P, Self>
Transforms all elements from an upstream publisher into a new publisher up to a maximum number of publishers you specify.
func mapError<E>((Self.Failure) -> E) -> Publishers.MapError<Self, E>
Converts any failure from the upstream publisher into a new error.
func replaceNil<T>(with: T) -> Publishers.Map<Self, T>
Replaces nil elements in the stream with the provided element.
func scan<T>(T, (T, Self.Output) -> T) -> Publishers.Scan<Self, T>
Transforms elements from the upstream publisher by providing the current element to a closure along with the last value returned by the closure.
func tryScan<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryScan<Self, T>
Transforms elements from the upstream publisher by providing the current element to an error-throwing closure along with the last value returned by the closure.
func setFailureType<E>(to: E.Type) -> Publishers.SetFailureType<Self, E>
Changes the failure type declared by the upstream publisher.
Available when Failure is Never.
Filtering Elements
func filter((Self.Output) -> Bool) -> Publishers.Filter<Self>
Republishes all elements that match a provided closure.
func tryFilter((Self.Output) throws -> Bool) -> Publishers.TryFilter<Self>
Republishes all elements that match a provided error-throwing closure.
func compactMap<T>((Self.Output) -> T?) -> Publishers.CompactMap<Self, T>
Calls a closure with each received element and publishes any returned optional that has a value.
func tryCompactMap<T>((Self.Output) throws -> T?) -> Publishers.TryCompactMap<Self, T>
Calls an error-throwing closure with each received element and publishes any returned optional that has a value.
func removeDuplicates() -> Publishers.RemoveDuplicates<Self>
Publishes only elements that don’t match the previous element.
Available when Output conforms to Equatable.
func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>
Publishes only elements that don’t match the previous element, as evaluated by a provided closure.
func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>
Publishes only elements that don’t match the previous element, as evaluated by a provided error-throwing closure.
func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>
Replaces an empty stream with the provided element.
func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>
Replaces any errors in the stream with the provided element.
Reducing Elements
func collect() -> Publishers.Collect<Self>
Collects all received elements, and emits a single array of the collection when the upstream publisher finishes.
func collect(Int) -> Publishers.CollectByCount<Self>
Collects up to the specified number of elements, and then emits a single array of the collection.
func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>
Collects elements by a given time-grouping strategy, and emits a single array of the collection.
func ignoreOutput() -> Publishers.IgnoreOutput<Self>
Ignores all upstream elements, but passes along the upstream publisher’s completion state (finished or failed).
func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>
Applies a closure that collects each element of a stream and publishes a final result upon completion.
func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>
Applies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.
Applying Mathematical Operations on Elements
func count() -> Publishers.Count<Self>
Publishes the number of elements received from the upstream publisher.
func max() -> Publishers.Comparison<Self>
Publishes the maximum value received from the upstream publisher, after it finishes.
Available when Output conforms to Comparable.
func max(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>
Publishes the maximum value received from the upstream publisher, using the provided ordering closure.
func tryMax(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>
Publishes the maximum value received from the upstream publisher, using the provided error-throwing closure to order the items.
func min() -> Publishers.Comparison<Self>
Publishes the minimum value received from the upstream publisher, after it finishes.
Available when Output conforms to Comparable.
func min(by: (Self.Output, Self.Output) -> Bool) -> Publishers.Comparison<Self>
Publishes the minimum value received from the upstream publisher, after it finishes.
func tryMin(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryComparison<Self>
Publishes the minimum value received from the upstream publisher, using the provided error-throwing closure to order the items.
Applying Matching Criteria to Elements
func contains(Self.Output) -> Publishers.Contains<Self>
Publishes a Boolean value upon receiving an element equal to the argument.
Available when Output conforms to Equatable.
func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>
Publishes a Boolean value upon receiving an element that satisfies the predicate closure.
func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>
Publishes a Boolean value upon receiving an element that satisfies the throwing predicate closure.
func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>
Publishes a single Boolean value that indicates whether all received elements pass a given predicate.
func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>
Publishes a single Boolean value that indicates whether all received elements pass a given error-throwing predicate.
Applying Sequence Operations to Elements
func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>
Ignores elements from the upstream publisher until it receives an element from a second publisher.
func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>
Omits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.
func dropFirst(Int) -> Publishers.Drop<Self>
Omits the specified number of elements before republishing subsequent elements.
func tryDrop(while: (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>
Omits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.
func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>
Appends a publisher’s output with the specified elements.
func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>
Prefixes a publisher’s output with the specified values.
func prefix(Int) -> Publishers.Output<Self>
Republishes elements up to the specified maximum count.
func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>
Republishes elements until another publisher emits an element.
func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>
Republishes elements while a predicate closure indicates publishing should continue.
func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>
Republishes elements while an error-throwing predicate closure indicates publishing should continue.
Selecting Specific Elements
func first() -> Publishers.First<Self>
Publishes the first element of a stream, then finishes.
func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>
Publishes the first element of a stream to satisfy a predicate closure, then finishes normally.
func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>
Publishes the first element of a stream to satisfy a throwing predicate closure, then finishes normally.
func last() -> Publishers.Last<Self>
Publishes the last element of a stream, after the stream finishes.
func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>
Publishes the last element of a stream that satisfies a predicate closure, after upstream finishes.
func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>
Publishes the last element of a stream that satisfies an error-throwing predicate closure, after the stream finishes.
func output(at: Int) -> Publishers.Output<Self>
Publishes a specific element, indicated by its index in the sequence of published elements.
func output<R>(in: R) -> Publishers.Output<Self>
Publishes elements specified by their range in the sequence of published elements.
Combining Elements from Multiple Publishers
func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>
Subscribes to an additional publisher and invokes a closure upon receiving output from either publisher.
func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>
Subscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.
func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>
Subscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.
func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>
Subscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.
func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>
Subscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.
func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>
Subscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.
func merge(with: Self) -> Publishers.MergeMany<Self>
Combines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.
func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>
Combines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>
Combines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>
Combines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>
Combines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>
Combines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>
Combines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.
func zip<P>(P) -> Publishers.Zip<Self, P>
Combines elements from another publisher and deliver pairs of elements as tuples.
func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>
Combines elements from another publisher and delivers a transformed output.
func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>
Combines elements from two other publishers and delivers groups of elements as tuples.
func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>
Combines elements from two other publishers and delivers a transformed output.
func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>
Combines elements from three other publishers and delivers groups of elements as tuples.
func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>
Combines elements from three other publishers and delivers a transformed output.
Handling Errors
func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>
Raises a fatal error when its upstream publisher fails, and otherwise republishes all received input.
func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>
Handles errors from an upstream publisher by replacing it with another publisher.
func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>
Handles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.
func retry(Int) -> Publishers.Retry<Self>
Attempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.
Controlling Timing
func measureInterval<S>(using: S, options: S.SchedulerOptions?) -> Publishers.MeasureInterval<Self, S>
Measures and emits the time interval between events received from an upstream publisher.
func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>
Publishes elements only after a specified time interval elapses between events.
func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>
Delays delivery of all output to the downstream receiver by a specified amount of time on a particular scheduler.
func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>
Publishes either the most-recent or first element published by the upstream publisher in the specified time interval.
func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>
Terminates publishing if the upstream publisher exceeds the specified time interval without producing an element.
Creating Reference-type Publishers
func share() -> Publishers.Share<Self>
Shares the output of an upstream publisher with multiple subscribers.
Encoding and Decoding
func encode<Coder>(encoder: Coder) -> Publishers.Encode<Self, Coder>
Encodes the output from upstream using a specified encoder.
Available when Output conforms to Encodable.
func decode<Item, Coder>(type: Item.Type, decoder: Coder) -> Publishers.Decode<Self, Item, Coder>
Decodes the output from the upstream using a specified decoder.
Identifying Properties with Key Paths
func map<T>(KeyPath<Self.Output, T>) -> Publishers.MapKeyPath<Self, T>
Publishes the value of a key path.
func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>
Publishes the values of two key paths as a tuple.
func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>
Publishes the values of three key paths as a tuple.
Working with Multiple Subscribers
func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>
Applies a closure to create a subject that delivers elements to subscribers.
func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>
Provides a subject to deliver elements to multiple subscribers.
Buffering Elements
func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>
Buffers elements received from an upstream publisher.
Performing Type Erasure
func eraseToAnyPublisher() -> AnyPublisher<Self.Output, Self.Failure>
Wraps this publisher with a type eraser.
Specifying Schedulers
func subscribe<S>(on: S, options: S.SchedulerOptions?) -> Publishers.SubscribeOn<Self, S>
Specifies the scheduler on which to perform subscribe, cancel, and request operations.
func receive<S>(on: S, options: S.SchedulerOptions?) -> Publishers.ReceiveOn<Self, S>
Specifies the scheduler on which to receive elements from the publisher.
Adding Explicit Connectability
func makeConnectable() -> Publishers.MakeConnectable<Self>
Creates a connectable wrapper around the publisher.
Available when Failure is Never.
Connecting Simple Subscribers
func assign<Root>(to: ReferenceWritableKeyPath<Root, Self.Output>, on: Root) -> AnyCancellable
Assigns each element from a publisher to a property on an object.
Available when Failure is Never.
func sink(receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void), receiveValue: ((Self.Output) -> Void)) -> AnyCancellable
Attaches a subscriber with closure-based behavior.
func sink(receiveValue: ((Self.Output) -> Void)) -> AnyCancellable
Attaches a subscriber with closure-based behavior to a publisher that never fails.
Available when Failure is Never.
Debugging
func breakpoint(receiveSubscription: ((Subscription) -> Bool)?, receiveOutput: ((Self.Output) -> Bool)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Bool)?) -> Publishers.Breakpoint<Self>
Raises a debugger signal when a provided closure needs to stop the process in the debugger.
func breakpointOnError() -> Publishers.Breakpoint<Self>
Raises a debugger signal upon receiving a failure.
func handleEvents(receiveSubscription: ((Subscription) -> Void)?, receiveOutput: ((Self.Output) -> Void)?, receiveCompletion: ((Subscribers.Completion<Self.Failure>) -> Void)?, receiveCancel: (() -> Void)?, receiveRequest: ((Subscribers.Demand) -> Void)?) -> Publishers.HandleEvents<Self>
Performs the specified closures when publisher events occur.
func print(String, to: (TextOutputStream)?) -> Publishers.Print<Self>
Prints log messages for all publishing events.
Default Implementations
API Reference
Publisher Implementations
Relationships
Conforms To
Publisher
See Also
Getting and Sending Events
func publisher<E>(for: E.Type, on: (EventSource)?) -> Scene.Publisher<E>
Generates a publisher for events of the specified type.
func subscribe<E>(to: E.Type, on: (EventSource)?, (E) -> Void) -> Cancellable
Receives events of the given type.
func publisher<E>(for: E.Type, on: (EventSource)?, componentType: (Component.Type)?) -> Scene.Publisher<E>
Returns a Publisher for events of the specified type in a Scene.
func subscribe<E>(to: E.Type, on: (EventSource)?, componentType: (Component.Type)?, (E) -> Void) -> Cancellable
Receive events of type E.
enum SceneEvents
Events the scene triggers.
enum AnimationEvents
Notable milestones that the framework signals during animation playback.
enum AudioEvents
Events associated with audio playback.
enum CollisionEvents
Events associated with collisions.
protocol Event
A type that can be sent as an event.
protocol EventSource
A type on which events can be published and subscribed.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Scene.Publisher
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

