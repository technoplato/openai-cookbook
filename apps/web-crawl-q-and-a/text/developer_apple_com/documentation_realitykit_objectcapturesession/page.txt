https://developer.apple.com/documentation/realitykit/objectcapturesessionSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
ObjectCaptureSession.Configuration
Structures
M
func resume()
M
func requestImageCapture()
M
func pause()
M
func finish()
M
func cancel()
S
ObjectCaptureView
Beta
S
PhotogrammetrySample
C
PhotogrammetrySession
Using object capture assets in RealityKit
Creating a Photogrammetry Command-Line App
Creating 3D objects from photographs
Capturing photographs for RealityKit Object Capture
Model Creation
Documentation
Open Menu
Swift
Class
ObjectCaptureSession
A session object that monitors and controls image capture for photogrammetry.
RealityKit
SwiftUI
iOS 17.0+ Beta
iPadOS 17.0+ Beta
@MainActor
class ObjectCaptureSession
Overview
An ObjectCaptureSession is used together with an ObjectCaptureView to present a view that assists in capturing images of an object for reconstruction of a 3D model by using a PhotogrammetrySession.
A capture session contains functions for starting and advancing the capture session through a state machine that controls the image capture process. Your app can also observe several properties of the capture session to determine the current state of the capture process.
Once a session enters the .completed state, your app can transfer the images to a Mac or use them locally on the iOS device for use in object reconstruction using PhotogrammetrySession. Model reconstruction is a separate phase which this session does not directly monitor or control.
Topics
Creating a Session
init()
Creates a new object capture session.
Checking Availability
static var isSupported: Bool
A Boolean that indicates whether the current device supports object capture sessions.
Configuring a Session
var feedback: Set<ObjectCaptureSession.Feedback>
The current set of active Feedback states.
enum Feedback
Provides information about possible problems with the capture session.
var isPaused: Bool
A Boolean value that indicates if the capture session is paused.
var state: ObjectCaptureSession.CaptureState
The current state of the capture session.
enum Tracking
A data structure that describes the current tracking state for the camera.
Monitoring the Session
enum CaptureState
State of the capture session.
enum Error
Errors associated with the top-level computation of this class.
Controlling the Session
func cancel()
Requests that the capture session be canceled.
func finish()
Requests that the capture session be stopped and all data saved.
func pause()
Pauses the automatic capture and other resource-intense algorithms.
func requestImageCapture()
Requests a manual image capture.
func resume()
Resumes object tracking algorithms after pause() is called.
Structures
struct Configuration
The configuration options for the session which are passed into the start(imagesDirectory:configuration:) call.
struct Updates
Used to provide an AsyncSequence of change events for the observable properties.
Instance Properties
var cameraTracking: ObjectCaptureSession.Tracking
The current state of ARKit camera tracking.
var cameraTrackingUpdates: ObjectCaptureSession.Updates<ObjectCaptureSession.Tracking>
The Updates AsyncSequence for the cameraTracking property.
var canRequestImageCapture: Bool
Will be true only when a call to requestImageCapture() is expected to be successful. It will be false when not in the .capturing state or if the session is too busy to currently process a new request. There is a period of time after requesting an image capture where this property will be false and a new call to requestImageCapture() will not produce a new image.
var canRequestImageCaptureUpdates: ObjectCaptureSession.Updates<Bool>
The Updates AsyncSequence for the canRequestImagecapture property.
var configuration: ObjectCaptureSession.Configuration
The read-only Configuration used to start the capture session. The configuration can be set by passing it to the start() call and it remains immutable after the session is started successfully.
var feedbackUpdates: ObjectCaptureSession.Updates<Set<ObjectCaptureSession.Feedback>>
The Updates AsyncSequence for the feedback property.
var isPausedUpdates: ObjectCaptureSession.Updates<Bool>
The Updates AsyncSequence for the isPaused property.
var maximumNumberOfInputImages: Int
The maximum number of images that can be used for on-device reconstruction.
var numberOfShotsTaken: Int
The number of shots taken in the entire capture session so far, including both automatic capture and manual capture.
var numberOfShotsTakenUpdates: ObjectCaptureSession.Updates<Int>
The Updates AsyncSequence for the numberOfShotsTaken property.
var stateUpdates: ObjectCaptureSession.Updates<ObjectCaptureSession.CaptureState>
The Updates AsyncSequence for the state property.
var userCompletedScanPass: Bool
This property starts out false at the start of a capture and will switch to true when the user has moved the device in a full circular scan pass around the bounding box of the target object and captured enough data to fill completely the capture dial.
var userCompletedScanPassUpdates: ObjectCaptureSession.Updates<Bool>
The Updates AsyncSequence for the userCompletedScanPass property.
Instance Methods
func beginNewScanPass()
Resets the state of the capture dial such that the user will need to perform another complete scan pass to fill it and generate a new event in the published property userCompletedScanPass.
func beginNewScanPassAfterFlip()
Starts the capturing of a new side of the object, to be called after the object is scanned one side and flipped.
func resetDetection() -> Bool
Moves the session state from .detecting back to .ready to reset the bounding box and prepare to select a new one with a new call to startDetecting().
func start(imagesDirectory: URL, configuration: ObjectCaptureSession.Configuration)
Starts the session with the provided output image directory and optional checkpoint directory.
func startCapturing()
Begins taking images for object capture.
func startDetecting() -> Bool
Requests that the session should start detecting the object in the center of the camera. If success, the session state will eventually transition to .detecting and switch to the bounding box selection mode UI.
Type Aliases
typealias ID
A type representing the stable identity of the entity associated with an instance.
Default Implementations
API Reference
Identifiable Implementations
Relationships
Conforms To
Identifiable
Observable
Sendable
See Also
Model Creation
Capturing photographs for RealityKit Object Capture
Take high-quality images of objects to generate 3D models.
Creating 3D objects from photographs
Construct virtual objects to use in your AR experiences.
class PhotogrammetrySession
PhotogrammetrySession controls the reconstruction process of a set of images of an object into a 3D model.
struct PhotogrammetrySample
An object that represents one image and its corresponding metadata.
struct ObjectCaptureView
A view that guides a user through capturing images for object capture.
Beta
struct ObjectCapturePointCloudView
An object that renders the current state of the ObjectCaptureSession point cloud.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is ObjectCaptureSession
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

