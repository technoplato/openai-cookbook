https://developer.apple.com/documentation/realitykit/anchoringcomponentSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
SceneUnderstandingComponent
Equatable Implementations
Component Implementations
Default Implementations
P
var trackingMode: AnchoringComponent.TrackingMode
Beta
Instance Properties
M
init(AnchoringComponent.Target, trackingMode: AnchoringComponent.TrackingMode)
S
AccessibilityComponent
Beta
Essential components
E
ComponentEvents
P
static var componentName: String
Using a Component
M
static func registerComponent()
Registering a Component Type
r
P
Component
Documentation
Open Menu
Swift
Structure
AnchoringComponent
A description of how virtual content can be anchored to the real world.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 14.0+
visionOS 1.0+ Beta
struct AnchoringComponent
Topics
Creating the Anchor Component
init(AnchoringComponent.Target)
Creates an anchoring component for a given target.
init(ARAnchor)
Creates an anchoring component with the given AR anchor.
Setting a Target
let target: AnchoringComponent.Target
The kind of real world object to which the anchor entity should anchor.
enum Target
The kinds of real world objects to which an anchor entity can be tethered.
Registering a Component Type
static func registerComponent()
Registers a new component type.
Comparing Anchoring Components
static func == (AnchoringComponent, AnchoringComponent) -> Bool
Indicates whether two anchoring components are equal.
static func != (Self, Self) -> Bool
Indicates whether two anchoring components are not equal.
Structures
struct TrackingMode
AnchoringMode decides how many times the AnchorEntity transform will be computed
Beta
Initializers
init(AnchoringComponent.Target, trackingMode: AnchoringComponent.TrackingMode)
Beta
Instance Properties
var trackingMode: AnchoringComponent.TrackingMode
Beta
Default Implementations
API Reference
Component Implementations
API Reference
Equatable Implementations
Relationships
Conforms To
Component
Equatable
See Also
Essential components
struct AccessibilityComponent
Beta
struct SceneUnderstandingComponent
A component that maps features of the physical environment.
struct AdaptiveResolutionComponent
Allows an entity to change the resolution of the resources it uses according to its relevance to the user.
Beta
struct BodyTrackingComponent
A component for tracking people in an AR session.
struct OpacityComponent
Beta
struct Transform
A component that defines the scale, rotation, and translation of an entity.
protocol TransientComponent
An interface for components that aren’t saved to file or cloned.
struct SynchronizationComponent
A component that synchronizes an entity between processes and networked applications.
struct VideoPlayerComponent
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is AnchoringComponent
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

