https://developer.apple.com/documentation/createml/mldatatable/rows-swift.struct

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
M
func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
M
func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?
M
func lastIndex(of: Self.Element) -> Self.Index?
M
func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?
M
func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?
M
func firstIndex(of: Self.Element) -> Self.Index?
P
var rows: MLDataTable.Rows
Getting Information About a Data Table’s Rows
Data Table Derivation Operations
Generating New Data Tables
M
func append(contentsOf: MLDataTable)
Appending to a Data Table
M
func removeColumn(named: String)
Removing Columns
Documentation
Open Menu
Swift
Structure
MLDataTable.Rows
A collection of rows in a data table.
Create ML
CreateML
iOS 15.0+
iPadOS 15.0+
macOS 10.14+
Mac Catalyst 15.0+
tvOS 16.0+
visionOS 1.0+ Beta
struct Rows
Topics
Inspecting a Row Collection
var isEmpty: Bool
A Boolean value indicating whether the collection is empty.
var count: Int
The number of elements in the collection.
Accessing Rows
subscript(Int) -> MLDataTable.Rows.Element
Subscript by index. This returns a row in the data table.
var first: Self.Element?
The first element of the collection.
var last: Self.Element?
The last element of the collection.
func randomElement() -> Self.Element?
Returns a random element of the collection.
func randomElement<T>(using: inout T) -> Self.Element?
Returns a random element of the collection, using the given generator as a source for randomness.
Finding Rows
func contains(Self.Element) -> Bool
Returns a Boolean value indicating whether the sequence contains the given element.
Available when Element conforms to Equatable.
func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.
func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.
func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?
Returns the first element of the sequence that satisfies the given predicate.
func firstIndex(of: Self.Element) -> Self.Index?
Returns the first index where the specified value appears in the collection.
Available when Element conforms to Equatable.
func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?
Returns the first index in which an element of the collection satisfies the given predicate.
func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?
Returns the last element of the sequence that satisfies the given predicate.
func lastIndex(of: Self.Element) -> Self.Index?
Returns the last index where the specified value appears in the collection.
Available when Element conforms to Equatable.
func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?
Returns the index of the last element in the collection that matches the given predicate.
func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
Returns the minimum element in the sequence, using the given predicate as the comparison between elements.
func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
Returns the maximum element in the sequence, using the given predicate as the comparison between elements.
Selecting Rows
func prefix(Int) -> Self.SubSequence
Returns a subsequence, up to the specified maximum length, containing the initial elements of the collection.
func prefix(through: Self.Index) -> Self.SubSequence
Returns a subsequence from the start of the collection through the specified position.
func prefix(upTo: Self.Index) -> Self.SubSequence
Returns a subsequence from the start of the collection up to, but not including, the specified position.
func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence
Returns a subsequence containing the initial elements until predicate returns false and skipping the remaining elements.
func suffix(Int) -> Self.SubSequence
Returns a subsequence, up to the given maximum length, containing the final elements of the collection.
func suffix(from: Self.Index) -> Self.SubSequence
Returns a subsequence from the specified position to the end of the collection.
Excluding Rows
func dropFirst(Int) -> Self.SubSequence
Returns a subsequence containing all but the given number of initial elements.
func dropLast(Int) -> Self.SubSequence
Returns a subsequence containing all but the specified number of final elements.
func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence
Returns a subsequence by skipping elements while predicate returns true and returning the remaining elements.
Transforming a Row Collection
func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]
Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.
func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result
Returns the result of combining the elements of the sequence using the given closure.
var lazy: LazySequence<Self>
A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.
Iterating Over a Row Collection’s Rows
func forEach((Self.Element) throws -> Void) rethrows
Calls the given closure on each element in the sequence in the same order as a for-in loop.
func enumerated() -> EnumeratedSequence<Self>
Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.
func makeIterator() -> IndexingIterator<Self>
Returns an iterator over the elements of the collection.
Available when Iterator is IndexingIterator<Self>.
Reordering a Row Collection’s Rows
func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]
Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.
func reversed() -> ReversedCollection<Self>
Returns a view presenting the elements of the collection in reverse order.
func shuffled() -> [Self.Element]
Returns the elements of the sequence, shuffled.
func shuffled<T>(using: inout T) -> [Self.Element]
Returns the elements of the sequence, shuffled using the given generator as a source for randomness.
Splitting and Joining Rows
func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]
Returns the longest possible subsequences of the collection, in order, around elements equal to the given element.
Available when Element conforms to Equatable.
func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]
Returns the longest possible subsequences of the collection, in order, that don’t contain elements satisfying the given predicate.
func joined<Separator>(separator: Separator) -> JoinedSequence<Self>
Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.
Comparing Row Collections
func elementsEqual<OtherSequence>(OtherSequence) -> Bool
Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.
Available when Element conforms to Equatable.
func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.
func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool
Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.
Available when Element conforms to Equatable.
func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.
func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.
Manipulating Indices
var startIndex: Int
The position of the first row in a nonempty DataTable. If the DataTable is empty, startIndex is equal to endIndex.
var endIndex: Int
The DataTable’s “past the end” position—that is, the position one greater than the last valid subscript argument.
func formIndex(after: inout Self.Index)
Replaces the given index with its successor.
func formIndex(before: inout Self.Index)
Replaces the given index with its predecessor.
func formIndex(inout Self.Index, offsetBy: Int)
Offsets the given index by the specified distance.
func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?
Returns an index that is the specified distance from the given index, unless that distance is beyond a given limiting index.
func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool
Offsets the given index by the specified distance, or so that it equals the given limiting index.
Describing a Row Collection
var description: String
A textual representation of this instance.
var debugDescription: String
A textual representation of this instance, suitable for debugging.
var playgroundDescription: Any
A custom playground description for this instance.
Supporting Types
struct Row
A row of untyped values in a data table.
typealias Element
The Element of a DataTable is a Row. This is represented as a Dictionary-like type containing all Column names and their corresponding values.
Default Implementations
API Reference
BidirectionalCollection Implementations
API Reference
Collection Implementations
API Reference
CustomDebugStringConvertible Implementations
API Reference
CustomPlaygroundDisplayConvertible Implementations
API Reference
CustomStringConvertible Implementations
API Reference
RandomAccessCollection Implementations
API Reference
Sequence Implementations
Relationships
Conforms To
BidirectionalCollection
Collection
CustomDebugStringConvertible
CustomPlaygroundDisplayConvertible
CustomStringConvertible
RandomAccessCollection
Sendable
Sequence
See Also
Getting Information About a Data Table’s Rows
var rows: MLDataTable.Rows
The rows of data in the table.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLDataTable.Rows
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

