https://developer.apple.com/documentation/realitykit/loadrequest/combinelatest(_:_:)-7ey7fSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>
M
func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>
Handling Errors
M
func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>
M
func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>
M
func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>
M
func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>
func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>
func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>
func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>
Combining Elements from Multiple Publishers
M
func output<R>(in: R) -> Publishers.Output<Self>
M
func output(at: Int) -> Publishers.Output<Self>
M
func tryLast(where: (Self.Output) throws -> Bool) -> Publishers.TryLastWhere<Self>
M
func last(where: (Self.Output) -> Bool) -> Publishers.LastWhere<Self>
M
func last() -> Publishers.Last<Self>
M
func tryFirst(where: (Self.Output) throws -> Bool) -> Publishers.TryFirstWhere<Self>
M
func first(where: (Self.Output) -> Bool) -> Publishers.FirstWhere<Self>
Documentation
Open Menu
Swift
Instance Method
combineLatest(_:_:)
Subscribes to an additional publisher and invokes a closure upon receiving output from either publisher.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func combineLatest<P, T>(
    _ other: P,
    _ transform: @escaping (Self.Output, P.Output) -> T
) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T> where P : Publisher, Self.Failure == P.Failure
Parameters
other
Another publisher to combine with this one.
transform
A closure that receives the most-recent value from each publisher and returns a new value to publish.
Return Value
A publisher that receives and combines elements from this and another publisher.
Discussion
Use combineLatest<P,T>(_:) to combine the current and one additional publisher and transform them using a closure you specify to publish a new value to the downstream.
Tip
The combined publisher doesn’t produce elements until each of its upstream publishers publishes at least one element.
The combined publisher passes through any requests to all upstream publishers. However, it still obeys the demand-fulfilling rule of only sending the request amount downstream. If the demand isn’t .unlimited, it drops values from upstream publishers. It implements this by using a buffer size of 1 for each upstream, and holds the most-recent value in each buffer.
In the example below, combineLatest() receives the most-recent values published by the two publishers, it multiplies them together, and republishes the result:
let pub1 = PassthroughSubject<Int, Never>()
let pub2 = PassthroughSubject<Int, Never>()


cancellable = pub1
    .combineLatest(pub2) { (first, second) in
        return first * second
    }
    .sink { print("Result: \($0).") }


pub1.send(1)
pub1.send(2)
pub2.send(2)
pub1.send(9)
pub1.send(3)
pub2.send(12)
pub1.send(13)
//
// Prints:
//Result: 4.    (pub1 latest = 2, pub2 latest = 2)
//Result: 18.   (pub1 latest = 9, pub2 latest = 2)
//Result: 6.    (pub1 latest = 3, pub2 latest = 2)
//Result: 36.   (pub1 latest = 3, pub2 latest = 12)
//Result: 156.  (pub1 latest = 13, pub2 latest = 12)
All upstream publishers need to finish for this publisher to finish. If an upstream publisher never publishes a value, this publisher never finishes. If any of the combined publishers terminates with a failure, this publisher also fails.
See Also
Combining Elements from Multiple Publishers
func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>
Subscribes to an additional publisher and publishes a tuple upon receiving output from either publisher.
func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>
Subscribes to two additional publishers and invokes a closure upon receiving output from any of the publishers.
func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>
Subscribes to two additional publishers and publishes a tuple upon receiving output from any of the publishers.
func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>
Subscribes to three additional publishers and invokes a closure upon receiving output from any of the publishers.
func combineLatest<P, Q, R>(P, Q, R) -> Publishers.CombineLatest4<Self, P, Q, R>
Subscribes to three additional publishers and publishes a tuple upon receiving output from any of the publishers.
func merge(with: Self) -> Publishers.MergeMany<Self>
Combines elements from this publisher with those from another publisher of the same type, delivering an interleaved sequence of elements.
func merge<B, C>(with: B, C) -> Publishers.Merge3<Self, B, C>
Combines elements from this publisher with those from two other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D>(with: B, C, D) -> Publishers.Merge4<Self, B, C, D>
Combines elements from this publisher with those from three other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D, E>(with: B, C, D, E) -> Publishers.Merge5<Self, B, C, D, E>
Combines elements from this publisher with those from four other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D, E, F>(with: B, C, D, E, F) -> Publishers.Merge6<Self, B, C, D, E, F>
Combines elements from this publisher with those from five other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D, E, F, G>(with: B, C, D, E, F, G) -> Publishers.Merge7<Self, B, C, D, E, F, G>
Combines elements from this publisher with those from six other publishers, delivering an interleaved sequence of elements.
func merge<B, C, D, E, F, G, H>(with: B, C, D, E, F, G, H) -> Publishers.Merge8<Self, B, C, D, E, F, G, H>
Combines elements from this publisher with those from seven other publishers, delivering an interleaved sequence of elements.
func zip<P>(P) -> Publishers.Zip<Self, P>
Combines elements from another publisher and deliver pairs of elements as tuples.
func zip<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.Zip<Self, P>, T>
Combines elements from another publisher and delivers a transformed output.
func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>
Combines elements from two other publishers and delivers groups of elements as tuples.
func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>
Combines elements from two other publishers and delivers a transformed output.
func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>
Combines elements from three other publishers and delivers groups of elements as tuples.
func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>
Combines elements from three other publishers and delivers a transformed output.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is combineLatest(_:_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

