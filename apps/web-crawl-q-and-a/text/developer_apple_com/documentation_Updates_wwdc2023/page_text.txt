Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Creating views for widgets, Live Activities, and watch complications
Making network requests in a widget extension
Creating a widget extension
Emoji Rangers: Supporting Live Activities, interactivity, and animations
Developing a WidgetKit strategy
WidgetKit
Widgets, Live Activities, and watchOS complications
Documentation
Open Menu
Swift
WWDC23
Highlights of new technologies introduced at WWDC23.
Overview
Browse a selection of documentation for new technologies, frameworks, and APIs introduced at WWDC23. Many existing frameworks have added significant functionality, and you’ll find new ways to enhance your apps targeting the latest platform release.
For a comprehensive list of downloadable sample code projects, see WWDC23 Sample Code. For the latest design guidance localized in multiple languages, see Human Interface Guidelines > What’s New.
Topics
visionOS
visionOS is a brand new platform that allows you to build immersive apps and games for spatial computing that run on Apple Vision Pro. Create new apps using SwiftUI to take full advantage of the spectrum of immersion available in visionOS. If you have an existing iPad or iPhone app, add the visionOS destination to your app’s target to gain access to the standard system appearance, and add platform-specific features to create a compelling experience.
visionOS
Create a new universe of apps and games for Apple Vision Pro.
Hello World
Use windows, volumes, and immersive spaces to teach people about the Earth.
Creating your first visionOS app
Build a new visionOS app using SwiftUI and add platform-specific features.
Checking whether your existing app is compatible with visionOS
Determine whether your existing iOS or iPadOS app runs as is in visionOS or requires modifications to handle platform differences.
Designing for visionOS
When people wear Apple Vision Pro, they enter an infinite 3D space where they can engage with your app or game while staying connected to their surroundings.
Adding 3D content to your app
Add depth and dimension to your visionOS app and discover how to incorporate your app’s content into a person’s surroundings.
Bringing your existing apps to visionOS
Build a version of your iPadOS or iOS app using the visionOS SDK, and update your code for platform differences.
SwiftData
Use SwiftData with SwiftUI to create a seamless connection from your data model to user interface. Like SwiftUI, SwiftData focuses entirely on code, with no external file formats to manage. Instead, it uses Swift’s new macro system to offer a streamlined API. SwiftData uses the Codable protocol to understand structures and enumerations, so you can model your data with the tools you already know. These types are fully modeled in the underlying data store, enabling you to perform fast and efficient queries, even on complex structured data.
SwiftData
Write your model code declaratively to add managed persistence and automatic iCloud sync.
Beta
Preserving your app’s model data across launches
Describe your model classes to SwiftData using the framework’s macros, and store instances of those models so they exist beyond the app’s runtime.
Building a document-based app using SwiftData
Code along with the WWDC presenter to transform an app with SwiftData.
Adopting SwiftData for a Core Data app
Persist data in your app intuitively with the Swift native persistence framework.
Widgets, Live Activities, and watchOS complications
Bring your widgets to new places like the macOS desktop, Standby, and the Lock Screen on iPad. And now many of your widgets also gain new interactive abilities using Button and Toggle. Support Live Activities to keep users updated with the latest data from your app. Add animations in your widget to respond to user action or data changes.
WidgetKit
Extend the reach of your app by creating widgets, watch complications, and Live Activities.
Developing a WidgetKit strategy
Explore features, tasks, related frameworks, and constraints as you make a plan to implement widgets, watch complications, and Live Activities.
Emoji Rangers: Supporting Live Activities, interactivity, and animations
Offer Live Activities, animate data updates, and add interactivity to widgets.
Creating a widget extension
Display your app’s content in a convenient, informative widget on various devices.
Making network requests in a widget extension
Update your widget with new information you fetch with a network request.
Creating views for widgets, Live Activities, and watch complications
Implement glanceable views with WidgetKit and SwiftUI.
Creating accessory widgets and watch complications
Support accessory widgets that appear on the Lock Screen and as complications on Apple Watch.
Supporting additional widget sizes
Offer widgets in additional contexts by adding support for various widget sizes.
Preparing widgets for additional platforms, contexts, and appearances
Create widgets that support additional platforms and adapt to their context.
Adding interactivity to widgets and Live Activities
Include buttons or toggles in a widget or Live Activity to offer app functionality without launching the app.
Animating data updates in widgets and Live Activities
Use SwiftUI animations to indicate data updates in your widgets and Live Activities.
Linking to specific app scenes from your widget or Live Activity
Add deep links to your widgets and Live Activities that enable people to open a specific scene in your app.
Making a configurable widget
Give people the option to customize their widgets by adding a custom app intent to your project.
Migrating widgets from SiriKit Intents to App Intents
Configure your widgets for backward compatibility.
Keeping a widget up to date
Plan your widget’s timeline to show timely, relevant information using dynamic views, and update the timeline when things change.
Increasing the visibility of widgets in Smart Stacks
Donate intents and indicate relevance to automatically show your widget in Smart Stacks when it has useful information to display.
ActivityKit
Share live updates from your app as Live Activities in the Dynamic Island and on the Lock Screen.
Displaying live data with Live Activities
Offer Live Activities that display your app’s data in the Dynamic Island and on the Lock Screen and offer quick interactions.
SwiftUI
Use the ever-expanding SwiftUI API in your apps, with greater control over scroll and focus behavior, and more. Build sophisticated animations with advanced new capabilities, and even automatically match the speed of your animation to the velocity of user gestures. Share more SwiftUI code with your watchOS app using new TabView, ToolbarItem, and NavigationSplitView. And use @Observable with SwiftUI to automatically detect and update only the fields of your views that people access.
SwiftUI updates
Learn about important changes to SwiftUI.
Observation
Make responsive apps that update the presentation when underlying data changes.
Beta
Backyard Birds: Building an app with SwiftData and widgets
Create an app with persistent data, interactive widgets, and an all new in-app purchase experience.
struct ContentUnavailableView
An interface, consisting of a label and additional content, that you display when the content of your app is unavailable to users.
Beta
protocol CustomAnimation
A type that defines how an animatable value changes over time.
Beta
struct PhaseAnimator
A container that animates its content by automatically cycling through a collection of phases that you provide, each defining a discrete step within an animation.
Beta
struct TableColumnCustomization
A representation of the state of the columns in a table.
Beta
struct OutlineGroup
A structure that computes views and disclosure groups on demand from an underlying collection of tree-structured, identified data.
struct SectorMark
A sector of a pie or donut chart, which shows how individual categories make up a meaningful total.
Beta
Xcode and developer tools
With the latest Xcode release, you can verify the origin of the frameworks your app depends upon, and add metadata to your own frameworks to ensure other developers about your privacy policies. Learn to install and use on-demand simulators. Enhance your Xcode Cloud build workflows to automate packaging up your app for distribution. And the new strings catalog feature right within Xcode gives even more control over how your UI text is handled in locales around the globe.
Xcode updates
Learn about important changes to Xcode.
Installing and managing Simulator runtimes
Keep the Simulator platforms and versions you need to run and test your apps up to date in Xcode.
Localizing and varying text with a string catalog
Use a string catalog to translate text, handle plurals, and vary the text your app displays on specific devices.
Capabilities
Enable services that Apple provides, such as In-App Purchase, Push Notifications, Apple Pay, iCloud, and many others.
Verifying the origin of your XCFrameworks
Discover who signed a framework, and take action when that changes.
Configuring your project to use mergeable libraries
Use mergeable dynamic libraries to get app launch times similar to static linking in release builds, without losing dynamically linked build times in debug builds.
Describing data use in privacy manifests
Declare the data collected by your app or by third-party SDKs.
Distributing your app for beta testing and releases
Release your app to beta testers and users.
Creating a workflow that builds your app for distribution
Configure a workflow to build and sign your app for distribution to testers with TestFlight, in the App Store, or as a notarized app.
Debugging
Identify and address issues in your app using the Xcode debugger, Xcode Organizer, Metal Debugger, and Instruments.
watchOS
Add new capabilities to your watchOS apps, and update your interface to correspond to the latest interface guidance for watchOS 10. Adopt WidgetKit features with Apple Watch-specific experiences, or use WorkoutKit to build apps that support better health.
watchOS updates
Learn about important changes to watchOS.
Updating your app and widgets for watchOS 10
Integrate SwiftUI elements and watch-specific features, and build widgets for the Smart Stack.
Designing for watchOS
When people glance at their Apple Watch, they know they can access essential information and perform simple, timely tasks whether they’re stationary or in motion.
Increasing the visibility of widgets in Smart Stacks
Donate intents and indicate relevance to automatically show your widget in Smart Stacks when it has useful information to display.
WorkoutKit
Create, preview, and sync workout compositions to the Workout app.
Beta
Messages apps and stickers
Give your Messages app and stickers more power than ever before, with stickers available from the keyboard picker in apps all across the system.
Messages
Create app extensions that allow users to send text, stickers, media files, and interactive messages.
Adding Sticker packs and iMessage apps to the system Stickers app, Messages camera, and FaceTime
Enable your Sticker pack or iMessage app in the media context.
enum MSMessagesAppPresentationContext
Presentation contexts describing where your iMessage app appears.
UIKit
Simplify spring animations by providing duration and bounce parameters for the new view method, animate. Take advantage of other new UI controls and behaviors, including improvements to the presentation of UIStatusBar using the new default option.
UIKit updates
Learn about important changes to UIKit.
CFBundleDocumentTypes
The document types supported by the bundle.
class func animate(springDuration: TimeInterval, bounce: CGFloat, initialSpringVelocity: CGFloat, delay: TimeInterval, options: UIView.AnimationOptions, animations: () -> Void, completion: ((Bool) -> Void)?)
Animates changes to one or more views using a spring animation with the specified duration, bounce, initial velocity, delay, options, and completion handler.
func viewIsAppearing(Bool)
Notifies the view controller that the system is adding the view controller’s view to a view hierarchy.
struct UIContentUnavailableConfiguration
A content configuration for a content-unavailable view.
CFBundleDocumentTypes
The document types supported by the bundle.
var allowsKeyboardScrolling: Bool
A Boolean value that determines whether the scroll view allows scrolling its content with hardware keyboard input.
Beta
case `default`
A style that automatically selects an appearance for the status bar and updates it dynamically to maintain contrast with the content below it.
Audio, video, and media
Build entirely new Apple TV experiences with access to the Continuity Camera, enabling video conferencing and other types of apps on the biggest screen in your home or office. Use the Cinematic framework to add support for editing movies filmed in Cinematic mode from the Camera app.
Supporting Continuity Camera in your tvOS app
Capture high-quality photos, video, and audio in your Apple TV app by connecting an iPhone or iPad as a continuity device.
Cinematic
Integrate playback and editing of assets captured in Cinematic mode into your app.
Beta
SensitiveContentAnalysis
Provide a safer experience in your app by detecting and alerting users to nudity in images and videos before displaying them onscreen.
Beta
class AVContinuityDevicePickerViewController
A view controller that provides an interface to a person so they can select and connect a continuity device to the system.
Beta
Metal
With Metal debugging and performance analysis tools, you can make your apps and games perform their best.
Metal Debugger
Debug and profile your Metal workload with a GPU trace.
Metal developer workflows
Locate and fix issues related to your app’s use of the Metal API and GPU functions.
MetalFX
Boost your Metal app’s performance by upscaling lower-resolution content to save GPU time.
Maps and location
MapKit for SwiftUI
Adopting live updates in Core Location
Simplify location delivery using asynchronous events in Swift.
Monitoring location changes with Core Location
Define boundaries and act on user location updates.
Core Location
Obtain the geographic location and orientation of a device.
App Store and distribution
StoreKit
Support in-app purchases and interactions with the App Store.
App Store Server API
Manage your customers’ App Store transactions from your server.
App Store Server Notifications changelog
Learn about changes to the App Store Server Notifications service.
App Store Connect API Release Notes
Learn about new features and updates in the App Store Connect API.
Security and privacy
Improve your app and website security, while protecting your user’s privacy, using the latest SDK features. Autofill password fields to easily employ passkeys, as well as saved passwords. And interact with the user’s calendar store using the EKEventStore API.
class ASCredentialProviderViewController
A view controller that a password manager app uses to extend AutoFill.
Accessing files from the macOS App Sandbox
Read and write documents and supporting files while maintaining security protection.
Accessing the event store
Request access to a person’s calendar data through the event store.
enum HPKE
A container for hybrid public key encryption (HPKE) operations.
Beta
Extensions and XPC
Use ExtensionKit for macOS, and now for your iOS and iPadOS apps, to create extensions that expose a secure method for other apps to interact and extend your app. And a new Swift-specific API for XPC can make your code even easier to manage.
XPC updates
Learn about important changes to XPC.
class XPCListener
A type that performs tasks for clients across process boundaries.
class XPCSession
A type that sends messages to a server process.
ExtensionKit
Create executable bundles to extend the functionality of other apps by presenting a user interface.
ExtensionFoundation
Create executable bundles to extend the functionality of other apps.
Group activities and sharing
Use a GroupSessionJournal object to transfer files and other data objects between participants of a shared activity.
class GroupSessionJournal
An object that manages file and data transfers between participants joined in a group session.
Beta
Drawing content in a group session
Invite your friends to draw on a shared canvas while on a FaceTime call.
GroupActivities
Create app-specific activities your users can share and experience together.
Machine learning
Creating a multi-label image classifier
Train a machine learning model to assign multiple labels to an image.
Augmenting images to expand your training data
Improve your model by using transformed versions of your training images.
Creating an Image Classifier Model
Train a machine learning model to classify images, and add it to your Core ML app.
VisionKit
Identify and extract information in the environment using the device’s camera, or in images that your app displays.
Health
Use HealthKit to securely and privately store user health data on their device, with new support for iPadOS.
HealthKit updates
Learn about important changes to HealthKit.
Apple Pay and Wallet
ProximityReader
Read contactless physical and digital wallet cards using your iPhone.
Checking IDs with Tap to Present ID on iPhone
Read and verify mobile driver’s license information without any additional hardware.
Generating reader tokens for Tap to Present ID on iPhone
Configure your server to generate reader tokens to prepare a device for mobile document reading.
Adding Tap to Present ID on iPhone to your app
Configure and test Tap to Present ID on iPhone support in your app for reading mobile documents.
struct PayLaterView
A view that displays the Apple Pay Later visual merchandising widget.
Hardware and virtual machines
SensorKit
Retrieve data and derived metrics from sensors on an iPhone, or paired Apple Watch.
DockKit
Interact with accessories that track subjects on camera as they move around.
Beta
Virtualization
Create virtual machines and run macOS and Linux-based operating systems.
Screen capture
ScreenCaptureKit updates
Learn about important changes to ScreenCaptureKit.
Symbols
Symbols
Apply universal animations to symbol-based images.
Beta
See Also
WWDC
WWDC22
Highlights of new technologies introduced at WWDC22.
WWDC21
Highlights of new technologies introduced at WWDC21.
Current page is WWDC23
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

