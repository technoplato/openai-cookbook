https://developer.apple.com/documentation/realitykit/loadrequest/retry(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Performing Type Erasure
M
func buffer(size: Int, prefetch: Publishers.PrefetchStrategy, whenFull: Publishers.BufferingStrategy<Self.Failure>) -> Publishers.Buffer<Self>
Buffering Elements
M
func multicast<S>(subject: S) -> Publishers.Multicast<Self, S>
M
func multicast<S>(() -> S) -> Publishers.Multicast<Self, S>
Working with Multiple Subscribers
M
func map<T0, T1, T2>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>, KeyPath<Self.Output, T2>) -> Publishers.MapKeyPath3<Self, T0, T1, T2>
func map<T0, T1>(KeyPath<Self.Output, T0>, KeyPath<Self.Output, T1>) -> Publishers.MapKeyPath2<Self, T0, T1>
func timeout<S>(S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?, customError: (() -> Self.Failure)?) -> Publishers.Timeout<Self, S>
func throttle<S>(for: S.SchedulerTimeType.Stride, scheduler: S, latest: Bool) -> Publishers.Throttle<Self, S>
func delay<S>(for: S.SchedulerTimeType.Stride, tolerance: S.SchedulerTimeType.Stride?, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Delay<Self, S>
func debounce<S>(for: S.SchedulerTimeType.Stride, scheduler: S, options: S.SchedulerOptions?) -> Publishers.Debounce<Self, S>
M
func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>
M
func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>
M
func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>
Handling Errors
M
func zip<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.Zip4<Self, P, Q, R>, T>
M
func zip<P, Q, R>(P, Q, R) -> Publishers.Zip4<Self, P, Q, R>
M
func zip<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.Zip3<Self, P, Q>, T>
M
func zip<P, Q>(P, Q) -> Publishers.Zip3<Self, P, Q>
Documentation
Open Menu
Swift
Instance Method
retry(_:)
Attempts to recreate a failed subscription with the upstream publisher up to the number of times you specify.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func retry(_ retries: Int) -> Publishers.Retry<Self>
Parameters
retries
The number of times to attempt to recreate the subscription.
Return Value
A publisher that attempts to recreate its subscription to a failed upstream publisher.
Discussion
Use Publisher/retry(_:) to try a connecting to an upstream publisher after a failed connection attempt.
In the example below, a URLSession.DataTaskPublisher attempts to connect to a remote URL. If the connection attempt succeeds, it publishes the remote service’s HTML to the downstream publisher and completes normally. Otherwise, the retry operator attempts to reestablish the connection. If after three attempts the publisher still can’t connect to the remote URL, the Publisher/catch(_:) operator replaces the error with a new publisher that publishes a “connection timed out” HTML page. After the downstream subscriber receives the timed out message, the stream completes normally.
struct WebSiteData: Codable {
    var rawHTML: String
}


let myURL = URL(string: "https://www.example.com")


cancellable = URLSession.shared.dataTaskPublisher(for: myURL!)
    .retry(3)
    .map({ (page) -> WebSiteData in
        return WebSiteData(rawHTML: String(decoding: page.data, as: UTF8.self))
    })
    .catch { error in
        return Just(WebSiteData(rawHTML: "<HTML>Unable to load page - timed out.</HTML>"))
}
.sink(receiveCompletion: { print ("completion: \($0)") },
      receiveValue: { print ("value: \($0)") }
 )


// Prints: The HTML content from the remote URL upon a successful connection,
//         or returns "<HTML>Unable to load page - timed out.</HTML>" if the number of retries exceeds the specified value.
After exceeding the specified number of retries, the publisher passes the failure to the downstream receiver.
See Also
Handling Errors
func assertNoFailure(String, file: StaticString, line: UInt) -> Publishers.AssertNoFailure<Self>
Raises a fatal error when its upstream publisher fails, and otherwise republishes all received input.
func `catch`<P>((Self.Failure) -> P) -> Publishers.Catch<Self, P>
Handles errors from an upstream publisher by replacing it with another publisher.
func tryCatch<P>((Self.Failure) throws -> P) -> Publishers.TryCatch<Self, P>
Handles errors from an upstream publisher by either replacing it with another publisher or throwing a new error.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is retry(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

