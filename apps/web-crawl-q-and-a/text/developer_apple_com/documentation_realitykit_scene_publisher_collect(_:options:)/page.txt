https://developer.apple.com/documentation/realitykit/scene/publisher/collect(_:options:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func dropFirst(Int) -> Publishers.Drop<Self>
M
func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>
M
func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>
Applying Sequence Operations to Elements
M
func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>
M
func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>
M
func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>
func collect<S>(Publishers.TimeGroupingStrategy<S>, options: S.SchedulerOptions?) -> Publishers.CollectByTime<Self, S>
M
func collect(Int) -> Publishers.CollectByCount<Self>
M
func collect() -> Publishers.Collect<Self>
Reducing Elements
M
func replaceError(with: Self.Output) -> Publishers.ReplaceError<Self>
M
func replaceEmpty(with: Self.Output) -> Publishers.ReplaceEmpty<Self>
M
func tryRemoveDuplicates(by: (Self.Output, Self.Output) throws -> Bool) -> Publishers.TryRemoveDuplicates<Self>
M
func removeDuplicates(by: (Self.Output, Self.Output) -> Bool) -> Publishers.RemoveDuplicates<Self>
M
func removeDuplicates() -> Publishers.RemoveDuplicates<Self>
Documentation
Open Menu
Swift
Instance Method
collect(_:options:)
Collects elements by a given time-grouping strategy, and emits a single array of the collection.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func collect<S>(
    _ strategy: Publishers.TimeGroupingStrategy<S>,
    options: S.SchedulerOptions? = nil
) -> Publishers.CollectByTime<Self, S> where S : Scheduler
Parameters
strategy
The timing group strategy used by the operator to collect and publish elements.
options
Scheduler options to use for the strategy.
Return Value
A publisher that collects elements by a given strategy, and emits a single array of the collection.
Discussion
Use collect(_:options:) to emit arrays of elements on a schedule specified by a Scheduler and Stride that you provide. At the end of each scheduled interval, the publisher sends an array that contains the items it collected. If the upstream publisher finishes before filling the buffer, the publisher sends an array that contains items it received. This may be fewer than the number of elements specified in the requested Stride.
If the upstream publisher fails with an error, this publisher forwards the error to the downstream receiver instead of sending its output.
The example above collects timestamps generated on a one-second Timer in groups (Stride) of five.
let sub = Timer.publish(every: 1, on: .main, in: .default)
    .autoconnect()
    .collect(.byTime(RunLoop.main, .seconds(5)))
    .sink { print("\($0)", terminator: "\n\n") }


// Prints: "[2020-01-24 00:54:46 +0000, 2020-01-24 00:54:47 +0000,
//          2020-01-24 00:54:48 +0000, 2020-01-24 00:54:49 +0000,
//          2020-01-24 00:54:50 +0000]"
Note
When this publisher receives a request for .max(n) elements, it requests .max(count * n) from the upstream publisher.
See Also
Reducing Elements
func collect() -> Publishers.Collect<Self>
Collects all received elements, and emits a single array of the collection when the upstream publisher finishes.
func collect(Int) -> Publishers.CollectByCount<Self>
Collects up to the specified number of elements, and then emits a single array of the collection.
func ignoreOutput() -> Publishers.IgnoreOutput<Self>
Ignores all upstream elements, but passes along the upstream publisher’s completion state (finished or failed).
func reduce<T>(T, (T, Self.Output) -> T) -> Publishers.Reduce<Self, T>
Applies a closure that collects each element of a stream and publishes a final result upon completion.
func tryReduce<T>(T, (T, Self.Output) throws -> T) -> Publishers.TryReduce<Self, T>
Applies an error-throwing closure that collects each element of a stream and publishes a final result upon completion.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is collect(_:options:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

