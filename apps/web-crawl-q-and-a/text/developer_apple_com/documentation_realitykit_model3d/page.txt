https://developer.apple.com/documentation/realitykit/model3dSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Understanding RealityKit’s modular architecture
Entity Component System
r
P
RealityCoordinateSpaceConverting
Beta
S
SceneRealityCoordinateSpace
Beta
C
RealityRenderer
Beta
S
RealityView
Beta
View Implementations
init<Model, Placeholder>(named: String, bundle: Bundle?, content: (ResolvedModel3D) -> Model, placeholder: () -> Placeholder)
Documentation
Open Menu
Swift
Structure
Model3D
A view that asynchronously loads and displays a 3D model.
RealityKit
SwiftUI
visionOS 1.0+ Beta
struct Model3D<Content> where Content : View
Overview
Use Model3D to embed a 3D model from a USD file or Reality file in your SwiftUI app.
You can use methods on the ResolvedModel3D type as well as standard view modifiers to adjust the size of the model to fit your app’s interface. Here, the resizable(_:) method scales the model to fit the current view. Then, the aspectRatio(_:contentMode:) view modifier adjusts this resizing behavior to maintain the model’s original aspect ratio, rather than scaling the x, y-, and z axes independently to fit the robot to the full frame of the view.
 Model3D(named: "Robot-Drummer") { model in
     model
         .resizable()
         .aspectRatio(contentMode: .fit)
 } placeholder: {
     ProgressView()
 }
If loading from a remote URL, this view uses the shared URLSession instance to load a model from the specified URL, and then display it. For example, you can display a model that’s stored on a server:
 Model3D(url: URL(string: "https://example.com/robot.usdz")!)
     .frame(width: 300, height: 600)
Until the model loads, the view displays a standard placeholder that fills the available space. After the load completes successfully, the view updates to display the model. In the example above, the model is smaller than the frame, and so appears smaller than the placeholder.
You can specify a custom placeholder using init(url:content:placeholder:). With this initializer, you can also use the content parameter to manipulate the loaded model. For example, you can add a modifier to make the loaded image resizable:
 let url = URL(string: "https://example.com/robot.usdz")!
 Model3D(url: url) { model in
     model.resizable()
 } placeholder: {
     ProgressView()
 }
 .frame(width: 50, height: 50)
For this example, Model3D shows a ProgressView first, and then the model scaled to fit in the specified frame:
Important
You can’t apply ResolvedModel3D-specific modifiers, like resizable(_:), directly to a Model3D. Instead, apply them to the ResolvedModel3D instance that your content closure gets when defining the view’s appearance.
To gain more control over the loading process, use the init(url:transaction:content:) initializer, which takes a content closure that receives a Model3DPhase to indicate the state of the loading operation. Return a view that’s appropriate for the current phase:
 let url = URL(string: "https://example.com/robot.usdz")!
 Model3D(url: url) { phase in
     if let model = phase.model {
         model // Displays the loaded model.
     } else if phase.error != nil {
         Color.red // Indicates an error.
     } else {
         Color.blue // Acts as a placeholder.
     }
 }
Topics
Creating a Model3D
init(named: String, bundle: Bundle?)
Loads and displays a model by name, by searching through the specified Foundation/Bundle.
init<Model, Placeholder>(named: String, bundle: Bundle?, content: (ResolvedModel3D) -> Model, placeholder: () -> Placeholder)
Loads and displays a modifiable model by name, by searching through the specified Bundle, using a custom placeholder until the model loads.
init(named: String, bundle: Bundle?, transaction: Transaction, content: (Model3DPhase) -> Content)
Loads and displays a modifiable model by name, by searching through the specified Bundle, in phases.
init(url: URL)
Loads and displays a model from the specified URL.
init<Model, Placeholder>(url: URL, content: (ResolvedModel3D) -> Model, placeholder: () -> Placeholder)
Loads and displays a modifiable model from the specified URL using a custom placeholder until the model loads.
init(url: URL, transaction: Transaction, content: (Model3DPhase) -> Content)
Loads and displays a modifiable model from the specified URL in phases.
Accessing content
var body: some View
The content and behavior of the view.
typealias Body
The type of view representing the body of this view.
struct ModelSortGroup
An object that defines a model sort group. Can only be configured on initialization. Once it is created, it cannot be modified.
struct Model3DPlaceholderContent
A container view that presents either a [`ResolvedModel3D`](doc://com.apple.RealityKit/documentation/RealityKit/ResolvedModel3D) or a placeholder view.
Default Implementations
API Reference
View Implementations
Relationships
Conforms To
View
See Also
Presentation
class ARView
A view that enables you to display an AR experience with RealityKit.
struct RealityView
A SwiftUI view for displaying RealityKit content on visionOS.
Beta
class RealityRenderer
Beta
struct SceneRealityCoordinateSpace
The RealityCoordinateSpace representing ARKit world space.
Beta
protocol RealityCoordinateSpaceConverting
A value that can be converted between SwiftUI CoordinateSpaces and
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Model3D
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

