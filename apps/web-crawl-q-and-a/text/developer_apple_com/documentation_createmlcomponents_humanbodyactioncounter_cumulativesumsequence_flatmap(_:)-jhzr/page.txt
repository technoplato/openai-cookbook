https://developer.apple.com/documentation/createmlcomponents/humanbodyactioncounter/cumulativesumsequence/flatmap(_:)-jhzr

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
SlidingWindowTransformer
S
TemporalSegmentIdentifier
r
P
TemporalSequence
S
TemporalFeature
Time-Based Components
S
AudioConvertingTransformer
S
AudioFeaturePrint
func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result
func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>
func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>
func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>
M
func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>
M
func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?
M
func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>
M
func dropFirst(Int) -> AsyncDropFirstSequence<Self>
M
func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>
M
func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool
M
func contains(Self.Element) async rethrows -> Bool
M
func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>
Documentation
Open Menu
Swift
Instance Method
flatMap(_:)
Creates an asynchronous sequence that concatenates the results of calling the given transformation with each element of this sequence.
Create ML Components
Swift
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
@preconcurrency
func flatMap<SegmentOfResult>(_ transform: @escaping (Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult> where SegmentOfResult : AsyncSequence
Parameters
transform
A mapping closure. transform accepts an element of this sequence as its parameter and returns an AsyncSequence.
Return Value
A single, flattened asynchronous sequence that contains all elements in all the asynchronous sequences produced by transform.
Discussion
Use this method to receive a single-level asynchronous sequence when your transformation produces an asynchronous sequence for each element.
In this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The transforming closure takes the received Int and returns a new Counter that counts that high. For example, when the transform receives 3 from the base sequence, it creates a new Counter that produces the values 1, 2, and 3. The flatMap(_:) method “flattens” the resulting sequence-of-sequences into a single AsyncSequence.
let stream = Counter(howHigh: 5)
    .flatMap { Counter(howHigh: $0) }
for await number in stream {
    print(number, terminator: " ")
}
// Prints "1 1 2 1 2 3 1 2 3 4 1 2 3 4 5 "
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is flatMap(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

