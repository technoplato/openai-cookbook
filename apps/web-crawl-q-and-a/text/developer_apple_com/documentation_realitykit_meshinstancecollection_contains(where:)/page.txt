https://developer.apple.com/documentation/realitykit/meshinstancecollection/contains(where:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result
M
func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result
M
func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]
M
func prefix(Int) -> PrefixSequence<Self>
M
func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
M
func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
M
func map<T>((Self.Element) throws -> T) rethrows -> [T]
func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool
func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]
func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]
func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool
M
func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult
M
func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]
M
func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool
Instance Methods
P
var underestimatedCount: Int
P
var publisher: Publishers.Sequence<Self, Never>
P
var lazy: LazySequence<Self>
Instance Properties
Documentation
Open Menu
Swift
Instance Method
contains(where:)
Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.
RealityKit
Swift
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
func contains(where predicate: (Self.Element) throws -> Bool) rethrows -> Bool
Parameters
predicate
A closure that takes an element of the sequence as its argument and returns a Boolean value that indicates whether the passed element represents a match.
Return Value
true if the sequence contains an element that satisfies predicate; otherwise, false.
Overview
You can use the predicate to check for an element of a type that doesn’t conform to the Equatable protocol, such as the HTTPResponse enumeration in this example.
enum HTTPResponse {
    case ok
    case error(Int)
}


let lastThreeResponses: [HTTPResponse] = [.ok, .ok, .error(404)]
let hadError = lastThreeResponses.contains { element in
    if case .error = element {
        return true
    } else {
        return false
    }
}
// 'hadError' == true
Alternatively, a predicate can be satisfied by a range of Equatable elements or a general condition. This example shows how you can check an array for an expense greater than $100.
let expenses = [21.37, 55.21, 9.32, 10.18, 388.77, 11.41]
let hasBigPurchase = expenses.contains { $0 > 100 }
// 'hasBigPurchase' == true
Complexity: O(n), where n is the length of the sequence.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is contains(where:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

