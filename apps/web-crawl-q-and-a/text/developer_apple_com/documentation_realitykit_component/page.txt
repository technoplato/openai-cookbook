https://developer.apple.com/documentation/realitykit/componentSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
GroundingShadowComponent
Beta
S
ImageBasedLightReceiverComponent
Beta
S
ImageBasedLightComponent
Beta
S
DirectionalLightComponent
Lighting
S
VideoPlayerComponent
Beta
S
SynchronizationComponent
C
Entity
C
Scene
RealityKit Systems
Loading Entities from a File
Building an Immersive Experience with RealityKit
Understanding RealityKit’s modular architecture
Entity Component System
r
P
RealityCoordinateSpaceConverting
Beta
Documentation
Open Menu
Swift
Protocol
Component
A representation of a geometry or a behavior that you apply to an entity.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
protocol Component
Overview
You assemble a particular combination of behavior and appearance for an entity by adding components to the components set of an Entity instance. Each component, represented by a type that conforms to the Component protocol, defines a single aspect of the entity. For example, one might define a position in space, while another provides a visual appearance. You can add at most one component of a given type to an entity.
RealityKit has a variety of predefined component types that you can use to add commonly needed characteristics. For example, the ModelComponent specifies visual appearance with a mesh and materials. The CollisionComponent contains a shape and other information used to decide if one entity collides with another.
You can also define custom component types. When you do, register that type with the system by calling the new component’s registerComponent() method—a default implementation of which is provided by the Component protocol. Call this method once before using the component type. You don’t need to make this call for component types that RealityKit provides.
Topics
Registering a Component Type
static func registerComponent()
Registers a new component type.
Using a Component
static var componentName: String
enum ComponentEvents
Provides the events related to components.
Essential components
struct AccessibilityComponent
Beta
struct AnchoringComponent
A description of how virtual content can be anchored to the real world.
struct SceneUnderstandingComponent
A component that maps features of the physical environment.
struct AdaptiveResolutionComponent
Allows an entity to change the resolution of the resources it uses according to its relevance to the user.
Beta
struct BodyTrackingComponent
A component for tracking people in an AR session.
struct OpacityComponent
Beta
struct Transform
A component that defines the scale, rotation, and translation of an entity.
protocol TransientComponent
An interface for components that aren’t saved to file or cloned.
struct SynchronizationComponent
A component that synchronizes an entity between processes and networked applications.
struct VideoPlayerComponent
Beta
Lighting
struct DirectionalLightComponent
A component that defines a directional light source.
struct ImageBasedLightComponent
Beta
struct ImageBasedLightReceiverComponent
Beta
struct GroundingShadowComponent
Beta
struct SpotLightComponent
A component that defines a spotlight source.
struct PointLightComponent
A component that defines a point light source.
3D Models
struct ModelComponent
A collection of resources that create the visual appearance of an entity.
struct ModelDebugOptionsComponent
A component that changes how RealityKit renders its entity to help with debugging.
struct ModelSortGroupComponent
A component that allows an entity’s models to be rendered in an explicit order relative to the models of other entities in the same sort group. If this component is on an entity, then it must belong to a sort group.
Beta
struct CharacterControllerComponent
A component that manages character movement.
struct CharacterControllerStateComponent
An object that maintains state for a character controller.
User Interface
struct HoverEffectComponent
Adding this component to an Entity will trigger a standard highlight effect when the Entity is gazed at. Note that, just like EntityGesture, a CollisionComponent is required for the Entity to be part of hit-testing.
Beta
struct PortalComponent
Beta
struct WorldComponent
When set on an entity, a WorldComponent separates the entity and its subtree to be rendered as part of a diferent world, that is only visible through a portal.
Beta
struct InputTargetComponent
A component that gives an entity the ability to receive system input.
Beta
struct TextComponent
Beta
struct ViewAttachmentComponent
A component containing additional information about a view attachment entity provided via the entity(for:) function.
Beta
Sound
struct AmbientAudioComponent
Configure ambient rendering of sounds from an entity.
Beta
struct AudioMixGroupsComponent
Beta
struct ChannelAudioComponent
Configure channel-based rendering of sounds from an entity.
Beta
struct SpatialAudioComponent
Configure how sounds are emitted from an entity into the user’s environment.
Beta
Simulations
struct CollisionComponent
A component that gives an entity the ability to collide with other entities that also have collision components.
struct PhysicsBodyComponent
A component that defines an entity’s behavior in physics body simulations.
struct PhysicsMotionComponent
A component that controls the motion of the body in physics simulations.
struct PhysicsSimulationComponent
Beta
struct ParticleEmitterComponent
Beta
struct PerspectiveCameraComponent
In AR applications, the camera is automatically provided by the system. In non-AR scenarios, the camera needs to be set by the app. (If no camera is provided by the app, the system will use default camera.)
Relationships
Inherited By
TransientComponent
Conforming Types
AccessibilityComponent
AdaptiveResolutionComponent
AmbientAudioComponent
AnchoringComponent
AudioMixGroupsComponent
BodyTrackingComponent
ChannelAudioComponent
CharacterControllerComponent
CharacterControllerStateComponent
CollisionComponent
DirectionalLightComponent
DirectionalLightComponent.Shadow
GroundingShadowComponent
HoverEffectComponent
ImageBasedLightComponent
ImageBasedLightReceiverComponent
InputTargetComponent
ModelComponent
ModelDebugOptionsComponent
ModelSortGroupComponent
OpacityComponent
ParticleEmitterComponent
PerspectiveCameraComponent
PhysicsBodyComponent
PhysicsMotionComponent
PhysicsSimulationComponent
PointLightComponent
PortalComponent
SceneUnderstandingComponent
SpatialAudioComponent
SpotLightComponent
SpotLightComponent.Shadow
SynchronizationComponent
TextComponent
Transform
VideoPlayerComponent
ViewAttachmentComponent
WorldComponent
See Also
Entity Component System
Loading Entities from a File
Retrieve an entity from storage on disk using a synchronous or an asynchronous load operation.
API Reference
RealityKit Systems
Apply behaviors and physical effects to the entities in a RealityKit scene.
class Scene
A container that holds the collection of entities rendered by an AR view.
class Entity
An element of a RealityKit scene to which you attach components that provide appearance and behavior characteristics for the entity.
protocol TransientComponent
An interface for components that aren’t saved to file or cloned.
protocol EntityCollection
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Component
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

