https://developer.apple.com/documentation/realitykit/custommaterial/ambientocclusion-swift.struct/init(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
T
CustomMaterial.Texture
T
CustomMaterial.Parameters
Defining Material Parameter Types
T
CustomMaterial.FaceCulling
E
MaterialParameterTypes.FaceCulling
P
var faceCulling: CustomMaterial.FaceCulling
Culling Unneeded Polygons
M
init(texture: CustomMaterial.Texture?)
Creating an Ambient Occlusion Object
S
CustomMaterial.AmbientOcclusion
P
var ambientOcclusion: CustomMaterial.AmbientOcclusion
Using Ambient Occlusion
S
CustomMaterial.Opacity
E
CustomMaterial.Blending
P
var blending: CustomMaterial.Blending
Documentation
Open Menu
Swift
Initializer
init(_:)
Creates an object from a physically based material’s ambient occlusion property.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
visionOS 1.0+ Beta
init(_ value: PhysicallyBasedMaterial.AmbientOcclusion)
Discussion
Ambient occlusion represents the entity’s exposure to ambient light. This initializer creates a new object by copying the values from an existing PhysicallyBasedMaterial instance’s ambientOcclusion property.
Specify ambient occlusion by using a UV-mapped image called an ambient occlusion map. A value of black (0.0) represents parts of the model that receive less ambient light because of a crevice, dent, recessed area, or another part of the same entity blocking ambient light from reaching it. Ambient occlusion values of white (1.0) represent flat portions of the model that receive full ambient light. You generate ambient occlusion maps by using a 3D software package.
The ambient occlusion texture is available in the material’s surface shader, but RealityKit doesn’t render ambient occlusion unless the surface shader calls params.surface().set_ambient_occlusion().
The following Metal code shows how to use the ambient occlusion texture in a surface shader function:
    // Retrieve the entity's texture coordinates.
    float2 uv = params.geometry().uv0();


    // Entities loaded from USDZ or .reality files have texture coordinates
    // with a flipped y-axis. This adjusts for that.
    uv.y = 1.0 - uv.y;


    // Sample the ambient occlusion texture and use it to set the
    // ambient occlusion value to use during rendering.
    auto tex = params.textures();
    half metallic = tex.ambient_occlusion().sample(textureSampler, uv).r;
    params.surface().set_ambient_occlusion(metallic);
value: The ambient occlusion property from a PhysicallyBasedMaterial.
See Also
Creating an Ambient Occlusion Object
init(texture: CustomMaterial.Texture?)
Creates an object from an image texture.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

