https://developer.apple.com/documentation/realitykit/objectcaptureview/simultaneousgesture(_:including:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func tag<V>(V) -> some View
M
func tableStyle<S>(S) -> some View
M
func tableColumnHeaders(Visibility) -> some View
M
func tabViewStyle<S>(S) -> some View
M
func tabItem<V>(() -> V) -> some View
M
func symbolVariant(SymbolVariants) -> some View
M
func symbolRenderingMode(SymbolRenderingMode?) -> some View
M
func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View
M
func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View
M
func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View
M
func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View
M
func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View
M
func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View
M
func selectionDisabled(Bool) -> some View
M
func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View
Documentation
Open Menu
Swift
Instance Method
simultaneousGesture(_:including:)
Attaches a gesture to the view to process simultaneously with gestures defined by the view.
RealityKit
SwiftUI
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func simultaneousGesture<T>(
    _ gesture: T,
    including mask: GestureMask = .all
) -> some View where T : Gesture
Parameters
gesture
A gesture to attach to the view.
mask
A value that controls how adding this gesture to the view affects other gestures recognized by the view and its subviews. Defaults to SwiftUI/GestureMask/all.
Discussion
Use this method when you need to define and process a view specific gesture simultaneously with the same priority as the view’s existing gestures. The example below defines a custom gesture that prints a message to the console and attaches it to the view’s VStack. Inside the VStack is a red heart Image defines its own TapGesture handler that also prints a message to the console and a blue rectangle with no custom gesture handlers.
Tapping or clicking the “heart” image sends two messages to the console: one for the image’s tap gesture handler, and the other from a custom gesture handler attached to the enclosing vertical stack. Tapping or clicking on the blue rectangle results only in the single message to the console from the tap recognizer attached to the VStack:
struct SimultaneousGestureExample: View {
    @State private var message = "Message"
    let newGesture = TapGesture().onEnded {
        print("Gesture on VStack.")
    }


    var body: some View {
        VStack(spacing:25) {
            Image(systemName: "heart.fill")
                .resizable()
                .frame(width: 75, height: 75)
                .padding()
                .foregroundColor(.red)
                .onTapGesture {
                    print("Gesture on image.")
                }
            Rectangle()
                .fill(Color.blue)
        }
        .simultaneousGesture(newGesture)
        .frame(width: 200, height: 200)
        .border(Color.purple)
    }
}
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is simultaneousGesture(_:including:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

