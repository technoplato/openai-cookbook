https://developer.apple.com/documentation/coreml/mlmodel

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
C
MLPredictionOptions
M
func predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider
M
func predictions(fromBatch: MLBatchProvider) -> MLBatchProvider
M
func prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider
Beta
M
func prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider
M
func prediction(from: MLFeatureProvider) -> MLFeatureProvider
Making Predictions
class func load(contentsOf: URL, configuration: MLModelConfiguration, completionHandler: (Result<MLModel, Error>) -> Void)
class func load(MLModelAsset, configuration: MLModelConfiguration, completionHandler: (MLModel?, Error?) -> Void)
Documentation
Open Menu
Class
MLModel
An encapsulation of all the details of your machine learning model.
iOS 11.0+
iPadOS 11.0+
macOS 10.13+
Mac Catalyst 13.1+
tvOS 11.0+
watchOS 4.0+
visionOS 1.0+ Beta
class MLModel : NSObject
Overview
MLModel encapsulates a model’s prediction methods, configuration, and model description.
In most cases, you can use Core ML without accessing the MLModel class directly. Instead, use the programmer-friendly wrapper class that Xcode automatically generates when you add a model (see Integrating a Core ML Model into Your App). If your app needs the MLModel interface, use the wrapper class’s model property.
With the MLModel interface, you can:
Make a prediction with your app’s custom MLFeatureProvider
by calling prediction(from:) or prediction(from:options:).
Make multiple predictions with your app’s custom MLBatchProvider
by calling predictions(fromBatch:) or predictions(from:options:).
Inspect your model’s metadata and MLFeatureDescription instances through modelDescription.
If your app downloads and compiles a model on the user’s device, you must use the MLModel class directly to make predictions. See Downloading and Compiling a Model on the User’s Device.
Important
Use an MLModel instance on one thread or one dispatch queue at a time. Do this by either serializing method calls to the model, or by creating a separate model instance for each thread and dispatch queue.
Topics
Loading a Model
class func load(contentsOf: URL, configuration: MLModelConfiguration) -> MLModel
Construct a model asynchronously from a compiled model asset.
class func load(MLModelAsset, configuration: MLModelConfiguration, completionHandler: (MLModel?, Error?) -> Void)
Construct a model asynchronously from a compiled model asset.
class func load(contentsOf: URL, configuration: MLModelConfiguration, completionHandler: (Result<MLModel, Error>) -> Void)
Creates a Core ML model instance asynchronously from a compiled model file, a custom configuration, and a completion handler.
init(contentsOf: URL)
Creates a Core ML model instance from a compiled model file.
init(contentsOf: URL, configuration: MLModelConfiguration)
Creates a Core ML model instance from a compiled model file and a custom configuration.
Compiling a Model
class func compileModel(at: URL) -> URL
Compile a model for a device.
class func compileModel(at: URL, completionHandler: (Result<URL, Error>) -> Void)
Compile a model for a device.
class func compileModel(at: URL) -> URL
Compiles a model on the device to update the model in your app.
Deprecated
Making Predictions
func prediction(from: MLFeatureProvider) -> MLFeatureProvider
Generates a prediction from the feature values within the input feature provider.
func prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider
Generates a prediction from the feature values within the input feature provider using the prediction options.
func prediction(from: MLFeatureProvider, options: MLPredictionOptions) -> MLFeatureProvider
Generates a prediction asynchronously from the feature values within the input feature provider using the prediction options.
Beta
func predictions(fromBatch: MLBatchProvider) -> MLBatchProvider
Generates predictions for each input feature provider within the batch provider.
func predictions(from: MLBatchProvider, options: MLPredictionOptions) -> MLBatchProvider
Generates a prediction for each input feature provider within the batch provider using the prediction options.
class MLPredictionOptions
The options available when making a prediction.
Inspecting a Model
var configuration: MLModelConfiguration
The configuration of the model set during initialization.
var modelDescription: MLModelDescription
Model information you use at runtime during development, which Xcode also displays in its Core ML model editor view.
class MLModelDescription
Information about a model, primarily the input and output format for each feature the model expects, and optional metadata.
func parameterValue(for: MLParameterKey) -> Any
Returns a model parameter value for a key.
class MLParameterKey
The keys for the parameter dictionary in a model configuration or a model update context.
Supporting Types
class MLModelConfiguration
The settings for creating or updating a machine learning model.
class MLKey
An abstract base class for machine learning key types.
Type Properties
static var availableComputeDevices: [MLComputeDevice]
Beta
Relationships
Inherits From
NSObject
See Also
Core ML Models
Getting a Core ML Model
Obtain a Core ML model to use in your app.
Updating a Model File to a Model Package
Convert a Core ML model file into a model package in Xcode.
Integrating a Core ML Model into Your App
Add a simple model to an app, pass input data to the model, and process the model’s predictions.
API Reference
Model Customization
Expand and modify your model with new layers.
API Reference
Model Personalization
Update your model to adapt to new data.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLModel
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

