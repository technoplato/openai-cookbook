https://developer.apple.com/documentation/realitykit/hashierarchySkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func withUnsynchronized(() -> Void)
M
func requestOwnership(timeout: TimeInterval, (SynchronizationComponent.OwnershipTransferCompletionResult) -> Void)
P
var isOwner: Bool
S
SynchronizationComponent
P
var synchronization: SynchronizationComponent?
Synchronizing an Entity Among Peers
r
P
HasTransform
S
Entity.ChildCollection
M
func removeChild(Entity, preservingWorldTransform: Bool)
M
func addChild(Entity, preservingWorldTransform: Bool)
P
var children: Entity.ChildCollection
M
func removeFromParent(preservingWorldTransform: Bool)
M
func setParent(Entity?, preservingWorldTransform: Bool)
P
var parent: Entity?
Establishing a Hierarchy
Documentation
Open Menu
Swift
Protocol
HasHierarchy
An interface that provides access to a parent entity and child entities.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
@MainActor @preconcurrency
protocol HasHierarchy : Entity
Overview
All entities automatically adopt this protocol because the Entity base class does. This adoption gives all entities a collection of methods for managing the hierarchy.
Topics
Managing the Parent
var parent: Entity?
The parent entity.
func setParent(Entity?, preservingWorldTransform: Bool)
Attaches the entity as a child to the specified entity.
func removeFromParent(preservingWorldTransform: Bool)
Removes the entity from its current parent or from the scene if it is a root entity.
Managing Children
var children: Entity.ChildCollection
The child entities that the entity manages.
func addChild(Entity, preservingWorldTransform: Bool)
Adds the given entity to the collection of child entities.
func removeChild(Entity, preservingWorldTransform: Bool)
Removes the given child from the entity.
struct ChildCollection
A collection of child entities.
Relationships
Inherits From
Entity
Conforming Types
AnchorEntity
BodyTrackedEntity
DirectionalLight
Entity
ModelEntity
PerspectiveCamera
PointLight
SpotLight
TriggerVolume
ViewAttachmentEntity
See Also
Establishing a Hierarchy
var parent: Entity?
The parent entity.
func setParent(Entity?, preservingWorldTransform: Bool)
Attaches the entity as a child to the specified entity.
func removeFromParent(preservingWorldTransform: Bool)
Removes the entity from its current parent or from the scene if it is a root entity.
var children: Entity.ChildCollection
The child entities that the entity manages.
func addChild(Entity, preservingWorldTransform: Bool)
Adds the given entity to the collection of child entities.
func removeChild(Entity, preservingWorldTransform: Bool)
Removes the given child from the entity.
struct ChildCollection
A collection of child entities.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is HasHierarchy
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

