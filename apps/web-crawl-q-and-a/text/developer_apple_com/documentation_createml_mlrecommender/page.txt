https://developer.apple.com/documentation/createml/mlrecommender

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
init(trainingData: DataFrame, userColumn: String, itemColumn: String, ratingColumn: String?, parameters: MLRecommender.ModelParameters) throws
Initializers
P
var model: MLModel
Describing a Recommender
M
func write(toFile: String, metadata: MLModelMetadata?) throws
M
func write(to: URL, metadata: MLModelMetadata?) throws
Saving a Recommender
func recommendations(fromUsers: [MLIdentifier], maxCount: Int, restrictingToItems: [MLIdentifier]?, excluding: MLDataTable?, excludingObserved: Bool) throws -> MLDataTable
func recommendations<T>(fromUsers: MLDataColumn<T>, maxCount: Int, restrictingToItems: MLDataColumn<T>?, excluding: MLDataTable?, excludingObserved: Bool) throws -> MLDataTable
E
MLRegressor
E
MLClassifier
Creating a Model from Tabular Data
Tabular Models
S
MLActivityClassifier
Motion Models
S
MLSoundClassifier
Sound Models
Documentation
Open Menu
Swift
Structure
MLRecommender
A model you train to make recommendations based on item similarity, grouping, and, optionally, item ratings.
macOS 10.15+
visionOS 1.0+ Beta
struct MLRecommender
Overview
Use an MLRecommender to train a machine learning model that you include in your app to make recommendations for the user, while keeping their data on-device.
You create a recommender model by training it with tabular data that includes columns for the recommendation items and the groups the items belong to. You also have the option to include an item rating column, which gives higher-rated items more weight than those with lesser or negative ratings. The recommender uses the training information to find similarity patterns by looking at items that occur in groups or have similar ratings within groups.
After you train a recommender, you save it as a Core ML model file with the .mlmodel extension. Import this model file into your Xcode project by dragging it into the Project navigator. At runtime, use the recommender to make item suggestions to the user based on the patterns in training data and the user’s item history. For example, a hiking app can recommend trails based on the trails a user has previously hiked and their ratings of those trails.
Topics
Creating and Training a Recommender
struct ModelParameters
Parameters that affect the process of training a recommender model.
let modelParameters: MLRecommender.ModelParameters
The configuration parameters that the recommender used for training during initialization.
var userIdentifierColumn: String
The name of the column you selected at initialization to define the user identifiers.
var itemIdentifierColumn: String
The name of the column you selected at initialization to define the item identifiers.
var ratingColumn: String?
The name of the column you selected at initialization to define the ratings.
Evaluating a Recommender
struct MLRecommenderMetrics
Metrics you use to evaluate a recommender’s performance.
Testing a Recommender
func recommendations<T>(fromUsers: MLDataColumn<T>, maxCount: Int, restrictingToItems: MLDataColumn<T>?, excluding: MLDataTable?, excludingObserved: Bool) throws -> MLDataTable
Retrieves the highest scored items for the given column of users, based on item similarity and the rating column.
func recommendations(fromUsers: [MLIdentifier], maxCount: Int, restrictingToItems: [MLIdentifier]?, excluding: MLDataTable?, excludingObserved: Bool) throws -> MLDataTable
Retrieves the highest scored item for the given array of users, based on item similarity and the rating column.
protocol MLIdentifier
A type the Create ML framework can use as a machine learning identifier.
func getSimilarItems<T>(fromItems: MLDataColumn<T>, maxCount: Int) throws -> MLDataTable
Returns the top ranked similar items based on the model’s similarity type.
func getSimilarItems(fromItems: [MLIdentifier], maxCount: Int) throws -> MLDataTable
Returns the top ranked similar items based on the model’s similarity type.
Saving a Recommender
func write(to: URL, metadata: MLModelMetadata?) throws
Exports the recommender as a Core ML model file at the given URL.
func write(toFile: String, metadata: MLModelMetadata?) throws
Exports the recommender as a Core ML model file at the given file path.
Describing a Recommender
var model: MLModel
The Core ML model.
Initializers
init(trainingData: DataFrame, userColumn: String, itemColumn: String, ratingColumn: String?, parameters: MLRecommender.ModelParameters) throws
Creates an instance given a table and the names of the item and user columns contained therein.
init(trainingData: MLDataTable, userColumn: String, itemColumn: String, ratingColumn: String?, parameters: MLRecommender.ModelParameters) throws
Creates an instance given a table and the names of the item and user columns contained therein.
Instance Methods
func evaluation(on: MLDataTable, userColumn: String, itemColumn: String, ratingColumn: String?, cutoffs: [Int], excludingObserved: Bool) -> MLRecommenderMetrics
Computes the metrics for the given testing data.
func evaluation(on: DataFrame, userColumn: String, itemColumn: String, ratingColumn: String?, cutoffs: [Int], excludingObserved: Bool) -> MLRecommenderMetrics
Computes the metrics for the given testing data.
Relationships
Conforms To
Sendable
See Also
Tabular Models
enum MLClassifier
A model you train to classify data into discrete categories.
enum MLRegressor
A model you train to estimate continuous values.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLRecommender
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

