https://developer.apple.com/documentation/createml/mldatatable

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Renaming Columns
subscript(String) -> MLUntypedColumn
subscript<Element>(String) -> MLDataColumn<Element>
subscript<T>(String, T.Type) -> MLDataColumn<T>?
Accessing Columns
S
MLUntypedColumn
M
func addColumn(MLUntypedColumn, named: String)
Tabular Data
S
MLRecommender
E
MLRegressor
E
MLClassifier
Creating a Model from Tabular Data
Tabular Models
S
MLActivityClassifier
Motion Models
Documentation
Open Menu
Swift
Structure
MLDataTable
A table of data for training or evaluating a machine learning model.
iOS 15.0+
iPadOS 15.0+
macOS 10.14+
Mac Catalyst 15.0+
tvOS 16.0+
visionOS 1.0+ Beta
struct MLDataTable
Overview
MLDataTable is Create ML’s version of a spreadsheet in which each row represents an entity (such as a book, in the example below) with observable features. Each column (MLDataColumn or MLUntypedColumn) in the table represents an observable feature of that entity, such as a book’s title or author.
In most cases you interact with columns using the typed MLDataColumn, especially when you need to directly access the contents of a column. You can also interact with columns using MLUntypedColumn, if the underlying type of the column isn’t important.
After you create a data table, you can modify it with methods like append(contentsOf:), addColumn(_:named:), and removeColumn(named:). You can also filter or map the contents of the data table to derive new data tables or new columns by using various subscripts and methods like dropDuplicates() or map(_:).
Note
For a demonstration that creates and uses data tables, see Creating a Model from Tabular Data.
Finally, when your data table is ready, use it to train and evaluate a model from these groups:
Regressors like MLRegressor and its supporting types - Classifiers like MLClassifier and its supporting types - Natural language processing types like MLTextClassifier and MLWordTagger
Note
It’s easier to train an MLTextClassifier from folders and files with init(trainingData:parameters:) if your data is ready to use, as-is. Otherwise, use a data table to prepare your data before training a text classifier.
Topics
Creating a Data Table
Creating a Model from Tabular Data
Train a machine learning model by using Core ML to import and manage tabular data.
init(contentsOf: URL, options: MLDataTable.ParsingOptions) throws
Creates a data table from an imported JSON or CSV file.
init(dictionary: [String : MLDataValueConvertible]) throws
Creates a data table from a dictionary of column names and data values.
init(namedColumns: [String : MLUntypedColumn]) throws
Creates a data table from a dictionary of column names and untyped columns.
init()
Creates an empty table containing no rows or columns.
Getting the Size of a Data Table
var size: (rows: Int, columns: Int)
The number of rows and columns in the data table.
Transforming Rows to Generate a Data Column
func map<T>((MLDataTable.Row) -> T) -> MLDataColumn<T>
Creates a new column by applying a given thread-safe transform to every row in the data table.
func map<T>((MLDataTable.Row) -> T?) -> MLDataColumn<T>
Creates a new column, potentially with missing values, by applying a given thread-safe transform to every row in the data table.
Adding Columns
func addColumn<Element>(MLDataColumn<Element>, named: String)
Adds a data column to the table.
struct MLDataColumn
A column of typed values in a data table.
func addColumn(MLUntypedColumn, named: String)
Adds an untyped column to the table.
struct MLUntypedColumn
A column of untyped values in a data table.
Accessing Columns
subscript<T>(String, T.Type) -> MLDataColumn<T>?
Retrieves a column with the specified name and type.
subscript<Element>(String) -> MLDataColumn<Element>
Retrieves or adds a typed column with the specified name.
subscript(String) -> MLUntypedColumn
Retrieves or adds an untyped column with the specified name.
Renaming Columns
func renameColumn(named: String, to: String)
Changes the name of an existing column.
Removing Columns
func removeColumn(named: String)
Removes the column with the specified name.
Appending to a Data Table
func append(contentsOf: MLDataTable)
Appends the contents of the given data table to the end of this data table.
Generating New Data Tables
API Reference
Data Table Derivation Operations
Create new data tables by manipulating an existing data table.
Getting Information About a Data Table’s Rows
var rows: MLDataTable.Rows
The rows of data in the table.
struct Rows
A collection of rows in a data table.
Getting Information About a Data Table’s Columns
var columnNames: MLDataTable.ColumnNames
The names of the columns in the data table.
struct ColumnNames
A collection of the names of the columns in a data table.
var columnTypes: [String : MLDataValue.ValueType]
The type of the data in each column.
Saving a Data Table
func write(to: URL) throws
Exports a binary file of the data table to the given directory URL.
func write(toDirectory: String) throws
Exports a binary file of the data table to the given directory path.
func writeCSV(to: URL) throws
Exports a CSV file of the data table to the given directory URL.
func writeCSV(toFile: String) throws
Exports a CSV file of the data table to the given directory path.
Visualizing a Data Table
func show() -> MLStreamingVisualizable
Generates a visualization for the data in the table.
Describing a Data Table
var description: String
A text representation of the data table.
var playgroundDescription: Any
A description of the data table shown in a playground.
Handling Data Table Errors
var isValid: Bool
A Boolean value that indicates whether the data table is valid.
var error: (Error)?
The underlying error present when the data table is invalid.
Instance Methods
func randomSplitBySequence(proportion: Double, by: String, on: String, seed: Int) -> (MLDataTable, remaining: MLDataTable)
func stratifiedSplit<RNG>(proportions: [Double], on: String, generator: inout RNG) throws -> MLDataTable
Randomly split a MLDataTable into a number partitions while stratifying on a user-define label column.
func stratifiedSplit(proportions: [Double], on: String, seed: Int) throws -> MLDataTable
Randomly split a MLDataTable into a number partitions while stratifying on a user-define label column.
func stratifiedSplitBySequence<RNG>(proportions: [Double], by: String, on: String, generator: inout RNG) throws -> MLDataTable
Randomly split a MLDataTable into partitions on a user-define label column, while keeping rows from the same sequence in the original order.
func stratifiedSplitBySequence(proportions: [Double], by: String, on: String, seed: Int) throws -> MLDataTable
Randomly split a MLDataTable into partitions on a user-define label column, while keeping rows from the same sequence in the original order.
Default Implementations
API Reference
CustomPlaygroundDisplayConvertible Implementations
API Reference
CustomStringConvertible Implementations
Relationships
Conforms To
CustomPlaygroundDisplayConvertible
CustomStringConvertible
Sendable
See Also
Tabular Data
enum MLDataValue
The value of a cell in a data table.
API Reference
Data Visualizations
Render images of data tables and columns in a playground.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is MLDataTable
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

