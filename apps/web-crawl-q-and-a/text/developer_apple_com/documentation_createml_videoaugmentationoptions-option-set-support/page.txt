https://developer.apple.com/documentation/createml/videoaugmentationoptions-option-set-support

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func remove(Self.Element) -> Self.Element?
Removing an Augmentation
M
func formSymmetricDifference(Self)
M
func symmetricDifference(Self) -> Self
M
func formIntersection(Self)
M
func intersection(Self) -> Self
M
func formUnion(Self)
T
MLHandActionClassifier.VideoAugmentationOptions.ArrayLiteralElement
T
MLHandActionClassifier.VideoAugmentationOptions.Element
T
MLHandActionClassifier.VideoAugmentationOptions.RawValue
Augmentations Supporting Types
S
MLHandActionClassifier.VideoAugmentationOptions
Parameter Supporting Types
P
var playgroundDescription: Any
P
var debugDescription: String
Documentation
Open Menu
Option Set Support
Inspect and modify a video augmentation option set with the properties and methods it inherits from standard protocols.
Overview
You don’t typically use these properties and methods directly.
MLHandActionClassifier.VideoAugmentationOptions inherits these symbols from OptionSet and Codable. Create a set of video augmentations by creating an array literal with any combination of these type properties:
horizontalFlip
randomMove
randomScale
randomShift
frameDrop
timeInterpolate
Topics
Creating an Augmentation
init(arrayLiteral: Self.Element...)
Creates a set containing the elements of the given array literal.
Available when ArrayLiteralElement is Self.Element.
init()
Creates an empty option set.
Available when RawValue conforms to FixedWidthInteger.
init(rawValue: Int)
Creates an option set from an integer.
init<S>(S)
Creates a new set from a finite sequence of items.
Inspecting an Augmentation
var isEmpty: Bool
A Boolean value that indicates whether the set has no elements.
let rawValue: Int
The corresponding value of the raw type.
func contains(Self) -> Bool
Returns a Boolean value that indicates whether a given element is a member of the option set.
Available when Self is Self.Element.
Adding an Augmentation
func insert(Self.Element) -> (inserted: Bool, memberAfterInsert: Self.Element)
Adds the given element to the option set if it is not already a member.
Available when Self is Self.Element.
func update(with: Self.Element) -> Self.Element?
Inserts the given element into the set.
Available when Self is Self.Element.
Combining Augmentations
func union(Self) -> Self
Returns a new option set of the elements contained in this set, in the given set, or in both.
func formUnion(Self)
Inserts the elements of another set into this option set.
Available when RawValue conforms to FixedWidthInteger.
func intersection(Self) -> Self
Returns a new option set with only the elements contained in both this set and the given set.
func formIntersection(Self)
Removes all elements of this option set that are not also present in the given set.
Available when RawValue conforms to FixedWidthInteger.
func symmetricDifference(Self) -> Self
Returns a new option set with the elements contained in this set or in the given set, but not in both.
func formSymmetricDifference(Self)
Replaces this set with a new set containing all elements contained in either this set or the given set, but not in both.
Available when RawValue conforms to FixedWidthInteger.
Removing an Augmentation
func remove(Self.Element) -> Self.Element?
Removes the given element and all elements subsumed by it.
Available when Self is Self.Element.
func subtract(Self)
Removes the elements of the given set from this set.
func subtracting(Self) -> Self
Returns a new set containing the elements of this set that do not occur in the given set.
Comparing Augmentations
func isDisjoint(with: Self) -> Bool
Returns a Boolean value that indicates whether the set has no members in common with the given set.
func isSubset(of: Self) -> Bool
Returns a Boolean value that indicates whether the set is a subset of another set.
func isStrictSubset(of: Self) -> Bool
Returns a Boolean value that indicates whether this set is a strict subset of the given set.
func isSuperset(of: Self) -> Bool
Returns a Boolean value that indicates whether the set is a superset of the given set.
func isStrictSuperset(of: Self) -> Bool
Returns a Boolean value that indicates whether this set is a strict superset of the given set.
static func != (Self, Self) -> Bool
Encoding and Decoding an Augmentation
func encode(to: Encoder) throws
Encodes this value into the given encoder, when the type’s RawValue is Int.
Available when Self conforms to Encodable and RawValue is Int.
init(from: Decoder) throws
Creates a new instance by decoding from the given decoder, when the type’s RawValue is Int.
Available when Self conforms to Decodable and RawValue is Int.
See Also
Augmentations Supporting Types
typealias RawValue
The raw type that can be used to represent all values of the conforming type.
typealias Element
The element type of the option set.
typealias ArrayLiteralElement
The type of the elements of an array literal.
Current page is Option Set Support
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

