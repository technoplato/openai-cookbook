https://developer.apple.com/documentation/speech/sfcustomlanguagemodeldata/phrasecountgenerator/4196111-compactmap

Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func reduce<Result>(into: Result, (inout Result, SFCustomLanguageModelData.PhraseCount) -> Void) -> Result
M
func reduce<Result>(Result, (Result, SFCustomLanguageModelData.PhraseCount) -> Result) -> Result
M
func prefix(while: (SFCustomLanguageModelData.PhraseCount) -> Bool) -> AsyncPrefixWhileSequence<SFCustomLanguageModelData.PhraseCountGenerator>
M
func prefix(Int) -> AsyncPrefixSequence<SFCustomLanguageModelData.PhraseCountGenerator>
M
func min(by: (SFCustomLanguageModelData.PhraseCount, SFCustomLanguageModelData.PhraseCount) -> Bool) -> SFCustomLanguageModelData.PhraseCount?
M
func max(by: (SFCustomLanguageModelData.PhraseCount, SFCustomLanguageModelData.PhraseCount) -> Bool) -> SFCustomLanguageModelData.PhraseCount?
M
func map<Transformed>((SFCustomLanguageModelData.PhraseCount) -> Transformed) -> AsyncThrowingMapSequence<SFCustomLanguageModelData.PhraseCountGenerator, Transformed>
func map<Transformed>((SFCustomLanguageModelData.PhraseCount) -> Transformed) -> AsyncMapSequence<SFCustomLanguageModelData.PhraseCountGenerator, Transformed>
func flatMap<SegmentOfResult>((SFCustomLanguageModelData.PhraseCount) -> SegmentOfResult) -> AsyncFlatMapSequence<SFCustomLanguageModelData.PhraseCountGenerator, SegmentOfResult>
func flatMap<SegmentOfResult>((SFCustomLanguageModelData.PhraseCount) -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<SFCustomLanguageModelData.PhraseCountGenerator, SegmentOfResult>
func first(where: (SFCustomLanguageModelData.PhraseCount) -> Bool) -> SFCustomLanguageModelData.PhraseCount?
func filter((SFCustomLanguageModelData.PhraseCount) -> Bool) -> AsyncFilterSequence<SFCustomLanguageModelData.PhraseCountGenerator>
func drop(while: (SFCustomLanguageModelData.PhraseCount) -> Bool) -> AsyncDropWhileSequence<SFCustomLanguageModelData.PhraseCountGenerator>
func compactMap<ElementOfResult>((SFCustomLanguageModelData.PhraseCount) -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<SFCustomLanguageModelData.PhraseCountGenerator, ElementOfResult>
func compactMap<ElementOfResult>((SFCustomLanguageModelData.PhraseCount) -> ElementOfResult?) -> AsyncCompactMapSequence<SFCustomLanguageModelData.PhraseCountGenerator, ElementOfResult>
M
func allSatisfy((SFCustomLanguageModelData.PhraseCount) -> Bool) -> Bool
Instance Methods
P
var hashValue: Int
Instance Properties
M
init(from: Decoder)
M
init()
Initializers
T
SFCustomLanguageModelData.PhraseCountGenerator.Element
Documentation
Open Menu
Swift
Generic Instance Method
compactMap(_:)
Creates an asynchronous sequence that maps the given closure over the asynchronous sequence’s elements, omitting results that don’t return a value.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 17.0+ Beta
visionOS 1.0+ Beta
Xcode 11.0+
@preconcurrency
func compactMap<ElementOfResult>(_ transform: @escaping @Sendable (SFCustomLanguageModelData.PhraseCount) async -> ElementOfResult?) -> AsyncCompactMapSequence<SFCustomLanguageModelData.PhraseCountGenerator, ElementOfResult>
Parameters
transform
A mapping closure. transform accepts an element of this sequence as its parameter and returns a transformed value of the same or of a different type.
Return Value
An asynchronous sequence that contains, in order, the non-nil elements produced by the transform closure.
Discussion
Use the compactMap(_:) method to transform every element received from a base asynchronous sequence, while also discarding any nil results from the closure. Typically, you use this to transform from one type of element to another.
In this example, an asynchronous sequence called Counter produces Int values from 1 to 5. The closure provided to the compactMap(_:) method takes each Int and looks up a corresponding String from a romanNumeralDict dictionary. Because there is no key for 4, the closure returns nil in this case, which compactMap(_:) omits from the transformed asynchronous sequence.
let romanNumeralDict: [Int: String] =
    [1: "I", 2: "II", 3: "III", 5: "V"]
    
let stream = Counter(howHigh: 5)
    .compactMap { romanNumeralDict[$0] }
for await numeral in stream {
    print(numeral, terminator: " ")
}
// Prints "I II III V "
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is compactMap(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

