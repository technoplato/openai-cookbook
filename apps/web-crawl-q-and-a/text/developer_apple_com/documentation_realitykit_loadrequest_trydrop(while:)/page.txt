https://developer.apple.com/documentation/realitykit/loadrequest/trydrop(while:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func combineLatest<P, Q, R, T>(P, Q, R, (Self.Output, P.Output, Q.Output, R.Output) -> T) -> Publishers.Map<Publishers.CombineLatest4<Self, P, Q, R>, T>
M
func combineLatest<P, Q>(P, Q) -> Publishers.CombineLatest3<Self, P, Q>
M
func combineLatest<P, Q, T>(P, Q, (Self.Output, P.Output, Q.Output) -> T) -> Publishers.Map<Publishers.CombineLatest3<Self, P, Q>, T>
M
func combineLatest<P>(P) -> Publishers.CombineLatest<Self, P>
M
func combineLatest<P, T>(P, (Self.Output, P.Output) -> T) -> Publishers.Map<Publishers.CombineLatest<Self, P>, T>
Combining Elements from Multiple Publishers
M
func output<R>(in: R) -> Publishers.Output<Self>
func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>
func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>
M
func dropFirst(Int) -> Publishers.Drop<Self>
M
func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>
M
func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>
Applying Sequence Operations to Elements
M
func tryAllSatisfy((Self.Output) throws -> Bool) -> Publishers.TryAllSatisfy<Self>
M
func allSatisfy((Self.Output) -> Bool) -> Publishers.AllSatisfy<Self>
M
func tryContains(where: (Self.Output) throws -> Bool) -> Publishers.TryContainsWhere<Self>
M
func contains(where: (Self.Output) -> Bool) -> Publishers.ContainsWhere<Self>
Documentation
Open Menu
Swift
Instance Method
tryDrop(while:)
Omits elements from the upstream publisher until an error-throwing closure returns false, before republishing all remaining elements.
RealityKit
Combine
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func tryDrop(while predicate: @escaping (Self.Output) throws -> Bool) -> Publishers.TryDropWhile<Self>
Parameters
predicate
A closure that takes an element as a parameter and returns a Boolean value indicating whether to drop the element from the publisher’s output.
Return Value
A publisher that skips over elements until the provided closure returns false, and then republishes all remaining elements. If the predicate closure throws, the publisher fails with an error.
Discussion
Use Publisher/tryDrop(while:) to omit elements from an upstream until an error-throwing closure you provide returns false, after which the remaining items in the stream are published. If the closure throws, no elements are emitted and the publisher fails with an error.
In the example below, elements are ignored until -1 is encountered in the stream and the closure returns false. The publisher then republishes the remaining elements and finishes normally. Conversely, if the guard value in the closure had been encountered, the closure would throw and the publisher would fail with an error.
struct RangeError: Error {}
var numbers = [1, 2, 3, 4, 5, 6, -1, 7, 8, 9, 10]
let range: CountableClosedRange<Int> = (1...100)
cancellable = numbers.publisher
    .tryDrop {
        guard $0 != 0 else { throw RangeError() }
        return range.contains($0)
    }
    .sink(
        receiveCompletion: { print ("completion: \($0)") },
        receiveValue: { print ("value: \($0)") }
    )


// Prints: "-1 7 8 9 10 completion: finished"
// If instead numbers was [1, 2, 3, 4, 5, 6, 0, -1, 7, 8, 9, 10], tryDrop(while:) would fail with a RangeError.
See Also
Applying Sequence Operations to Elements
func drop<P>(untilOutputFrom: P) -> Publishers.DropUntilOutput<Self, P>
Ignores elements from the upstream publisher until it receives an element from a second publisher.
func drop(while: (Self.Output) -> Bool) -> Publishers.DropWhile<Self>
Omits elements from the upstream publisher until a given closure returns false, before republishing all remaining elements.
func dropFirst(Int) -> Publishers.Drop<Self>
Omits the specified number of elements before republishing subsequent elements.
func append(Self.Output...) -> Publishers.Concatenate<Self, Publishers.Sequence<[Self.Output], Self.Failure>>
Appends a publisher’s output with the specified elements.
func prepend(Self.Output...) -> Publishers.Concatenate<Publishers.Sequence<[Self.Output], Self.Failure>, Self>
Prefixes a publisher’s output with the specified values.
func prefix(Int) -> Publishers.Output<Self>
Republishes elements up to the specified maximum count.
func prefix<P>(untilOutputFrom: P) -> Publishers.PrefixUntilOutput<Self, P>
Republishes elements until another publisher emits an element.
func prefix(while: (Self.Output) -> Bool) -> Publishers.PrefixWhile<Self>
Republishes elements while a predicate closure indicates publishing should continue.
func tryPrefix(while: (Self.Output) throws -> Bool) -> Publishers.TryPrefixWhile<Self>
Republishes elements while an error-throwing predicate closure indicates publishing should continue.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is tryDrop(while:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

