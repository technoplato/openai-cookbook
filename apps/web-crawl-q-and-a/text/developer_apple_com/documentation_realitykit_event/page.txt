https://developer.apple.com/documentation/realitykit/eventSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Hashable Implementations
Equatable Implementations
Default Implementations
M
func findEntity(id: Entity.ID) -> Entity?
Instance Methods
P
var timebase: CMTimebase
Beta
Instance Properties
E
CollisionEvents
E
AudioEvents
E
AnimationEvents
E
SceneEvents
S
Scene.Publisher
M
func subscribe<E>(to: E.Type, on: (EventSource)?, componentType: (Component.Type)?, (E) -> Void) -> Cancellable
M
func publisher<E>(for: E.Type, on: (EventSource)?, componentType: (Component.Type)?) -> Scene.Publisher<E>
M
func subscribe<E>(to: E.Type, on: (EventSource)?, (E) -> Void) -> Cancellable
Documentation
Open Menu
Swift
Protocol
Event
A type that can be sent as an event.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
protocol Event : Sendable
Overview
RealityKit provides a number of events you can subscribe to to get notified when things happens in a scene. For example, you can subscribe to CollisionEvents.Began to get notified when two objects begin colliding, or SceneEvents.Update to get notified when the scene redraws.
Subscribe with a closure
To subscribe to a scene event, import Combine, create a property of type Cancellable to maintain a reference to the subscription, then call subscribe(to:on:_:) or subscribe(to:on:componentType:_:) and provide a closure.
The closure is passed an RealityKit/Scene/Event object that contains information relevant to the type of event you subscribed to.
Here’s an example of subscribing to the collision begain event and retrieving the two entities involved in the collision:
 import AppKit
 import RealityKit
 import Combine


 class GameViewController: NSViewController {


     @IBOutlet var arView: ARView!
     var collisionSubscription:Cancellable?


     override func awakeFromNib() {
        let boxAnchor = try! Experience.loadBox()
        arView.scene.anchors.append(boxAnchor)


        collisionSubscription = arView.scene.subscribe(
           to: CollisionEvents.Began.self,
            on: boxAnchor
       ) { event in
           print("collision started")
           let firstEntity = event.entityA
           let secondEntity = event.entityB
           // Take appropriate action...
        }
   }
 }
Subscribe using a method
You can also subscribe to events using a function rather than a closure by using sink(receiveCompletion:receiveValue:). Here’s an example of using a function to respond to that same event:
import AppKit
import RealityKit
import Combine


class GameViewController: NSViewController {


    @IBOutlet var arView: ARView!
    var collisionSubscription:Cancellable?


    override func awakeFromNib() {
        let boxAnchor = try! Experience.loadBox()
        arView.scene.anchors.append(boxAnchor)


        collisionSubscription = arView.scene.publisher(for: CollisionEvents.Began.self,
                                                       on:nil).sink(receiveValue: onCollisionBegan)
    }


    private func onCollisionBegan(_ event:
                                  CollisionEvents.Began) {
        print("collision started")
        let firstEntity = event.entityA
        let secondEntity = event.entityB
        // Take appropriate action...
    }
}
Topics
Events
protocol EventSource
A type on which events can be published and subscribed.
struct EventSubscription
Beta
Event Types
enum SceneEvents
Events the scene triggers.
enum AnimationEvents
Notable milestones that the framework signals during animation playback.
enum AudioEvents
Events associated with audio playback.
enum CollisionEvents
Events associated with collisions.
Relationships
Inherits From
Sendable
Conforming Types
AccessibilityEvents.Activate
AccessibilityEvents.CustomAction
AccessibilityEvents.Decrement
AccessibilityEvents.Increment
AccessibilityEvents.RotorNavigation
AnimationEvents.PlaybackCompleted
AnimationEvents.PlaybackLooped
AnimationEvents.PlaybackTerminated
AudioEvents.PlaybackCompleted
CollisionEvents.Began
CollisionEvents.Ended
CollisionEvents.Updated
ComponentEvents.DidActivate
ComponentEvents.DidAdd
ComponentEvents.DidChange
ComponentEvents.WillDeactivate
ComponentEvents.WillRemove
PhysicsSimulationEvents.DidSimulate
PhysicsSimulationEvents.WillSimulate
SceneEvents.AnchoredStateChanged
SceneEvents.DidActivateEntity
SceneEvents.DidAddEntity
SceneEvents.DidReparentEntity
SceneEvents.Update
SceneEvents.WillDeactivateEntity
SceneEvents.WillRemoveEntity
SynchronizationEvents.OwnershipChanged
SynchronizationEvents.OwnershipRequest
VideoPlayerEvents.ContentTypeDidChange
VideoPlayerEvents.MediaTypeDidChange
VideoPlayerEvents.VideoSizeDidChange
VideoPlayerEvents.ViewingModeDidChange
See Also
Getting and Sending Events
func publisher<E>(for: E.Type, on: (EventSource)?) -> Scene.Publisher<E>
Generates a publisher for events of the specified type.
func subscribe<E>(to: E.Type, on: (EventSource)?, (E) -> Void) -> Cancellable
Receives events of the given type.
func publisher<E>(for: E.Type, on: (EventSource)?, componentType: (Component.Type)?) -> Scene.Publisher<E>
Returns a Publisher for events of the specified type in a Scene.
func subscribe<E>(to: E.Type, on: (EventSource)?, componentType: (Component.Type)?, (E) -> Void) -> Cancellable
Receive events of type E.
struct Publisher
A publisher for the given event type in the scene.
enum SceneEvents
Events the scene triggers.
enum AnimationEvents
Notable milestones that the framework signals during animation playback.
enum AudioEvents
Events associated with audio playback.
enum CollisionEvents
Events associated with collisions.
protocol EventSource
A type on which events can be published and subscribed.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Event
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

