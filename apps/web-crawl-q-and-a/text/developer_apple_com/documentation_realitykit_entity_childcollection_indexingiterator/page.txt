https://developer.apple.com/documentation/realitykit/entity/childcollection/indexingiteratorSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func replaceAll<S>(S, preservingWorldTransforms: Bool)
Comparing Collections
M
func elementsEqual<OtherSequence>(OtherSequence) -> Bool
M
func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool
M
func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool
M
func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool
M
func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool
Iterating over Collection of Entities
M
func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
M
func min() -> Self.Element?
M
func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
Selecting Entities
M
func prefix(Int) -> PrefixSequence<Self>
M
func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]
M
func suffix(Int) -> [Self.Element]
Documentation
Open Menu
Swift
Structure
Entity.ChildCollection.IndexingIterator
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
struct IndexingIterator<Elements> where Elements : Collection
Topics
Iterating over the Collection
func enumerated() -> EnumeratedSequence<Self>
Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.
func next() -> Elements.Element?
Advances to the next element and returns it, or nil if no next element exists.
Available when Elements conforms to Collection.
func forEach((Self.Element) throws -> Void) rethrows
Calls the given closure on each element in the sequence in the same order as a for-in loop.
func makeIterator() -> Self
Returns an iterator over the elements of this sequence.
Available when Self is Self.Iterator.
typealias Iterator
A type that provides the sequence’s iteration interface and encapsulates its iteration state.
Available when Elements conforms to Collection.
typealias Element
The type of element traversed by the iterator.
Available when Elements conforms to Collection.
var underestimatedCount: Int
A value less than or equal to the number of elements in the sequence, calculated nondestructively.
Finding Entities
func contains(Self.Element) -> Bool
Returns a Boolean value indicating whether the sequence contains the given element.
Available when Element conforms to Equatable.
func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether the sequence contains an element that satisfies the given predicate.
func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether every element of a sequence satisfies a given predicate.
func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?
Returns the first element of the sequence that satisfies the given predicate.
func max() -> Self.Element?
Returns the maximum element in the sequence.
Available when Element conforms to Comparable.
func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
Returns the maximum element in the sequence, using the given predicate as the comparison between elements.
func min() -> Self.Element?
Returns the minimum element in the sequence.
Available when Element conforms to Comparable.
func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?
Returns the minimum element in the sequence, using the given predicate as the comparison between elements.
Selecting Entities
func prefix(Int) -> PrefixSequence<Self>
Returns a sequence, up to the specified maximum length, containing the initial elements of the sequence.
func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]
Returns a sequence containing the initial, consecutive elements that satisfy the given predicate.
func suffix(Int) -> [Self.Element]
Returns a subsequence, up to the given maximum length, containing the final elements of the sequence.
Transforming Entities
func map<T>((Self.Element) throws -> T) rethrows -> [T]
Returns an array containing the results of mapping the given closure over the sequence’s elements.
func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]
Returns an array containing the concatenated results of calling the given transformation with each element of this sequence.
func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]
func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]
Returns an array containing the non-nil results of calling the given transformation with each element of this sequence.
func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result
Returns the result of combining the elements of the sequence using the given closure.
func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result
Returns the result of combining the elements of the sequence using the given closure.
var lazy: LazySequence<Self>
A sequence containing the same elements as this sequence, but on which some operations, such as map and filter, are implemented lazily.
Reordering Entities
func sorted() -> [Self.Element]
Returns the elements of the sequence, sorted.
Available when Element conforms to Comparable.
func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]
Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.
func reversed() -> [Self.Element]
Returns an array containing the elements of this sequence in reverse order.
func shuffled() -> [Self.Element]
Returns the elements of the sequence, shuffled.
func shuffled<T>(using: inout T) -> [Self.Element]
Returns the elements of the sequence, shuffled using the given generator as a source for randomness.
Splitting and Joining Entities
func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]
Returns the longest possible subsequences of the sequence, in order, that don’t contain elements satisfying the given predicate. Elements that are used to split the sequence are not returned as part of any subsequence.
func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]
Returns the longest possible subsequences of the sequence, in order, around elements equal to the given element.
Available when Element conforms to Equatable.
func joined() -> FlattenSequence<Self>
Returns the elements of this sequence of sequences, concatenated.
func joined<Separator>(separator: Separator) -> JoinedSequence<Self>
Returns the concatenated elements of this sequence of sequences, inserting the given separator between each element.
func joined(separator: String) -> String
Returns a new string by concatenating the elements of the sequence, adding the given separator between each element.
Available when Element conforms to StringProtocol.
typealias SubSequence
Available when Elements conforms to Collection.
Comparing Collections
func elementsEqual<OtherSequence>(OtherSequence) -> Bool
Returns a Boolean value indicating whether this sequence and another sequence contain the same elements in the same order.
Available when Element conforms to Equatable.
func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether this sequence and another sequence contain equivalent elements in the same order, using the given predicate as the equivalence test.
func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool
Returns a Boolean value indicating whether the initial elements of the sequence are the same as the elements in another sequence.
Available when Element conforms to Equatable.
func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether the initial elements of the sequence are equivalent to the elements in another sequence, using the given predicate as the equivalence test.
func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool
Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the less-than operator (<) to compare elements.
Available when Element conforms to Comparable.
func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool
Returns a Boolean value indicating whether the sequence precedes another sequence in a lexicographical (dictionary) ordering, using the given predicate to compare elements.
Excluding Entities
func dropFirst(Int) -> DropFirstSequence<Self>
Returns a sequence containing all but the given number of initial elements.
func dropLast(Int) -> [Self.Element]
Returns a sequence containing all but the given number of final elements.
func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>
Returns a sequence by skipping the initial, consecutive elements that satisfy the given predicate.
Accessing Underlying Storage
func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?
Executes a closure on the sequence’s contiguous storage.
Publishing Changes
var publisher: Publishers.Sequence<Self, Never>
Working with Rectangles
func clip()
Modifies the current graphics context clipping path by intersecting it with the graphical union of this list of rects This permanently modifies the graphics state, so the current state should be saved beforehand and restored afterwards.
Available when Element is CGRect.
func fill(using: NSCompositingOperation)
Fills this list of rects in the current NSGraphicsContext in the context’s fill color. The compositing operation of the fill defaults to the context’s compositing operation, not necessarily using .copy like NSRectFill().
Available when Element is CGRect.
Default Implementations
API Reference
IteratorProtocol Implementations
API Reference
Sequence Implementations
Relationships
Conforms To
IteratorProtocol
Sequence
See Also
Iterating over Collection of Entities
func forEach((Self.Element) throws -> Void) rethrows
Calls the given closure on each element in the sequence in the same order as a for-in loop.
func enumerated() -> EnumeratedSequence<Self>
Returns a sequence of pairs (n, x), where n represents a consecutive integer starting at zero and x represents an element of the sequence.
var underestimatedCount: Int
A value less than or equal to the number of elements in the collection.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Entity.ChildCollection.IndexingIterator
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

