https://developer.apple.com/documentation/realitykit/entity/childcollection/indexingiterator/shuffled(using:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Publishing Changes
M
func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?
Accessing Underlying Storage
M
func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>
M
func dropLast(Int) -> [Self.Element]
M
func dropFirst(Int) -> DropFirstSequence<Self>
Excluding Entities
func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool
func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool
func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool
func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]
func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]
M
func shuffled() -> [Self.Element]
M
func reversed() -> [Self.Element]
M
func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]
M
func sorted() -> [Self.Element]
Reordering Entities
P
var lazy: LazySequence<Self>
M
func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result
M
func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result
Documentation
Open Menu
Swift
Instance Method
shuffled(using:)
Returns the elements of the sequence, shuffled using the given generator as a source for randomness.
RealityKit
Swift
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
func shuffled<T>(using generator: inout T) -> [Self.Element] where T : RandomNumberGenerator
Parameters
generator
The random number generator to use when shuffling the sequence.
Return Value
An array of this sequence’s elements in a shuffled order.
Overview
You use this method to randomize the elements of a sequence when you are using a custom random number generator. For example, you can shuffle the numbers between 0 and 9 by calling the shuffled(using:) method on that range:
let numbers = 0...9
let shuffledNumbers = numbers.shuffled(using: &myGenerator)
// shuffledNumbers == [8, 9, 4, 3, 2, 6, 7, 0, 5, 1]
Complexity: O(n), where n is the length of the sequence.
Note
The algorithm used to shuffle a sequence may change in a future version of Swift. If you’re passing a generator that results in the same shuffled order each time you run your program, that sequence may change when your program is compiled using a different version of Swift.
See Also
Reordering Entities
func sorted() -> [Self.Element]
Returns the elements of the sequence, sorted.
Available when Element conforms to Comparable.
func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]
Returns the elements of the sequence, sorted using the given predicate as the comparison between elements.
func reversed() -> [Self.Element]
Returns an array containing the elements of this sequence in reverse order.
func shuffled() -> [Self.Element]
Returns the elements of the sequence, shuffled.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is shuffled(using:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

