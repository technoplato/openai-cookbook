https://developer.apple.com/documentation/swiftui/sliderSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func defaultWheelPickerItemHeight(CGFloat) -> some View
M
func horizontalRadioGroupLayout() -> some View
M
func pickerStyle<S>(S) -> some View
S
Picker
Choosing from a set of options
M
func toggleStyle<S>(S) -> some View
S
Toggle
init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)
init<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)
init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)
init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)
init<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)
init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)
Getting numeric inputs
S
HelpLink
Beta
S
TextFieldLink
S
SharePreview
S
ShareLink
S
Link
Linking to other content
S
RenameButton
Documentation
Open Menu
Swift
Structure
Slider
A control for selecting a value from a bounded linear range of values.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
struct Slider<Label, ValueLabel> where Label : View, ValueLabel : View
Overview
A slider consists of a “thumb” image that the user moves between two extremes of a linear “track”. The ends of the track represent the minimum and maximum possible values. As the user moves the thumb, the slider updates its bound value.
The following example shows a slider bound to the value speed. As the slider updates this value, a bound Text view shows the value updating. The onEditingChanged closure passed to the slider receives callbacks when the user drags the slider. The example uses this to change the color of the value text.
@State private var speed = 50.0
@State private var isEditing = false


var body: some View {
    VStack {
        Slider(
            value: $speed,
            in: 0...100,
            onEditingChanged: { editing in
                isEditing = editing
            }
        )
        Text("\(speed)")
            .foregroundColor(isEditing ? .red : .blue)
    }
}
You can also use a step parameter to provide incremental steps along the path of the slider. For example, if you have a slider with a range of 0 to 100, and you set the step value to 5, the slider’s increments would be 0, 5, 10, and so on. The following example shows this approach, and also adds optional minimum and maximum value labels.
@State private var speed = 50.0
@State private var isEditing = false


var body: some View {
    Slider(
        value: $speed,
        in: 0...100,
        step: 5
    ) {
        Text("Speed")
    } minimumValueLabel: {
        Text("0")
    } maximumValueLabel: {
        Text("100")
    } onEditingChanged: { editing in
        isEditing = editing
    }
    Text("\(speed)")
        .foregroundColor(isEditing ? .red : .blue)
}
The slider also uses the step to increase or decrease the value when a VoiceOver user adjusts the slider with voice commands.
Topics
Creating a slider
init<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void)
Creates a slider to select a value from a given range.
Available when Label is EmptyView and ValueLabel is EmptyView.
init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void)
Creates a slider to select a value from a given range, subject to a step increment.
Available when Label is EmptyView and ValueLabel is EmptyView.
Creating a slider with labels
init<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, onEditingChanged: (Bool) -> Void)
Creates a slider to select a value from a given range, which displays the provided label.
Available when Label conforms to View and ValueLabel is EmptyView.
init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, onEditingChanged: (Bool) -> Void)
Creates a slider to select a value from a given range, subject to a step increment, which displays the provided label.
Available when Label conforms to View and ValueLabel is EmptyView.
init<V>(value: Binding<V>, in: ClosedRange<V>, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)
Creates a slider to select a value from a given range, which displays the provided labels.
Available when Label conforms to View and ValueLabel conforms to View.
init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, label: () -> Label, minimumValueLabel: () -> ValueLabel, maximumValueLabel: () -> ValueLabel, onEditingChanged: (Bool) -> Void)
Creates a slider to select a value from a given range, subject to a step increment, which displays the provided labels.
Available when Label conforms to View and ValueLabel conforms to View.
Deprecated initializers
init<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, label: () -> Label)
Creates a slider to select a value from a given range, which displays the provided label.
Available when Label conforms to View and ValueLabel is EmptyView.
Deprecated
init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, label: () -> Label)
Creates a slider to select a value from a given range, subject to a step increment, which displays the provided label.
Available when Label conforms to View and ValueLabel is EmptyView.
Deprecated
init<V>(value: Binding<V>, in: ClosedRange<V>, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)
Creates a slider to select a value from a given range, which displays the provided labels.
Available when Label conforms to View and ValueLabel conforms to View.
Deprecated
init<V>(value: Binding<V>, in: ClosedRange<V>, step: V.Stride, onEditingChanged: (Bool) -> Void, minimumValueLabel: ValueLabel, maximumValueLabel: ValueLabel, label: () -> Label)
Creates a slider to select a value from a given range, subject to a step increment, which displays the provided labels.
Available when Label conforms to View and ValueLabel conforms to View.
Deprecated
Relationships
Conforms To
Sendable
View
See Also
Getting numeric inputs
struct Stepper
A control that performs increment and decrement actions.
struct Toggle
A control that toggles between on and off states.
func toggleStyle<S>(S) -> some View
Sets the style for toggles in a view hierarchy.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Slider
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

