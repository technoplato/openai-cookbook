https://developer.apple.com/documentation/swiftui/gesturestateSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
System events
Focus
Drag and drop
Clipboard
Input events
S
RotationGesture
Deprecated
S
MagnificationGesture
Managing gesture state
S
HandActivationBehavior
Beta
S
AnyGesture
r
P
Gesture
M
func defersSystemGestures(on: Edge.Set) -> some View
M
func highPriorityGesture<T>(T, including: GestureMask) -> some View
Defining custom gestures
S
ExclusiveGesture
Documentation
Open Menu
Swift
Structure
GestureState
A property wrapper type that updates a property while the user performs a gesture and resets the property back to its initial state when the gesture ends.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
@propertyWrapper @frozen
struct GestureState<Value>
Overview
Declare a property as @GestureState, pass as a binding to it as a parameter to a gesture’s updating(_:body:) callback, and receive updates to it. A property that’s declared as @GestureState implicitly resets when the gesture becomes inactive, making it suitable for tracking transient state.
Add a long-press gesture to a Circle, and update the interface during the gesture by declaring a property as @GestureState:
struct SimpleLongPressGestureView: View {
    @GestureState private var isDetectingLongPress = false


    var longPress: some Gesture {
        LongPressGesture(minimumDuration: 3)
            .updating($isDetectingLongPress) { currentState, gestureState, transaction in
                gestureState = currentState
            }
    }


    var body: some View {
        Circle()
            .fill(self.isDetectingLongPress ? Color.red : Color.green)
            .frame(width: 100, height: 100, alignment: .center)
            .gesture(longPress)
    }
}
Topics
Creating a gesture state
init(initialValue: Value)
Creates a view state that’s derived from a gesture with an initial value.
init(initialValue: Value, reset: (Value, inout Transaction) -> Void)
Creates a view state that’s derived from a gesture with an initial state value and a closure that provides a transaction to reset it.
init(initialValue: Value, resetTransaction: Transaction)
Creates a view state that’s derived from a gesture with an initial state value and a transaction to reset it.
init(reset: (Value, inout Transaction) -> Void)
Creates a view state that’s derived from a gesture with a closure that provides a transaction to reset it.
Available when Value conforms to ExpressibleByNilLiteral.
init(resetTransaction: Transaction)
Creates a view state that’s derived from a gesture with a transaction to reset it.
Available when Value conforms to ExpressibleByNilLiteral.
init(wrappedValue: Value)
Creates a view state that’s derived from a gesture.
init(wrappedValue: Value, reset: (Value, inout Transaction) -> Void)
Creates a view state that’s derived from a gesture with a wrapped state value and a closure that provides a transaction to reset it.
init(wrappedValue: Value, resetTransaction: Transaction)
Creates a view state that’s derived from a gesture with a wrapped state value and a transaction to reset it.
Getting the state
var wrappedValue: Value
The wrapped value referenced by the gesture state property.
var projectedValue: GestureState<Value>
A binding to the gesture state property.
Relationships
Conforms To
DynamicProperty
Sendable
See Also
Managing gesture state
struct GestureStateGesture
A gesture that updates the state provided by a gesture’s updating callback.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is GestureState
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

