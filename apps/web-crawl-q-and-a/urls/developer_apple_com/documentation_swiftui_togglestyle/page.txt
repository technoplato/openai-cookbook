https://developer.apple.com/documentation/swiftui/togglestyleSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func progressViewStyle<S>(S) -> some View
S
GaugeStyleConfiguration
r
P
GaugeStyle
M
func gaugeStyle<S>(S) -> some View
Styling indicators
S
ToggleStyleConfiguration
S
SwitchToggleStyle
M
func toggleStyle<S>(S) -> some View
Styling toggles
S
MenuStyleConfiguration
r
P
MenuStyle
M
func menuStyle<S>(S) -> some View
Styling menus
r
P
DatePickerStyle
M
func datePickerStyle<S>(S) -> some View
Documentation
Open Menu
Swift
Protocol
ToggleStyle
The appearance and behavior of a toggle.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
protocol ToggleStyle
Overview
To configure the style for a single Toggle or for all toggle instances in a view hierarchy, use the toggleStyle(_:) modifier. You can specify one of the built-in toggle styles, like switch or button:
Toggle(isOn: $isFlagged) {
    Label("Flag", systemImage: "flag.fill")
}
.toggleStyle(.button)
Alternatively, you can create and apply a custom style.
Custom styles
To create a custom style, declare a type that conforms to the ToggleStyle protocol and implement the required makeBody(configuration:) method. For example, you can define a checklist toggle style:
struct ChecklistToggleStyle: ToggleStyle {
    func makeBody(configuration: Configuration) -> some View {
        // Return a view that has checklist appearance and behavior.
    }
}
Inside the method, use the configuration parameter, which is an instance of the ToggleStyleConfiguration structure, to get the label and a binding to the toggle state. To see examples of how to use these items to construct a view that has the appearance and behavior of a toggle, see makeBody(configuration:).
To provide easy access to the new style, declare a corresponding static variable in an extension to ToggleStyle:
extension ToggleStyle where Self == ChecklistToggleStyle {
    static var checklist: ChecklistToggleStyle { .init() }
}
You can then use your custom style:
Toggle(activity.name, isOn: $activity.isComplete)
    .toggleStyle(.checklist)
Topics
Getting built-in toggle styles
static var automatic: DefaultToggleStyle
The default toggle style.
Available when Self is DefaultToggleStyle.
static var button: ButtonToggleStyle
A toggle style that displays as a button with its label as the title.
Available when Self is ButtonToggleStyle.
static var checkbox: CheckboxToggleStyle
A toggle style that displays a checkbox followed by its label.
Available when Self is CheckboxToggleStyle.
static var `switch`: SwitchToggleStyle
A toggle style that displays a leading label and a trailing switch.
Available when Self is SwitchToggleStyle.
Creating custom toggle styles
func makeBody(configuration: Self.Configuration) -> Self.Body
Creates a view that represents the body of a toggle.
Required
struct ToggleStyleConfiguration
The properties of a toggle instance.
typealias Configuration
The properties of a toggle instance.
associatedtype Body : View
A view that represents the appearance and interaction of a toggle.
Required
Supporting types
struct DefaultToggleStyle
The default toggle style.
struct ButtonToggleStyle
A toggle style that displays as a button with its label as the title.
struct CheckboxToggleStyle
A toggle style that displays a checkbox followed by its label.
struct SwitchToggleStyle
A toggle style that displays a leading label and a trailing switch.
Relationships
Conforming Types
ButtonToggleStyle
CheckboxToggleStyle
DefaultToggleStyle
SwitchToggleStyle
See Also
Styling toggles
func toggleStyle<S>(S) -> some View
Sets the style for toggles in a view hierarchy.
struct ToggleStyleConfiguration
The properties of a toggle instance.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is ToggleStyle
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

