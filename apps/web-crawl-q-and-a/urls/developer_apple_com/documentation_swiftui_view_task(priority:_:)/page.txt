https://developer.apple.com/documentation/swiftui/view/task(priority:_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
View layout
Drawing and graphics
Shapes
Menus and commands
Controls and indicators
Images
Text input and output
M
func onDisappear(perform: (() -> Void)?) -> some View
M
func onAppear(perform: (() -> Void)?) -> some View
Responding to view life cycle updates
r
P
EnvironmentalModifier
S
ModifiedContent
S
EmptyModifier
r
P
ViewModifier
M
func modifier<T>(T) -> ModifiedContent<Self, T>
Documentation
Open Menu
Swift
Instance Method
task(priority:_:)
Adds an asynchronous task to perform before this view appears.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
func task(
    priority: TaskPriority = .userInitiated,
    _ action: @escaping () async -> Void
) -> some View
Parameters
priority
The task priority to use when creating the asynchronous task. The default priority is doc://com.apple.documentation/documentation/Swift/TaskPriority/3851283-userInitiated.
action
A closure that SwiftUI calls as an asynchronous task before the view appears. SwiftUI will automatically cancel the task at some point after the view disappears before the action completes.
Return Value
A view that runs the specified action asynchronously before the view appears.
Discussion
Use this modifier to perform an asynchronous task with a lifetime that matches that of the modified view. If the task doesn’t finish before SwiftUI removes the view or the view changes identity, SwiftUI cancels the task.
Use the await keyword inside the task to wait for an asynchronous call to complete, or to wait on the values of an AsyncSequence instance. For example, you can modify a Text view to start a task that loads content from a remote resource:
let url = URL(string: "https://example.com")!
@State private var message = "Loading..."


var body: some View {
    Text(message)
        .task {
            do {
                var receivedLines = [String]()
                for try await line in url.lines {
                    receivedLines.append(line)
                    message = "Received \(receivedLines.count) lines"
                }
            } catch {
                message = "Failed to load"
            }
        }
}
This example uses the lines method to get the content stored at the specified URL as an asynchronous sequence of strings. When each new line arrives, the body of the for-await-in loop stores the line in an array of strings and updates the content of the text view to report the latest line count.
See Also
Responding to view life cycle updates
func onAppear(perform: (() -> Void)?) -> some View
Adds an action to perform before this view appears.
func onDisappear(perform: (() -> Void)?) -> some View
Adds an action to perform after this view disappears.
func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View
Adds a task to perform before this view appears or when a specified value changes.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is task(priority:_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

