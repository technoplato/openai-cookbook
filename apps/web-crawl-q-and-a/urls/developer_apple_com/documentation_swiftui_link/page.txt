Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
PaletteSelectionEffect
Beta
M
func paletteSelectionEffect(PaletteSelectionEffect) -> some View
Beta
P
var defaultWheelPickerItemHeight: CGFloat
M
func defaultWheelPickerItemHeight(CGFloat) -> some View
M
func horizontalRadioGroupLayout() -> some View
M
func pickerStyle<S>(S) -> some View
S
Picker
Linking to other content
S
RenameButton
S
PasteButton
S
EditButton
Creating special-purpose buttons
S
ButtonRepeatBehavior
Beta
S
ButtonRole
S
ButtonBorderShape
Documentation
Open Menu
Swift
Structure
Link
A control for navigating to a URL.
iOS 14.0+
iPadOS 14.0+
macOS 11.0+
Mac Catalyst 14.0+
tvOS 14.0+
watchOS 7.0+
visionOS 1.0+ Beta
struct Link<Label> where Label : View
Overview
Create a link by providing a destination URL and a title. The title tells the user the purpose of the link, and can be a string, a title key that produces a localized string, or a view that acts as a label. The example below creates a link to example.com and displays the title string as a link-styled view:
Link("View Our Terms of Service",
      destination: URL(string: "https://www.example.com/TOS.html")!)
When a user taps or clicks a Link, the default behavior depends on the contents of the URL. For example, SwiftUI opens a Universal Link in the associated app if possible, or in the user’s default web browser if not. Alternatively, you can override the default behavior by setting the openURL environment value with a custom OpenURLAction:
Link("Visit Our Site", destination: URL(string: "https://www.example.com")!)
    .environment(\.openURL, OpenURLAction { url in
        print("Open \(url)")
        return .handled
    })
As with other views, you can style links using standard view modifiers depending on the view type of the link’s label. For example, a Text label could be modified with a custom font(_:) or foregroundColor(_:) to customize the appearance of the link in your app’s UI.
Topics
Creating a link
init(LocalizedStringKey, destination: URL)
Creates a control, consisting of a URL and a title key, used to navigate to a URL.
Available when Label is Text.
init<S>(S, destination: URL)
Creates a control, consisting of a URL and a title string, used to navigate to a URL.
Available when Label is Text.
init(destination: URL, label: () -> Label)
Creates a control, consisting of a URL and a label, used to navigate to the given URL.
Relationships
Conforms To
Sendable
View
See Also
Linking to other content
struct ShareLink
A view that controls a sharing presentation.
struct SharePreview
A representation of a type to display in a share preview.
struct TextFieldLink
A control that requests text input from the user when pressed.
struct HelpLink
A button with a standard appearance that opens app-specific help documentation.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Link
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

