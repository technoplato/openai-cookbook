https://developer.apple.com/documentation/swiftui/canvas/init(opaque:colormode:rendersasynchronously:renderer:symbols:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
r
P
ShapeStyle
P
var backgroundStyle: AnyShapeStyle?
M
func backgroundStyle<S>(S) -> some View
M
func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View
M
func foregroundStyle<S1, S2>(S1, S2) -> some View
M
func foregroundStyle<S>(S) -> some View
M
func border<S>(S, width: CGFloat) -> some View
init(opaque: Bool, colorMode: ColorRenderingMode, rendersAsynchronously: Bool, renderer: (inout GraphicsContext, CGSize) -> Void, symbols: () -> Symbols)
M
init(opaque: Bool, colorMode: ColorRenderingMode, rendersAsynchronously: Bool, renderer: (inout GraphicsContext, CGSize) -> Void)
Creating a canvas
S
Canvas
Add Rich Graphics to Your SwiftUI App
Immediate mode drawing
Drawing and graphics
Shapes
Menus and commands
Documentation
Open Menu
Swift
Initializer
init(opaque:colorMode:rendersAsynchronously:renderer:symbols:)
Creates and configures a canvas that you supply with renderable child views.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
init(
    opaque: Bool = false,
    colorMode: ColorRenderingMode = .nonLinear,
    rendersAsynchronously: Bool = false,
    renderer: @escaping (inout GraphicsContext, CGSize) -> Void,
    @ViewBuilder symbols: () -> Symbols
)
Parameters
opaque
A Boolean that indicates whether the canvas is fully opaque. You might be able to improve performance by setting this value to true, but then drawing a non-opaque image into the context produces undefined results. The default is false.
colorMode
A working color space and storage format of the canvas. The default is ColorRenderingMode.nonLinear.
rendersAsynchronously
A Boolean that indicates whether the canvas can present its contents to its parent view asynchronously. The default is false.
renderer
A closure in which you conduct immediate mode drawing. The closure takes two inputs: a context that you use to issue drawing commands and a size — representing the current size of the canvas — that you can use to customize the content. The canvas calls the renderer any time it needs to redraw the content.
symbols
A ViewBuilder that you use to supply SwiftUI views to the canvas for use during drawing. Uniquely tag each view using the tag(_:) modifier, so that you can find them from within your renderer using the resolveSymbol(id:) method.
Discussion
This initializer behaves like the init(opaque:colorMode:rendersAsynchronously:renderer:) initializer, except that you also provide a collection of SwiftUI views for the renderer to use as drawing elements.
SwiftUI stores a rendered version of each child view that you specify in the symbols view builder and makes these available to the canvas. Tag each child view so that you can retrieve it from within the renderer using the resolveSymbol(id:) method. For example, you can create a scatter plot using a passed-in child view as the mark for each data point:
struct ScatterPlotView<Mark: View>: View {
    let rects: [CGRect]
    let mark: Mark


    enum SymbolID: Int {
        case mark
    }


    var body: some View {
        Canvas { context, size in
            if let mark = context.resolveSymbol(id: SymbolID.mark) {
                for rect in rects {
                    context.draw(mark, in: rect)
                }
            }
        } symbols: {
            mark.tag(SymbolID.mark)
        }
        .frame(width: 300, height: 200)
        .border(Color.blue)
    }
}
You can use any SwiftUI view for the mark input:
ScatterPlotView(rects: rects, mark: Image(systemName: "circle"))
If the rects input contains 50 randomly arranged doc://com.apple.documentation/documentation/CoreGraphics/CGRect instances, SwiftUI draws a plot like this:
The symbol inputs, like all other elements that you draw to the canvas, lack individual accessibility and interactivity, even if the original SwiftUI view has these attributes. However, you can add accessibility and interactivity modifers to the canvas as a whole.
See Also
Creating a canvas
init(opaque: Bool, colorMode: ColorRenderingMode, rendersAsynchronously: Bool, renderer: (inout GraphicsContext, CGSize) -> Void)
Creates and configures a canvas.
Available when Symbols is EmptyView.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(opaque:colorMode:rendersAsynchronously:renderer:symbols:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

