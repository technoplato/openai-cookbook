https://developer.apple.com/documentation/swiftui/scene/commandsreplaced(content:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func menuOrder(MenuOrder) -> some View
Setting a preferred order
S
MenuActionDismissBehavior
M
func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View
Configuring menu dismissal
P
var menuIndicatorVisibility: Visibility
M
func menuIndicator(Visibility) -> some View
M
func commandsRemoved() -> some Scene
M
func commands<Content>(content: () -> Content) -> some Scene
Defining commands
M
func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View
M
func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View
M
func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View
Creating context menus
M
func menuStyle<S>(S) -> some View
Documentation
Open Menu
Swift
Instance Method
commandsReplaced(content:)
Replaces all commands defined by the modified scene with the commands from the builder.
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
visionOS 1.0+ Beta
func commandsReplaced<Content>(@CommandsBuilder content: () -> Content) -> some Scene where Content : Commands
Parameters
content
A Commands builder whose output will be used to replace the commands normally provided by the modified scene.
Return Value
A scene that replaces any commands defined by its children with alternative content.
Discussion
WindowGroup, Window, and other scene types all have an associated set of commands that they include by default. Apply this modifier to a scene to replace those commands with the output from the given builder.
For example, the following code adds a scene for showing the contents of the pasteboard in a dedicated window. We replace the scene’s default Window > Clipboard menu command with a custom Edit > Show Clipboard command that we place next to the other pasteboard commands.
@main
struct Example: App {
    @Environment(\.openWindow) var openWindow


    var body: some Scene {
        ...


        Window("Clipboard", id: "clipboard") {
            ClipboardContentView()
        }
        .commandsReplaced {
            CommandGroup(after: .pasteboard) {
                Section {
                    Button("Show Clipboard") {
                        openWindow(id: "clipboard")
                    }
                }
            }
        }
    }
}
See Also
Defining commands
func commands<Content>(content: () -> Content) -> some Scene
Adds commands to the scene.
func commandsRemoved() -> some Scene
Removes all commands defined by the modified scene.
protocol Commands
Conforming types represent a group of related commands that can be exposed to the user via the main menu on macOS and key commands on iOS.
struct CommandMenu
Command menus are stand-alone, top-level containers for controls that perform related, app-specific commands.
struct CommandGroup
Groups of controls that you can add to existing command menus.
struct CommandsBuilder
Constructs command sets from multi-expression closures. Like ViewBuilder, it supports up to ten expressions in the closure body.
struct CommandGroupPlacement
The standard locations that you can place new command groups relative to.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is commandsReplaced(content:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

