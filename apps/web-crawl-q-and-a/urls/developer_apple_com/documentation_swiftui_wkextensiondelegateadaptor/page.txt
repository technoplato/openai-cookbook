https://developer.apple.com/documentation/swiftui/wkextensiondelegateadaptorSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Persistent storage
Preferences
Environment values
Model data
Data and storage
App extensions
Search
S
WKApplicationDelegateAdaptor
Targeting watchOS
S
NSApplicationDelegateAdaptor
Targeting macOS
S
UIApplicationDelegateAdaptor
O
property list key UILaunchScreens
O
property list key UILaunchScreen
Targeting iOS and iPadOS
Documentation
Open Menu
Swift
Structure
WKExtensionDelegateAdaptor
A property wrapper type that you use to create a WatchKit extension delegate.
watchOS 7.0+
@MainActor @propertyWrapper
struct WKExtensionDelegateAdaptor<DelegateType> where DelegateType : NSObject, DelegateType : WKExtensionDelegate
Overview
To handle extension delegate callbacks in an extension that uses the SwiftUI life cycle, define a type that conforms to the WKExtensionDelegate protocol, and implement the delegate methods that you need. For example, you can implement the didRegisterForRemoteNotifications(withDeviceToken:) method to handle remote notification registration:
class MyExtensionDelegate: NSObject, WKExtensionDelegate, ObservableObject {
    func didRegisterForRemoteNotifications(withDeviceToken: Data) {
        // Record the device token.
    }
}
Then use the WKExtensionDelegateAdaptor property wrapper inside your App declaration to tell SwiftUI about the delegate type:
@main
struct MyApp: App {
    @WKExtensionDelegateAdaptor private var extensionDelegate: MyExtensionDelegate


    var body: some Scene { ... }
}
SwiftUI instantiates the delegate and calls the delegate’s methods in response to life cycle events. Define the delegate adaptor only in your App declaration, and only once for a given extension. If you declare it more than once, SwiftUI generates a runtime error.
If your extension delegate conforms to the ObservableObject protocol, as in the example above, then SwiftUI puts the delegate it creates into the Environment. You can access the delegate from any scene or view in your extension using the EnvironmentObject property wrapper:
@EnvironmentObject private var extensionDelegate: MyExtensionDelegate
This enables you to use the dollar sign ($) prefix to get a binding to published properties that you declare in the delegate. For more information, see projectedValue.
Important
Manage an externsion’s life cycle events without using a delegate whenever possible. For example, prefer to handle changes in ScenePhase instead of relying on delegate callbacks, like applicationDidFinishLaunching().
Topics
Creating a delegate adaptor
init(DelegateType.Type)
Creates a WatchKit extension delegate adaptor.
init(DelegateType.Type)
Creates a WatchKit extension delegate adaptor using a delegate that’s an observable object.
Available when DelegateType inherits NSObject, DelegateType conforms to ObservableObject, and DelegateType conforms to WKExtensionDelegate.
init(DelegateType.Type)
Creates a WatchKit extension delegate adaptor using an observable delegate.
Available when DelegateType inherits NSObject, DelegateType conforms to Observable, and DelegateType conforms to WKExtensionDelegate.
Beta
Getting the delegate adaptor
var projectedValue: ObservedObject<DelegateType>.Wrapper
A projection of the observed object that provides bindings to its properties.
Available when DelegateType inherits NSObject, DelegateType conforms to ObservableObject, and DelegateType conforms to WKExtensionDelegate.
var wrappedValue: DelegateType
The underlying delegate.
Relationships
Conforms To
DynamicProperty
Sendable
See Also
Targeting watchOS
struct WKApplicationDelegateAdaptor
A property wrapper that is used in App to provide a delegate from WatchKit.
Current page is WKExtensionDelegateAdaptor
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

