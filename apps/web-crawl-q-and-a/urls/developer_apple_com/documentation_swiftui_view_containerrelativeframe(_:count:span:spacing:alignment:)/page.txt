https://developer.apple.com/documentation/swiftui/view/containerrelativeframe(_:count:span:spacing:alignment:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
ViewDimensions
r
P
AlignmentID
S
DepthAlignment
Beta
S
VerticalAlignment
S
HorizontalAlignment
S
Alignment
M
func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View
M
func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View
Beta
M
func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View
Beta
M
func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View
Beta
M
func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View
M
func frame(depth: CGFloat?, alignment: DepthAlignment) -> some View
Beta
M
func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View
Influencing a view’s size
S
ScenePadding
Documentation
Open Menu
Swift
Instance Method
containerRelativeFrame(_:count:span:spacing:alignment:)
Positions this view within an invisible frame with a size relative to the nearest container.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
func containerRelativeFrame(
    _ axes: Axis.Set,
    count: Int,
    span: Int = 1,
    spacing: CGFloat,
    alignment: Alignment = .center
) -> some View
Discussion
Use the containerRelativeFrame(_:alignment:) modifier to specify a size for a view’s width, height, or both that is dependent on the size of the nearest container. Different things can represent a “container” including:
The window presenting a view on iPadOS or macOS, or the screen of a device on iOS.
A column of a NavigationSplitView
A NavigationStack
A tab of a TabView
A scrollable view like ScrollView or List
The size provided to this modifier is the size of a container like the ones listed above subtraacking any safe area insets that might be applied to that container.
The following example will have each purple rectangle occupy the full size of the screen on iOS:
ScrollView(.horizontal) {
    LazyHStack(spacing: 0.0) {
        ForEach(items) { item in
            Rectangle()
                .fill(.purple)
                .containerRelativeFrame([.horizontal, .vertical])
        }
    }
}
Use this modifier to size a view such that multiple views will be visible in the container. When using this modifier, the count refers to the total number of rows or columns that the length of the container size in a particular axis should be divided into. The span refers to the number of rows or columns that the modified view should actually occupy. Thus the size of the element can be described like so:
let availableWidth = (containerWidth - (spacing * (count - 1)))
let columnWidth = (availableWidth / count)
let itemWidth = (columnWidth * span) + ((span - 1) * spacing)
The following example only uses the nearest container size in the horizontal axis, allowing the vertical axis to be determined using the aspectRatio(_:contentMode:) modifier.
ScrollView(.horizontal) {
    LazyHStack(spacing: 10.0) {
        ForEach(items) { item in
            Rectangle()
                .fill(.purple)
                .aspectRatio(3.0 / 2.0, contentMode: .fit)
                .containerRelativeFrame(
                    .horizontal, count: 4, span: 3, spacing: 10.0)
        }
    }
}
.safeAreaPadding(.horizontal, 20.0)
Use the containerRelativeFrame(_:alignment:_:) modifier to apply your own custom logic to adjust the size of the nearest container for your view. The following example will result in the container frame’s width being divided by 3 and using that value as the width of the purple rectangle.
Rectangle()
    .fill(.purple)
    .aspectRatio(1.0, contentMode: .fill)
    .containerRelativeFrame(
        .horizontal, alignment: .topLeading
    ) { length, axis in
        if axis == .vertical {
            return length / 3.0
        } else {
            return length / 5.0
        }
    }
See Also
Influencing a view’s size
func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View
Positions this view within an invisible frame with the specified size.
func frame(depth: CGFloat?, alignment: DepthAlignment) -> some View
Positions this view within an invisible frame with the specified depth.
Beta
func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View
Positions this view within an invisible frame having the specified size constraints.
func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View
Positions this view within an invisible frame having the specified depth constraints.
Beta
func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View
Positions this view within an invisible frame with a size relative to the nearest container.
Beta
func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View
Positions this view within an invisible frame with a size relative to the nearest container.
Beta
func fixedSize() -> some View
Fixes this view at its ideal size.
func fixedSize(horizontal: Bool, vertical: Bool) -> some View
Fixes this view at its ideal size in the specified dimensions.
func layoutPriority(Double) -> some View
Sets the priority by which a parent layout should apportion space to this child.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is containerRelativeFrame(_:count:span:spacing:alignment:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

