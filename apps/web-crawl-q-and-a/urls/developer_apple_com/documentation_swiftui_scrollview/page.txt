https://developer.apple.com/documentation/swiftui/scrollviewSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
PagingScrollTargetBehavior
Beta
S
ScrollTargetBehaviorContext
Beta
r
P
ScrollTargetBehavior
Beta
S
ScrollTarget
Beta
M
func scrollTargetLayout(isEnabled: Bool) -> some View
Beta
M
func scrollTargetBehavior(some ScrollTargetBehavior) -> some View
Beta
Defining scroll targets
Creating a scroll view
Scroll views
View groupings
Tables
Lists
Custom layout
Layout adjustments
Layout fundamentals
Documentation
Open Menu
Swift
Structure
ScrollView
A scrollable view.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
struct ScrollView<Content> where Content : View
Overview
The scroll view displays its content within the scrollable content region. As the user performs platform-appropriate scroll gestures, the scroll view adjusts what portion of the underlying content is visible. ScrollView can scroll horizontally, vertically, or both, but does not provide zooming functionality.
In the following example, a ScrollView allows the user to scroll through a VStack containing 100 Text views. The image after the listing shows the scroll view’s temporarily visible scrollbar at the right; you can disable it with the showsIndicators parameter of the ScrollView initializer.
var body: some View {
    ScrollView {
        VStack(alignment: .leading) {
            ForEach(0..<100) {
                Text("Row \($0)")
            }
        }
    }
}
Controlling Scroll Position
You can influence where a scroll view is initially scrolled by using the defaultScrollAnchor(_:) view modifier.
Provide a value of `UnitPoint/center`` to have the scroll view start in the center of its content when a scroll view is scrollable in both axes.
ScrollView([.horizontal, .vertical]) {
    // initially centered content
}
.defaultScrollAnchor(.center)
Or provide an alignment of `UnitPoint/bottom`` to have the scroll view start at the bottom of its content when a scroll view is scrollable in its vertical axes.
ScrollView {
    // initially bottom aligned content
}
.defaultScrollAnchor(.bottom)
After the scroll view initially renders, the user may scroll the content of the scroll view.
To perform programmatic scrolling, wrap one or more scroll views with a ScrollViewReader.
Topics
Creating a scroll view
init(Axis.Set, showsIndicators: Bool, content: () -> Content)
Creates a new instance that’s scrollable in the direction of the given axis and can show indicators while scrolling.
init(Axis.Set, content: () -> Content)
Creates a new instance that’s scrollable in the direction of the given axis and can show indicators while scrolling.
Available when Content conforms to View.
Configuring a scroll view
var content: Content
The scroll view’s content.
var axes: Axis.Set
The scrollable axes of the scroll view.
var showsIndicators: Bool
A value that indicates whether the scroll view displays the scrollable component of the content offset, in a way that’s suitable for the platform.
Supporting types
var body: some View
The content and behavior of the scroll view.
Relationships
Conforms To
Sendable
View
See Also
Creating a scroll view
struct ScrollViewReader
A view that provides programmatic scrolling, by working with a proxy to scroll to known child views.
struct ScrollViewProxy
A proxy value that supports programmatic scrolling of the scrollable views within a view hierarchy.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is ScrollView
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

