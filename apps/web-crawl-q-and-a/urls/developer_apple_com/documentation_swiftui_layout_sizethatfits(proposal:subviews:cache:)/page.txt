https://developer.apple.com/documentation/swiftui/layout/sizethatfits(proposal:subviews:cache:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func layoutValue<K>(key: K.Type, value: K.Value) -> some View
Associating values with views in a custom layout
S
ViewSpacing
S
ProposedViewSize
S
LayoutProperties
Configuring a custom layout
S
LayoutSubviews
func explicitAlignment(of: VerticalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?
func explicitAlignment(of: HorizontalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?
func placeSubviews(in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)
func sizeThatFits(proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGSize
Sizing the container and placing subviews
r
P
Layout
Composing custom layouts with SwiftUI
Creating a custom layout container
Custom layout
Layout adjustments
Layout fundamentals
View layout
Documentation
Open Menu
Swift
Instance Method
sizeThatFits(proposal:subviews:cache:)
Returns the size of the composite view, given a proposed size and the view’s subviews.
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
tvOS 16.0+
watchOS 9.0+
visionOS 1.0+ Beta
func sizeThatFits(
    proposal: ProposedViewSize,
    subviews: Self.Subviews,
    cache: inout Self.Cache
) -> CGSize
Required
Parameters
proposal
A size proposal for the container. The container’s parent view that calls this method might call the method more than once with different proposals to learn more about the container’s flexibility before deciding which proposal to use for placement.
subviews
A collection of proxies that represent the views that the container arranges. You can use the proxies in the collection to get information about the subviews as you determine how much space the container needs to display them.
cache
Optional storage for calculated data that you can share among the methods of your custom layout container. See makeCache(subviews:) for details.
Return Value
A size that indicates how much space the container needs to arrange its subviews.
Discussion
Implement this method to tell your custom layout container’s parent view how much space the container needs for a set of subviews, given a size proposal. The parent might call this method more than once during a layout pass with different proposed sizes to test the flexibility of the container, using proposals like:
The zero proposal; respond with the layout’s minimum size.
The infinity proposal; respond with the layout’s maximum size.
The unspecified proposal; respond with the layout’s ideal size.
The parent might also choose to test flexibility in one dimension at a time. For example, a horizontal stack might propose a fixed height and an infinite width, and then the same height with a zero width.
The following example calculates the size for a basic vertical stack that places views in a column, with no spacing between the views:
private struct BasicVStack: Layout {
    func sizeThatFits(
        proposal: ProposedViewSize,
        subviews: Subviews,
        cache: inout ()
    ) -> CGSize {
        subviews.reduce(CGSize.zero) { result, subview in
            let size = subview.sizeThatFits(.unspecified)
            return CGSize(
                width: max(result.width, size.width),
                height: result.height + size.height)
        }
    }


    // This layout also needs a placeSubviews() implementation.
}
The implementation asks each subview for its ideal size by calling the sizeThatFits(_:) method with an unspecified proposed size. It then reduces these values into a single size that represents the maximum subview width and the sum of subview heights. Because this example isn’t flexible, it ignores its size proposal input and always returns the same value for a given set of subviews.
SwiftUI views choose their own size, so the layout engine always uses a value that you return from this method as the actual size of the composite view. That size factors into the construction of the bounds input to the placeSubviews(in:proposal:subviews:cache:) method.
See Also
Sizing the container and placing subviews
func placeSubviews(in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)
Assigns positions to each of the layout’s subviews.
Required
typealias Subviews
A collection of proxies for the subviews of a layout view.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is sizeThatFits(proposal:subviews:cache:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

