https://developer.apple.com/documentation/swiftui/asyncimageSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Configuring an image
Fitting images into available space
M
func imageScale(Image.Scale) -> some View
P
var imageScale: Image.Scale
E
Image.Scale
E
Image.Orientation
E
Image.ResizingMode
Loading images asynchronously
S
SymbolEffectTransition
Setting symbol rendering modes
M
func symbolRenderingMode(SymbolRenderingMode?) -> some View
P
var symbolRenderingMode: SymbolRenderingMode?
S
SymbolRenderingMode
Rendering images from views
C
ImageRenderer
Documentation
Open Menu
Swift
Structure
AsyncImage
A view that asynchronously loads and displays an image.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
struct AsyncImage<Content> where Content : View
Overview
This view uses the shared URLSession instance to load an image from the specified URL, and then display it. For example, you can display an icon that’s stored on a server:
AsyncImage(url: URL(string: "https://example.com/icon.png"))
    .frame(width: 200, height: 200)
Until the image loads, the view displays a standard placeholder that fills the available space. After the load completes successfully, the view updates to display the image. In the example above, the icon is smaller than the frame, and so appears smaller than the placeholder.
You can specify a custom placeholder using init(url:scale:content:placeholder:). With this initializer, you can also use the content parameter to manipulate the loaded image. For example, you can add a modifier to make the loaded image resizable:
AsyncImage(url: URL(string: "https://example.com/icon.png")) { image in
    image.resizable()
} placeholder: {
    ProgressView()
}
.frame(width: 50, height: 50)
For this example, SwiftUI shows a ProgressView first, and then the image scaled to fit in the specified frame:
Important
You can’t apply image-specific modifiers, like resizable(capInsets:resizingMode:), directly to an AsyncImage. Instead, apply them to the Image instance that your content closure gets when defining the view’s appearance.
To gain more control over the loading process, use the init(url:scale:transaction:content:) initializer, which takes a content closure that receives an AsyncImagePhase to indicate the state of the loading operation. Return a view that’s appropriate for the current phase:
AsyncImage(url: URL(string: "https://example.com/icon.png")) { phase in
    if let image = phase.image {
        image // Displays the loaded image.
    } else if phase.error != nil {
        Color.red // Indicates an error.
    } else {
        Color.blue // Acts as a placeholder.
    }
}
Topics
Loading an image
init(url: URL?, scale: CGFloat)
Loads and displays an image from the specified URL.
init<I, P>(url: URL?, scale: CGFloat, content: (Image) -> I, placeholder: () -> P)
Loads and displays a modifiable image from the specified URL using a custom placeholder until the image loads.
Loading an image in phases
init(url: URL?, scale: CGFloat, transaction: Transaction, content: (AsyncImagePhase) -> Content)
Loads and displays a modifiable image from the specified URL in phases.
Relationships
Conforms To
Sendable
View
See Also
Loading images asynchronously
enum AsyncImagePhase
The current phase of the asynchronous image loading operation.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is AsyncImage
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

