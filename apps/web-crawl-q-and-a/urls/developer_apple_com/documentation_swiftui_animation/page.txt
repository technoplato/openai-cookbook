https://developer.apple.com/documentation/swiftui/animationSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
P
static var spring: Animation
Customizing spring animations
M
static func snappy(duration: TimeInterval, extraBounce: Double) -> Animation
P
static var snappy: Animation
M
static func smooth(duration: TimeInterval, extraBounce: Double) -> Animation
P
static var smooth: Animation
M
static func bouncy(duration: TimeInterval, extraBounce: Double) -> Animation
S
AnimationCompletionCriteria
Beta
func withAnimation<Result>(Animation?, completionCriteria: AnimationCompletionCriteria, () throws -> Result, completion: () -> Void) rethrows -> Result
Beta
func withAnimation<Result>(Animation?, () throws -> Result) rethrows -> Result
Adding state-based animation to an action
Animations
View styles
View configuration
View fundamentals
Documentation
Open Menu
Swift
Structure
Animation
The way a view changes over time to create a smooth visual transition from one state to another.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
@frozen
struct Animation
Overview
An Animation provides a visual transition of a view when a state value changes from one value to another. The characteristics of this transition vary according to the animation type. For instance, a linear animation provides a mechanical feel to the animation because its speed is consistent from start to finish. In contrast, an animation that uses easing, like easeOut, offers a more natural feel by varying the acceleration of the animation.
To apply an animation to a view, add the animation(_:value:) modifier, and specify both an animation type and the value to animate. For instance, the Circle view in the following code performs an easeIn animation each time the state variable scale changes:
struct ContentView: View {
    @State private var scale = 0.5


    var body: some View {
        VStack {
            Circle()
                .scaleEffect(scale)
                .animation(.easeIn, value: scale)
            HStack {
                Button("+") { scale += 0.1 }
                Button("-") { scale -= 0.1 }
            }
        }
        .padding()
    }
Play
When the value of scale changes, the modifier scaleEffect(_:anchor:) resizes Circle according to the new value. SwiftUI can animate the transition between sizes because Circle conforms to the Shape protocol. Shapes in SwiftUI conform to the Animatable protocol, which describes how to animate a property of a view.
In addition to adding an animation to a view, you can also configure the animation by applying animation modifiers to the animation type. For example, you can:
Delay the start of the animation by using the delay(_:) modifier.
Repeat the animation by using the repeatCount(_:autoreverses:) or repeatForever(autoreverses:) modifiers.
Change the speed of the animation by using the speed(_:) modifier.
For example, the Circle view in the following code repeats the easeIn animation three times by using the repeatCount(_:autoreverses:) modifier:
struct ContentView: View {
    @State private var scale = 0.5


    var body: some View {
        VStack {
            Circle()
                .scaleEffect(scale)
                .animation(.easeIn.repeatCount(3), value: scale)
            HStack {
                Button("+") { scale += 0.1 }
                Button("-") { scale -= 0.1 }
            }
        }
        .padding()
    }
}
Play
A view can also perform an animation when a binding value changes. To specify the animation type on a binding, call its animation(_:) method. For example, the view in the following code performs a linear animation, moving the box truck between the leading and trailing edges of the view. The truck moves each time a person clicks the Toggle control, which changes the value of the $isTrailing binding.
struct ContentView: View {
    @State private var isTrailing = false


    var body: some View {
       VStack(alignment: isTrailing ? .trailing : .leading) {
            Image(systemName: "box.truck")
                .font(.system(size: 64))


            Toggle("Move to trailing edge",
                   isOn: $isTrailing.animation(.linear))
        }
    }
}
Play
Topics
Getting the default animation
static let `default`: Animation
A default animation instance.
Getting linear animations
static var linear: Animation
An animation that moves at a constant speed.
static func linear(duration: TimeInterval) -> Animation
An animation that moves at a constant speed during a specified duration.
Getting eased animations
static var easeIn: Animation
An animation that starts slowly and then increases speed towards the end of the movement.
static func easeIn(duration: TimeInterval) -> Animation
An animation with a specified duration that starts slowly and then increases speed towards the end of the movement.
static var easeOut: Animation
An animation that starts quickly and then slows towards the end of the movement.
static func easeOut(duration: TimeInterval) -> Animation
An animation with a specified duration that starts quickly and then slows towards the end of the movement.
static var easeInOut: Animation
An animation that combines the behaviors of in and out easing animations.
static func easeInOut(duration: TimeInterval) -> Animation
An animation with a specified duration that combines the behaviors of in and out easing animations.
Getting built-in spring animations
static var bouncy: Animation
A spring animation with a predefined duration and higher amount of bounce.
static func bouncy(duration: TimeInterval, extraBounce: Double) -> Animation
A spring animation with a predefined duration and higher amount of bounce that can be tuned.
static var smooth: Animation
A smooth spring animation with a predefined duration and no bounce.
static func smooth(duration: TimeInterval, extraBounce: Double) -> Animation
A smooth spring animation with a predefined duration and no bounce that can be tuned.
static var snappy: Animation
A spring animation with a predefined duration and small amount of bounce that feels more snappy.
static func snappy(duration: TimeInterval, extraBounce: Double) -> Animation
A spring animation with a predefined duration and small amount of bounce that feels more snappy and can be tuned.
Customizing spring animations
static var spring: Animation
A persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.
static func spring(Spring, blendDuration: TimeInterval) -> Animation
A persistent spring animation.
Beta
static func spring(duration: TimeInterval, bounce: Double, blendDuration: Double) -> Animation
A persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the duration values between springs over a time period.
static func spring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation
A persistent spring animation. When mixed with other spring() or interactiveSpring() animations on the same property, each animation will be replaced by their successor, preserving velocity from one animation to the next. Optionally blends the response values between springs over a time period.
static var interactiveSpring: Animation
A convenience for a spring animation with a lower duration value, intended for driving interactive animations.
static func interactiveSpring(response: Double, dampingFraction: Double, blendDuration: TimeInterval) -> Animation
A convenience for a spring animation with a lower response value, intended for driving interactive animations.
static var interpolatingSpring: Animation
An interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.
static func interpolatingSpring(Spring, initialVelocity: Double) -> Animation
An interpolating spring animation that uses a damped spring model to produce values in the range of one to zero.
Beta
static func interpolatingSpring(duration: TimeInterval, bounce: Double, initialVelocity: Double) -> Animation
An interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.
static func interpolatingSpring(mass: Double, stiffness: Double, damping: Double, initialVelocity: Double) -> Animation
An interpolating spring animation that uses a damped spring model to produce values in the range [0, 1] that are then used to interpolate within the [from, to] range of the animated property. Preserves velocity across overlapping animations by adding the effects of each animation.
Creating custom animations
init<A>(A)
Create an Animation that contains the specified custom animation.
Beta
static func timingCurve(UnitCurve, duration: TimeInterval) -> Animation
Creates a new animation with speed controlled by the given curve.
Beta
static func timingCurve(Double, Double, Double, Double, duration: TimeInterval) -> Animation
An animation created from a cubic BÃ©zier timing curve.
Configuring an animation
func delay(TimeInterval) -> Animation
Delays the start of the animation by the specified number of seconds.
func repeatCount(Int, autoreverses: Bool) -> Animation
Repeats the animation for a specific number of times.
func repeatForever(autoreverses: Bool) -> Animation
Repeats the animation for the lifespan of the view containing the animation.
func speed(Double) -> Animation
Changes the duration of an animation by adjusting its speed.
Instance Properties
var base: CustomAnimation
Beta
Instance Methods
func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V?
Calculates the current value of the animation.
Beta
func logicallyComplete(after: TimeInterval) -> Animation
Causes the animation to report logical completion after the specified duration, if it has not already logically completed.
Beta
func shouldMerge<V>(previous: Animation, value: V, time: TimeInterval, context: inout AnimationContext<V>) -> Bool
Returns a Boolean value that indicates whether the current animation should merge with a previous animation.
Beta
func velocity<V>(value: V, time: TimeInterval, context: AnimationContext<V>) -> V?
Calculates the current velocity of the animation.
Beta
Type Methods
static func interactiveSpring(duration: TimeInterval, extraBounce: Double, blendDuration: TimeInterval) -> Animation
A convenience for a spring animation with a lower response value, intended for driving interactive animations.
Relationships
Conforms To
CustomDebugStringConvertible
CustomReflectable
CustomStringConvertible
Equatable
Hashable
Sendable
See Also
Adding state-based animation to an action
func withAnimation<Result>(Animation?, () throws -> Result) rethrows -> Result
Returns the result of recomputing the viewâs body with the provided animation.
func withAnimation<Result>(Animation?, completionCriteria: AnimationCompletionCriteria, () throws -> Result, completion: () -> Void) rethrows -> Result
Returns the result of recomputing the viewâs body with the provided animation, and runs the completion when all animations are complete.
Beta
struct AnimationCompletionCriteria
The criteria that determines when an animation is considered finished.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Animation
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

