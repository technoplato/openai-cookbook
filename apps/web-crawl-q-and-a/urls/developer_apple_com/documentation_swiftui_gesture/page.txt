https://developer.apple.com/documentation/swiftui/gestureSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func targetedToEntity(Entity) -> some Gesture<EntityTargetValue<Self.Value>>
Beta
M
func targetedToAnyEntity() -> some Gesture<EntityTargetValue<Self.Value>>
Beta
Using a gesture with a RealityKit entity
M
func handActivationBehavior(HandActivationBehavior) -> some Gesture<Self.Value>
Beta
Customizing gesture activation
M
func map<T>((Self.Value) -> T) -> _MapGesture<Self, T>
Transforming a gesture
func updating<State>(GestureState<State>, body: (Self.Value, inout State, inout Transaction) -> Void) -> GestureStateGesture<Self, State>
M
func defersSystemGestures(on: Edge.Set) -> some View
M
func highPriorityGesture<T>(T, including: GestureMask) -> some View
Defining custom gestures
S
ExclusiveGesture
S
SimultaneousGesture
S
SequenceGesture
M
func simultaneousGesture<T>(T, including: GestureMask) -> some View
Composing SwiftUI gestures
Documentation
Open Menu
Swift
Protocol
Gesture
An instance that matches a sequence of events to a gesture, and returns a stream of values for each of its states.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
protocol Gesture<Value>
Overview
Create custom gestures by declaring types that conform to the Gesture protocol.
Topics
Implementing a custom gesture
var body: Self.Body
The content and behavior of the gesture.
Required
associatedtype Body : Gesture
The type of gesture representing the body of Self.
Required
Performing the gesture
func updating<State>(GestureState<State>, body: (Self.Value, inout State, inout Transaction) -> Void) -> GestureStateGesture<Self, State>
Updates the provided gesture state property as the gesture’s value changes.
func onChanged((Self.Value) -> Void) -> _ChangedGesture<Self>
Adds an action to perform when the gesture’s value changes.
Available when Value conforms to Equatable.
func onEnded((Self.Value) -> Void) -> _EndedGesture<Self>
Adds an action to perform when the gesture ends.
associatedtype Value
The type representing the gesture’s value.
Required
Composing gestures
func simultaneously<Other>(with: Other) -> SimultaneousGesture<Self, Other>
Combines a gesture with another gesture to create a new gesture that recognizes both gestures at the same time.
func sequenced<Other>(before: Other) -> SequenceGesture<Self, Other>
Sequences a gesture with another one to create a new gesture, which results in the second gesture only receiving events after the first gesture succeeds.
func exclusively<Other>(before: Other) -> ExclusiveGesture<Self, Other>
Combines two gestures exclusively to create a new gesture where only one gesture succeeds, giving precedence to the first gesture.
Adding modifier keys to a gesture
func modifiers(EventModifiers) -> _ModifiersGesture<Self>
Combines a gesture with keyboard modifiers.
Transforming a gesture
func map<T>((Self.Value) -> T) -> _MapGesture<Self, T>
Returns a gesture that’s the result of mapping the given closure over the gesture.
Customizing gesture activation
func handActivationBehavior(HandActivationBehavior) -> some Gesture<Self.Value>
Customizes the activation behavior for a gesture when driven by hand or hand-like input. Use automatic to allow a gesture to activate with default system behaviors. Use pinch when a gesture should only trigger when the hand is pinched.
Beta
Using a gesture with a RealityKit entity
func targetedToAnyEntity() -> some Gesture<EntityTargetValue<Self.Value>>
Require this gesture to target an entity.
Beta
func targetedToEntity(Entity) -> some Gesture<EntityTargetValue<Self.Value>>
Require this gesture to target entity or a descendant of entity. This is equivalent to targetedToEntity(.descendingFrom(entity)).
Beta
func targetedToEntity(where: QueryPredicate<Entity>) -> some Gesture<EntityTargetValue<Self.Value>>
Require this gesture to target an entity that can be found in the results of the specified QueryPredicate
Beta
Relationships
Conforming Types
AnyGesture
DragGesture
ExclusiveGesture
GestureStateGesture
LongPressGesture
MagnificationGesture
MagnifyGesture
RotateGesture
RotateGesture3D
RotationGesture
SequenceGesture
SimultaneousGesture
SpatialEventGesture
SpatialTapGesture
TapGesture
See Also
Defining custom gestures
func highPriorityGesture<T>(T, including: GestureMask) -> some View
Attaches a gesture to the view with a higher precedence than gestures defined by the view.
func defersSystemGestures(on: Edge.Set) -> some View
Sets the screen edge from which you want your gesture to take precedence over the system gesture.
struct AnyGesture
A type-erased gesture.
struct HandActivationBehavior
An activation behavior specific to hand-driven input.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Gesture
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

