https://developer.apple.com/documentation/swiftui/view/popover(item:attachmentanchor:arrowedge:content:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View
Presenting an alert
S
PresentationBackgroundInteraction
M
func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View
M
func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View
M
func presentationBackground<S>(S) -> some View
M
func presentationCornerRadius(CGFloat?) -> some View
func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View
func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View
M
func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View
M
func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View
M
func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View
M
func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View
M
func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View
Showing a sheet, cover, or popover
S
DialogSeverity
Configuring a dialog
Documentation
Open Menu
Swift
Instance Method
popover(item:attachmentAnchor:arrowEdge:content:)
Presents a popover using the given item as a data source for the popover’s content.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
visionOS 1.0+ Beta
func popover<Item, Content>(
    item: Binding<Item?>,
    attachmentAnchor: PopoverAttachmentAnchor = .rect(.bounds),
    arrowEdge: Edge = .top,
    @ViewBuilder content: @escaping (Item) -> Content
) -> some View where Item : Identifiable, Content : View
Parameters
item
A binding to an optional source of truth for the popover. When item is non-nil, the system passes the contents to the modifier’s closure. You use this content to populate the fields of a popover that you create that the system displays to the user. If item changes, the system dismisses the currently presented popover and replaces it with a new popover using the same process.
attachmentAnchor
The positioning anchor that defines the attachment point of the popover. The default is bounds.
arrowEdge
The edge of the attachmentAnchor that defines the location of the popover’s arrow in macOS. The default is Edge.top. iOS ignores this parameter.
content
A closure returning the content of the popover.
Discussion
Use this method when you need to present a popover with content from a custom data source. The example below uses data in the PopoverModel structure to populate the view in the content closure that the popover displays to the user:
struct PopoverExample: View {
    @State private var popover: PopoverModel?


    var body: some View {
        Button("Show Popover") {
            popover = PopoverModel(message: "Custom Message")
        }
        .popover(item: $popover) { detail in
            Text("\(detail.message)")
                .padding()
        }
    }
}


struct PopoverModel: Identifiable {
    var id: String { message }
    let message: String
}
See Also
Showing a sheet, cover, or popover
func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View
Presents a sheet when a binding to a Boolean value that you provide is true.
func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View
Presents a sheet using the given item as a data source for the sheet’s content.
func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View
Presents a modal view that covers as much of the screen as possible when binding to a Boolean value you provide is true.
func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View
Presents a modal view that covers as much of the screen as possible using the binding you provide as a data source for the sheet’s content.
func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View
Presents a popover when a given condition is true.
enum PopoverAttachmentAnchor
An attachment anchor for a popover.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is popover(item:attachmentAnchor:arrowEdge:content:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

