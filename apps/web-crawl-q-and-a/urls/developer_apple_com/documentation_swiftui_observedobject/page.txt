https://developer.apple.com/documentation/swiftui/observedobjectSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Views
Persistent storage
Preferences
Environment values
r
P
DynamicProperty
Managing dynamic data
S
EnvironmentObject
S
StateObject
Monitoring data changes in your app
#
macro Observable()
Beta
Migrating from the Observable Object protocol to the Observable macro
Managing model data in your app
Creating model data
S
Binding
S
Bindable
Beta
Documentation
Open Menu
Swift
Structure
ObservedObject
A property wrapper type that subscribes to an observable object and invalidates a view whenever the observable object changes.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
@propertyWrapper @frozen
struct ObservedObject<ObjectType> where ObjectType : ObservableObject
Overview
Add the @ObservedObject attribute to a parameter of a SwiftUI View when the input is an ObservableObject and you want the view to update when the object’s published properties change. You typically do this to pass a StateObject into a subview.
The following example defines a data model as an observable object, instantiates the model in a view as a state object, and then passes the instance to a subview as an observed object:
class DataModel: ObservableObject {
    @Published var name = "Some Name"
    @Published var isEnabled = false
}


struct MyView: View {
    @StateObject private var model = DataModel()


    var body: some View {
        Text(model.name)
        MySubView(model: model)
    }
}


struct MySubView: View {
    @ObservedObject var model: DataModel


    var body: some View {
        Toggle("Enabled", isOn: $model.isEnabled)
    }
}
When any published property of the observable object changes, SwiftUI updates any view that depends on the object. Subviews can also make updates to the model properties, like the Toggle in the above example, that propagate to other observers throughout the view hierarchy.
Don’t specify a default or initial value for the observed object. Use the attribute only for a property that acts as an input for a view, as in the above example.
Topics
Creating an observed object
init(wrappedValue: ObjectType)
Creates an observed object with an initial wrapped value.
init(initialValue: ObjectType)
Creates an observed object with an initial value.
Getting the value
var wrappedValue: ObjectType
The underlying value that the observed object references.
var projectedValue: ObservedObject<ObjectType>.Wrapper
A projection of the observed object that creates bindings to its properties.
struct Wrapper
A wrapper of the underlying observable object that can create bindings to its properties.
Relationships
Conforms To
DynamicProperty
Sendable
See Also
Creating model data
Managing model data in your app
Create connections between your app’s data model and views.
Migrating from the Observable Object protocol to the Observable macro
Update your existing app to leverage the benefits of Observation in Swift.
Monitoring data changes in your app
Show changes to data in your app’s user interface by using observable objects.
struct StateObject
A property wrapper type that instantiates an observable object.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is ObservedObject
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

