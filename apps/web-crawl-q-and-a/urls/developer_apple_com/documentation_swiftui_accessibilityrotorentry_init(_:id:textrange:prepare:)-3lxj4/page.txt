https://developer.apple.com/documentation/swiftui/accessibilityrotorentry/init(_:id:textrange:prepare:)-3lxj4Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View
M
func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
M
func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
M
func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View
Replacing system rotors
M
func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View
M
func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View
func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
M
init<L>(L, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))
M
init(LocalizedStringKey, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))
Creating a rotor entry with an identifier
M
init(Text?, textRange: Range<String.Index>, prepare: (() -> Void))
M
init<L>(L, textRange: Range<String.Index>, prepare: (() -> Void))
M
init(LocalizedStringKey, textRange: Range<String.Index>, prepare: (() -> Void))
Creating a rotor entry
S
AccessibilityRotorEntry
Documentation
Open Menu
Swift
Initializer
init(_:id:textRange:prepare:)
Create a Rotor entry with a specific label and identifier, with an optional range.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
init(
    _ label: Text,
    id: ID,
    textRange: Range<String.Index>? = nil,
    prepare: @escaping (() -> Void) = {}
)
Parameters
label
Localized string used to show this Rotor entry to users.
id
Used to find the UI element associated with this Rotor entry. This identifier should be used within a scrollView, either in a ForEach or using an id call.
textRange
Optional range of text associated with this Rotor entry. This should be a range within text that is set as the either label or accessibility value of the associated element.
prepare
Optional closure to run before a Rotor entry is navigated to, to prepare the UI as needed. This can be used to bring the UI element on-screen if it isn’t already, and SwiftUI is not able to automatically scroll to it.
See Also
Creating a rotor entry with an identifier
init(LocalizedStringKey, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))
Create a Rotor entry with a specific label and identifier, with an optional range.
init<L>(L, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))
Create a Rotor entry with a specific label and identifier, with an optional range.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(_:id:textRange:prepare:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

