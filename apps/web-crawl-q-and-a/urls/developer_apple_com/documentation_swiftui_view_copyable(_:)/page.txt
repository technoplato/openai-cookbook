https://developer.apple.com/documentation/swiftui/view/copyable(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Technology-specific views
WatchKit integration
UIKit integration
AppKit integration
Framework integration
Accessible navigation
Accessible descriptions
func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View
Copying transferable items
Clipboard
Input events
Gestures
Event handling
Scroll views
View groupings
Tables
Documentation
Open Menu
Swift
Instance Method
copyable(_:)
Specifies a list of items to copy in response to the system’s Copy command.
macOS 13.0+
func copyable<T>(_ payload: @autoclosure @escaping () -> [T]) -> some View where T : Transferable
Parameters
payload
A closure that returns an array of items to copy to the Clipboard when someone issues a Copy command. The items in the array must conform to the Transferable protocol.
Return Value
A view that adds one or more items to the Clipboard in response to a Copy command.
Discussion
Use this modifier to specify one or more items that the system copies to the Clipboard when someone issues a Copy command while the modified view has focus. People issue a Copy command by choosing Edit > Copy from the app’s menu, or by using the Command-C keyboard shortcut. The system enables the Copy command for your app when it detects copyable content.
For example, the following code enables people to copy all of the strings that they select in a List:
struct CopyableExample: View {
    let strings = ["Alpha", "Beta", "Gamma"]
    @State private var selection: Set<String> = []


    var body: some View {
        List(strings, id: \.self, selection: $selection) {
            Text($0)
        }
        .copyable(Array(selection))
    }
}
The command copies each item’s representation as specified by the item’s conformance to the Transferable protocol. The above example records selection using each list item’s corresponding string, and strings conform to the Transferable protocol by default. For more complex cases, you might need to take additional steps.
For example, the following code displays colors composed from a list of Item instances that contain both a color and its name, as well as an identifier. The list manages selection using item identifiers:
struct Item: Identifiable, Transferable {
    let color: Color
    let name: String
    let id = UUID()


    static var transferRepresentation: some TransferRepresentation {
        ProxyRepresentation(exporting: \.name)
    }
}


struct CopyableIDExample: View {
    let items: [Item] = [
        Item(color: .red, name: "red"),
        Item(color: .green, name: "green"),
        Item(color: .blue, name: "blue")
    ]


    @State private var selection: Set<Item.ID> = []


    var body: some View {
        List(items, selection: $selection) { item in
            item.color
        }
        .copyable(items.filter { selection.contains($0.id) })
    }
}
This example does two things that the previous example didn’t have to:
It converts the list of selected item identifiers into a list of selected items for use with the copyable modifier.
It ensures that the copyable items conform to the Transferable protocol, using the item’s name property as the representation.
When someone copies the first item in the list, which appears in the interface as a red rectangle, and then pastes into a text editor, they get the string “red”.
Note
To enable people to copy using a custom action — like from a context menu item — rather than using the system Copy command, update the Clipboard directly using an NSPasteboard or a UIPasteboard instance.
See Also
Copying transferable items
func cuttable<T>(for: T.Type, action: () -> [T]) -> some View
Specifies an action that moves items to the Clipboard in response to the system’s Cut command.
func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View
Specifies an action that adds validated items to a view in response to the system’s Paste command.
Current page is copyable(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

