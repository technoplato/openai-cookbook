https://developer.apple.com/documentation/swiftui/image/init(size:label:opaque:colormode:renderer:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Loading images asynchronously
E
Image.ResizingMode
E
Image.Orientation
E
Image.Scale
P
var imageScale: Image.Scale
M
func imageScale(Image.Scale) -> some View
Fitting images into available space
init(size: CGSize, label: Text?, opaque: Bool, colorMode: ColorRenderingMode, renderer: (inout GraphicsContext) -> Void)
Creating an image from drawing instructions
M
init(nsImage: NSImage)
M
init(uiImage: UIImage)
Creating an image from another image
M
init(systemName: String, variableValue: Double?)
M
init(systemName: String)
Creating a system symbol image
M
init(decorative: CGImage, scale: CGFloat, orientation: Image.Orientation)
Documentation
Open Menu
Swift
Initializer
init(size:label:opaque:colorMode:renderer:)
Initializes an image of the given size, with contents provided by a custom rendering closure.
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
tvOS 16.0+
watchOS 9.0+
visionOS 1.0+ Beta
init(
    size: CGSize,
    label: Text? = nil,
    opaque: Bool = false,
    colorMode: ColorRenderingMode = .nonLinear,
    renderer: @escaping (inout GraphicsContext) -> Void
)
Parameters
size
The size of the newly-created image.
label
The label associated with the image. SwiftUI uses the label for accessibility.
opaque
A Boolean value that indicates whether the image is fully opaque. This may improve performance when true. Don’t render non-opaque pixels to an image declared as opaque. Defaults to false.
colorMode
The working color space and storage format of the image. Defaults to ColorRenderingMode.nonLinear.
renderer
A closure to draw the contents of the image. The closure receives a GraphicsContext as its parameter.
Discussion
Use this initializer to create an image by calling drawing commands on a GraphicsContext provided to the renderer closure.
The following example shows a custom image created by passing a GraphicContext to draw an ellipse and fill it with a gradient:
let mySize = CGSize(width: 300, height: 200)
let image = Image(size: mySize) { context in
    context.fill(
        Path(
            ellipseIn: CGRect(origin: .zero, size: mySize)),
            with: .linearGradient(
                Gradient(colors: [.yellow, .orange]),
                startPoint: .zero,
                endPoint: CGPoint(x: mySize.width, y:mySize.height))
    )
}
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(size:label:opaque:colorMode:renderer:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

