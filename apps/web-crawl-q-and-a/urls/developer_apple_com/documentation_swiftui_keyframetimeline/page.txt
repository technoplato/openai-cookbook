https://developer.apple.com/documentation/swiftui/keyframetimelineSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
UnitCurve
Beta
r
P
AnimationStateKey
Beta
S
AnimationState
Beta
S
AnimationContext
Beta
r
P
CustomAnimation
Beta
Creating custom animations
S
SpringKeyframe
r
P
Keyframes
Beta
S
KeyframeAnimator
Beta
M
func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View
Beta
M
func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View
Beta
Creating keyframe-based animation
S
PhaseAnimator
Beta
M
func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View
Beta
M
func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View
Beta
Documentation
Open Menu
Swift
Structure
KeyframeTimeline
A description of how a value changes over time, modeled using keyframes.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
struct KeyframeTimeline<Value>
Overview
Unlike other animations in SwiftUI (using Animation), keyframes don’t interpolate between from and to values that SwiftUI provides as state changes. Instead, keyframes fully define the path that a value takes over time using the tracks that make up their body.
Keyframes values are roughly analogous to video clips; they have a set duration, and you can scrub and evaluate them for any time within the duration.
The Keyframes structure also allows you to compute an interpolated value at a specific time, which you can use when integrating keyframes into custom use cases.
For example, you can use a Keyframes instance to define animations for a type conforming to Animatable:
let keyframes = KeyframeTimeline(initialValue: CGPoint.zero) {
    CubcKeyframe(.init(x: 0, y: 100), duration: 0.3)
    CubicKeyframe(.init(x: 0, y: 0), duration: 0.7)
}


let value = keyframes.value(time: 0.45
For animations that involve multiple coordinated changes, you can include multiple nested tracks:
struct Values {
    var rotation = Angle.zero
    var scale = 1.0
}


let keyframes = KeyframeTimeline(initialValue: Values()) {
    KeyframeTrack(\.rotation) {
        CubicKeyframe(.zero, duration: 0.2)
        CubicKeyframe(.degrees(45), duration: 0.3)
    }
    KeyframeTrack(\.scale) {
        CubicKeyframe(value: 1.2, duration: 0.5)
        CubicKeyframe(value: 0.9, duration: 0.2)
        CubicKeyframe(value: 1.0, duration: 0.3)
    }
}
Multiple nested tracks update the initial value in the order that they are declared. This means that if multiple nested plans change the same property of the root value, the value from the last competing track will be used.
Topics
Creating a keyframe timeline
init(initialValue: Value, content: () -> some Keyframes<Value>)
Creates a new instance using the initial value and content that you provide.
Getting the duration
var duration: TimeInterval
The duration of the content in seconds.
Getting an interpolated value
func value(time: Double) -> Value
Returns the interpolated value at the given time.
func value(progress: Double) -> Value
Returns the interpolated value at the given progress in the range zero to one.
Relationships
Conforms To
Sendable
See Also
Creating keyframe-based animation
func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View
Loops the given keyframes continuously, updating the view using the modifiers you apply in body.
Beta
func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View
Plays the given keyframes when the given trigger value changes, updating the view using the modifiers you apply in body.
Beta
struct KeyframeAnimator
A container that animates its content with keyframes.
Beta
protocol Keyframes
A type that defines changes to a value over time.
Beta
struct KeyframeTrack
A sequence of keyframes animating a single property of a root type.
Beta
struct KeyframeTrackContentBuilder
The builder that creates keyframe track content from the keyframes that you define within a closure.
Beta
struct KeyframesBuilder
A builder that combines keyframe content values into a single value.
Beta
protocol KeyframeTrackContent
A group of keyframes that define an interpolation curve of an animatable value.
Beta
struct CubicKeyframe
A keyframe that uses a cubic curve to smoothly interpolate between values.
Beta
struct LinearKeyframe
A keyframe that uses simple linear interpolation.
Beta
struct MoveKeyframe
A keyframe that immediately moves to the given value without interpolating.
Beta
struct SpringKeyframe
A keyframe that uses a spring function to interpolate to the given value.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is KeyframeTimeline
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

