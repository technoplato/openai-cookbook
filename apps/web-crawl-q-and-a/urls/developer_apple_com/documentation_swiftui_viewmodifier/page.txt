https://developer.apple.com/documentation/swiftui/viewmodifierSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func equatable() -> EquatableView<Self>
M
func tag<V>(V) -> some View
M
func id<ID>(ID) -> some View
Managing the view hierarchy
M
func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View
M
func task(priority: TaskPriority, () async -> Void) -> some View
M
func onDisappear(perform: (() -> Void)?) -> some View
M
func modifier<T>(T) -> ModifiedContent<Self, T>
Reducing view modifier maintenance
Configuring views
Modifying a view
S
ViewBuilder
r
P
View
Declaring a custom view
Creating a view
Documentation
Open Menu
Swift
Protocol
ViewModifier
A modifier that you apply to a view or another view modifier, producing a different version of the original value.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
protocol ViewModifier
Overview
Adopt the ViewModifier protocol when you want to create a reusable modifier that you can apply to any view. The example below combines several modifiers to create a new modifier that you can use to create blue caption text surrounded by a rounded rectangle:
struct BorderedCaption: ViewModifier {
    func body(content: Content) -> some View {
        content
            .font(.caption2)
            .padding(10)
            .overlay(
                RoundedRectangle(cornerRadius: 15)
                    .stroke(lineWidth: 1)
            )
            .foregroundColor(Color.blue)
    }
}
You can apply modifier(_:) directly to a view, but a more common and idiomatic approach uses modifier(_:) to define an extension to View itself that incorporates the view modifier:
extension View {
    func borderedCaption() -> some View {
        modifier(BorderedCaption())
    }
}
You can then apply the bordered caption to any view, similar to this:
Image(systemName: "bus")
    .resizable()
    .frame(width:50, height:50)
Text("Downtown Bus")
    .borderedCaption()
Topics
Creating a view modifier
func body(content: Self.Content) -> Self.Body
Gets the current body of the caller.
Required Default implementation provided.
associatedtype Body : View
The type of view representing the body.
Required
typealias Content
The content view type passed to body().
Adding animations to a view
func animation(Animation?) -> some ViewModifier
Returns a new version of the modifier that will apply animation to all animatable values within the modifier.
func concat<T>(T) -> ModifiedContent<Self, T>
Returns a new modifier that is the result of concatenating self with modifier.
Handling view taps and gestures
func transaction((inout Transaction) -> Void) -> some ViewModifier
Returns a new version of the modifier that will apply the transaction mutation function transform to all transactions within the modifier.
Relationships
Inherited By
AnimatableModifier
EnvironmentalModifier
GeometryEffect
Conforming Types
AccessibilityAttachmentModifier
EmptyModifier
ModifiedContent
Conforms when Content conforms to ViewModifier and Modifier conforms to ViewModifier.
See Also
Modifying a view
Configuring views
Adjust the characteristics of a view by applying view modifiers.
Reducing view modifier maintenance
Bundle view modifiers that you regularly reuse into a custom view modifier.
func modifier<T>(T) -> ModifiedContent<Self, T>
Applies a modifier to a view and returns a new view.
struct EmptyModifier
An empty, or identity, modifier, used during development to switch modifiers at compile time.
struct ModifiedContent
A value with a modifier applied to it.
Available when Content conforms to ViewModifier and Modifier conforms to ViewModifier.
protocol EnvironmentalModifier
A modifier that must resolve to a concrete modifier in an environment before use.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is ViewModifier
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

