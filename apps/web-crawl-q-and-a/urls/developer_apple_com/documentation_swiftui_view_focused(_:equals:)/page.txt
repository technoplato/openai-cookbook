https://developer.apple.com/documentation/swiftui/view/focused(_:equals:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func focusScope(Namespace.ID) -> some View
Setting focus scope
S
FocusedObject
M
func focusedSceneObject<T>(T) -> some View
M
func focusedSceneObject<T>(T?) -> some View
M
func focusedObject<T>(T) -> some View
M
func focusedObject<T>(T?) -> some View
Managing focus state
S
FocusInteractions
Beta
M
func focusable(Bool, interactions: FocusInteractions) -> some View
Beta
M
func focusable(Bool) -> some View
Indicating that a view can receive focus
Focus Cookbook: Supporting and enhancing focus-driven interactions in your SwiftUI app
Essentials
Focus
Documentation
Open Menu
Swift
Instance Method
focused(_:equals:)
Modifies this view by binding its focus state to the given state value.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
func focused<Value>(
    _ binding: FocusState<Value>.Binding,
    equals value: Value
) -> some View where Value : Hashable
Parameters
binding
The state binding to register. When focus moves to the modified view, the binding sets the bound value to the corresponding match value. If a caller sets the state value programmatically to the matching value, then focus moves to the modified view. When focus leaves the modified view, the binding sets the bound value to nil. If a caller sets the value to nil, SwiftUI automatically dismisses focus.
value
The value to match against when determining whether the binding should change.
Return Value
The modified view.
Discussion
Use this modifier to cause the view to receive focus whenever the the binding equals the value. Typically, you create an enumeration of fields that may receive focus, bind an instance of this enumeration, and assign its cases to focusable views.
The following example uses the cases of a LoginForm enumeration to bind the focus state of two TextField views. A sign-in button validates the fields and sets the bound focusedField value to any field that requires the user to correct a problem.
struct LoginForm {
    enum Field: Hashable {
        case usernameField
        case passwordField
    }


    @State private var username = ""
    @State private var password = ""
    @FocusState private var focusedField: Field?


    var body: some View {
        Form {
            TextField("Username", text: $username)
                .focused($focusedField, equals: .usernameField)


            SecureField("Password", text: $password)
                .focused($focusedField, equals: .passwordField)


            Button("Sign In") {
                if username.isEmpty {
                    focusedField = .usernameField
                } else if password.isEmpty {
                    focusedField = .passwordField
                } else {
                    handleLogin(username, password)
                }
            }
        }
    }
}
To control focus using a Boolean, use the focused(_:) method instead.
See Also
Managing focus state
func focused(FocusState<Bool>.Binding) -> some View
Modifies this view by binding its focus state to the given Boolean state value.
var isFocused: Bool
Returns whether the nearest focusable ancestor has focus.
struct FocusState
A property wrapper type that can read and write a value that SwiftUI updates as the placement of focus within the scene changes.
struct FocusedValue
A property wrapper for observing values from the focused view or one of its ancestors.
protocol FocusedValueKey
A protocol for identifier types used when publishing and observing focused values.
struct FocusedBinding
A convenience property wrapper for observing and automatically unwrapping state bindings from the focused view or one of its ancestors.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is focused(_:equals:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

