https://developer.apple.com/documentation/swiftui/animationcontextSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
r
P
TimelineSchedule
S
TimelineView
Updating watchOS apps with timelines
Updating a view on a schedule
S
EmptyAnimatableData
r
P
VectorArithmetic
S
AnimatablePair
r
P
CustomAnimation
Beta
Creating custom animations
S
SpringKeyframe
Beta
S
MoveKeyframe
Beta
S
LinearKeyframe
Beta
S
CubicKeyframe
Beta
r
P
KeyframeTrackContent
Beta
S
KeyframesBuilder
Beta
Documentation
Open Menu
Swift
Structure
AnimationContext
Contextual values that a custom animation can use to manage state and access a view’s environment.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
struct AnimationContext<Value> where Value : VectorArithmetic
Overview
The system provides an AnimationContext to a CustomAnimation instance so that the animation can store and retrieve values in an instance of AnimationState. To access these values, use the context’s state property.
For more convenient access to state, create an AnimationStateKey and extend AnimationContext to include a computed property that gets and sets the AnimationState value. Then use this property instead of state to retrieve the state of a custom animation. For example, the following code creates an animation state key named PausableState. Then the code extends AnimationContext to include the pausableState property:
private struct PausableState<Value: VectorArithmetic>: AnimationStateKey {
    var paused = false
    var pauseTime: TimeInterval = 0.0


    static var defaultValue: Self { .init() }
}


extension AnimationContext {
    fileprivate var pausableState: PausableState<Value> {
        get { state[PausableState<Value>.self] }
        set { state[PausableState<Value>.self] = newValue }
    }
}
To access the pausable state, the custom animation PausableAnimation uses the pausableState property instead of the state property:
struct PausableAnimation: CustomAnimation {
    let base: Animation


    func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V? where V : VectorArithmetic {
        let paused = context.environment.animationPaused


        let pausableState = context.pausableState
        var pauseTime = pausableState.pauseTime
        if pausableState.paused != paused {
            pauseTime = time - pauseTime
            context.pausableState = PausableState(paused: paused, pauseTime: pauseTime)
        }


        let effectiveTime = paused ? pauseTime : time - pauseTime
        let result = base.animate(value: value, time: effectiveTime, context: &context)
        return result
    }
}
The animation can also retrieve environment values of the view that created the animation. To retrieve a view’s environment value, use the context’s environment property. For instance, the following code creates a custom EnvironmentKey named AnimationPausedKey, and the view PausableAnimationView uses the key to store the paused state:
struct AnimationPausedKey: EnvironmentKey {
    static let defaultValue = false
}


extension EnvironmentValues {
    var animationPaused: Bool {
        get { self[AnimationPausedKey.self] }
        set { self[AnimationPausedKey.self] = newValue }
    }
}


struct PausableAnimationView: View {
    @State private var paused = false


    var body: some View {
        VStack {
            ...
        }
        .environment(\.animationPaused, paused)
    }
}
Then the custom animation PausableAnimation retrieves the paused state from the view’s environment using the environment property:
struct PausableAnimation: CustomAnimation {
    func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V? where V : VectorArithmetic {
        let paused = context.environment.animationPaused
        ...
    }
}
Topics
Managing state
var state: AnimationState<Value>
The current state of a custom animation.
Retrieving view environment values
var environment: EnvironmentValues
The current environment of the view that created the custom animation.
Creating context
func withState<T>(AnimationState<T>) -> AnimationContext<T>
Creates a new context from another one with a state that you provide.
Instance Properties
var isLogicallyComplete: Bool
Set this to true to indicate that an animation is logically complete.
Relationships
Conforms To
Sendable
See Also
Creating custom animations
protocol CustomAnimation
A type that defines how an animatable value changes over time.
Beta
struct AnimationState
A container that stores the state for a custom animation.
Beta
protocol AnimationStateKey
A key for accessing animation state values.
Beta
struct UnitCurve
A function defined by a two-dimensional curve that maps an input progress in the range [0,1] to an output progress that is also in the range [0,1]. By changing the shape of the curve, the effective speed of an animation or other interpolation can be changed.
Beta
struct Spring
A representation of a spring’s motion.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is AnimationContext
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

