https://developer.apple.com/documentation/swiftui/view-layoutSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Configuring view elements
Accessibility modifiers
Appearance modifiers
Text and symbol modifiers
Auxiliary view modifiers
Chart view modifiers
Drawing views
Style modifiers
func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View
func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View
func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View
M
func offset(CGSize) -> some View
M
func offset(x: CGFloat, y: CGFloat) -> some View
M
func offset(z: CGFloat) -> some View
Beta
M
func coordinateSpace(NamedCoordinateSpace) -> some View
Beta
Alignment
M
func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
M
func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Documentation
Open Menu
Swift
Layout modifiers
Tell a view how to arrange itself within a view hierarchy by adjusting its size, position, alignment, padding, and so on.
Overview
Use layout modifiers to fine tune the placement of views in a view hierarchy. You can adjust or constrain the size, position, and alignment of a view. You can also add padding around a view, and indicate how the view interacts with system-defined safe areas.
To get started arranging views, see Layout fundamentals. To make adjustments to a basic layout, see Layout adjustments.
Topics
Size
func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View
Positions this view within an invisible frame with the specified size.
func frame(depth: CGFloat?, alignment: DepthAlignment) -> some View
Positions this view within an invisible frame with the specified depth.
Beta
func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View
Positions this view within an invisible frame having the specified size constraints.
func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View
Positions this view within an invisible frame having the specified depth constraints.
Beta
func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View
Positions this view within an invisible frame with a size relative to the nearest container.
Beta
func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View
Positions this view within an invisible frame with a size relative to the nearest container.
Beta
func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View
Positions this view within an invisible frame with a size relative to the nearest container.
Beta
func fixedSize() -> some View
Fixes this view at its ideal size.
func fixedSize(horizontal: Bool, vertical: Bool) -> some View
Fixes this view at its ideal size in the specified dimensions.
func layoutPriority(Double) -> some View
Sets the priority by which a parent layout should apportion space to this child.
Position
func position(CGPoint) -> some View
Positions the center of this view at the specified point in its parent’s coordinate space.
func position(x: CGFloat, y: CGFloat) -> some View
Positions the center of this view at the specified coordinates in its parent’s coordinate space.
func offset(CGSize) -> some View
Offset this view by the horizontal and vertical amount specified in the offset parameter.
func offset(x: CGFloat, y: CGFloat) -> some View
Offset this view by the specified horizontal and vertical distances.
func offset(z: CGFloat) -> some View
Brings a view forward in Z by the provided distance in points.
Beta
func coordinateSpace(NamedCoordinateSpace) -> some View
Assigns a name to the view’s coordinate space, so other code can operate on dimensions like points and sizes relative to the named space.
Beta
Alignment
func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Sets the view’s horizontal alignment.
func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Sets the view’s vertical alignment.
Padding and spacing
func padding(CGFloat) -> some View
Adds a specific padding amount to each edge of this view.
func padding(Edge.Set, CGFloat?) -> some View
Adds an equal padding amount to specific edges of this view.
func padding(EdgeInsets) -> some View
Adds a different padding amount to each edge of this view.
func padding3D(CGFloat) -> some View
Pads this view along all edge insets by the amount you specify.
Beta
func padding3D(EdgeInsets3D) -> some View
Pads this view using the edge insets you specify.
Beta
func padding3D(Edge3D.Set, CGFloat?) -> some View
Pads this view using the edge insets you specify.
Beta
func listRowInsets(EdgeInsets?) -> some View
Applies an inset to the rows in a list.
func scenePadding(Edge.Set) -> some View
Adds padding to the specified edges of this view using an amount that’s appropriate for the current scene.
func scenePadding(ScenePadding, edges: Edge.Set) -> some View
Adds a specified kind of padding to the specified edges of this view using an amount that’s appropriate for the current scene.
func listRowSpacing(CGFloat?) -> some View
Sets the vertical spacing between two adjacent rows in a List.
func listSectionSpacing(CGFloat) -> some View
Sets the spacing to a custom value between adjacent sections in a List.
Beta
func listSectionSpacing(ListSectionSpacing) -> some View
Sets the spacing between adjacent sections in a List.
Beta
Grid configuration
func gridCellColumns(Int) -> some View
Tells a view that acts as a cell in a grid to span the specified number of columns.
func gridCellAnchor(UnitPoint) -> some View
Specifies a custom alignment anchor for a view that acts as a grid cell.
func gridCellUnsizedAxes(Axis.Set) -> some View
Asks grid layouts not to offer the view extra size in the specified axes.
func gridColumnAlignment(HorizontalAlignment) -> some View
Overrides the default horizontal alignment of the grid column that the view appears in.
Safe area and margins
func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View
Expands the view out of its safe area.
func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View
Shows the specified content beside the modified view.
func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View
Shows the specified content above or below the modified view.
func safeAreaPadding(EdgeInsets) -> some View
Adds the provided insets into the safe area of this view.
Beta
func safeAreaPadding(CGFloat) -> some View
Adds the provided insets into the safe area of this view.
Beta
func safeAreaPadding(Edge.Set, CGFloat?) -> some View
Adds the provided insets into the safe area of this view.
Beta
func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View
Configures the content margin for a provided placement.
Beta
func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View
Configures the content margin for a provided placement.
Beta
func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View
Configures the content margin for a provided placement.
Beta
Layer order
func zIndex(Double) -> some View
Controls the display order of overlapping views.
Layout direction
func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View
Sets the behavior of this view for different layout directions.
Beta
Custom layout characteristics
func layoutValue<K>(key: K.Type, value: K.Value) -> some View
Associates a value with a custom layout property.
See Also
Drawing views
API Reference
Style modifiers
Apply built-in styles to different types of views.
API Reference
Graphics and rendering modifiers
Affect the way the system draws a view, for example by scaling or masking a view, or by applying graphical effects.
Current page is Layout modifiers
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

