https://developer.apple.com/documentation/swiftui/accessible-controlsSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
AccessibilityDirectTouchOptions
Beta
M
func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
M
func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Beta
M
func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
M
func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Making gestures accessible
r
P
AccessibilityQuickActionStyle
func accessibilityQuickAction<Style, Content>(style: Style, isActive: Binding<Bool>, content: () -> Content) -> some View
func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Accessible appearance
Accessibility fundamentals
Accessibility
System events
Focus
Drag and drop
Clipboard
Input events
Documentation
Open Menu
Swift
Accessible controls
Improve access to actions that your app can undertake.
Overview
Help people using assistive technologies to gain access to controls in your app.
For design guidance, see Buttons and controls in the Accessibility section of the Human Interface Guidelines.
Topics
Adding actions to views
func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityActions<Content>(() -> Content) -> some View
Adds multiple accessibility actions to the view.
func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility adjustable action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility scroll action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
struct AccessibilityActionKind
The structure that defines the kinds of available accessibility actions.
enum AccessibilityAdjustmentDirection
A directional indicator you use when making an accessibility adjustment.
Offering Quick Actions to people
func accessibilityQuickAction<Style, Content>(style: Style, content: () -> Content) -> some View
Adds a quick action to be shown by the system when active.
func accessibilityQuickAction<Style, Content>(style: Style, isActive: Binding<Bool>, content: () -> Content) -> some View
Adds a quick action to be shown by the system when active.
protocol AccessibilityQuickActionStyle
A type that describes the presentation style of an accessibility quick action.
Making gestures accessible
func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
The activation point for an element is the location assistive technologies use to initiate gestures.
func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
The activation point for an element is the location assistive technologies use to initiate gestures.
func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Explicitly set whether this accessibility element is a direct touch area. Direct touch areas passthrough touch events to the app rather than being handled through an assistive technology, such as VoiceOver. The modifier accepts an optional AccessibilityDirectTouchOptions option set to customize the functionality of the direct touch area.
Beta
func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility zoom action to the view. Actions allow assistive technologies, such as VoiceOver, to interact with the view by invoking the action.
struct AccessibilityDirectTouchOptions
An option set that defines the functionality of a view’s direct touch area.
Beta
struct AccessibilityZoomGestureAction
Position and direction information of a zoom gesture that someone performs with an assistive technology like VoiceOver.
Controlling focus
func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View
Modifies this view by binding its accessibility element’s focus state to the given boolean state value.
func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View
Modifies this view by binding its accessibility element’s focus state to the given state value.
struct AccessibilityFocusState
A property wrapper type that can read and write a value that SwiftUI updates as the focus of any active accessibility technology, such as VoiceOver, changes.
Managing interactivity
func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Explicitly set whether this Accessibility element responds to user interaction and would thus be interacted with by technologies such as Switch Control, Voice Control or Full Keyboard Access.
See Also
Accessibility
API Reference
Accessibility fundamentals
Make your SwiftUI apps accessible to everyone, including people with disabilities.
API Reference
Accessible appearance
Enhance the legibility of content in your app’s interface.
API Reference
Accessible descriptions
Describe interface elements to help people understand what they represent.
API Reference
Accessible navigation
Enable users to navigate to specific user interface elements using rotors.
Current page is Accessible controls
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

