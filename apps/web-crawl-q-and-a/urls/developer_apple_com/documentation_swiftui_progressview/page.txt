https://developer.apple.com/documentation/swiftui/progressviewSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Indicating missing content
S
DefaultDateProgressLabel
M
func progressViewStyle<S>(S) -> some View
M
init(ProgressViewStyleConfiguration)
Creating a configured progress view
M
init(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)
M
init(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label)
M
func gaugeStyle<S>(S) -> some View
S
Gauge
Indicating a value
S
ColorPicker
Choosing a color
P
var timeZone: TimeZone
P
var calendar: Calendar
S
MultiDatePicker
Documentation
Open Menu
Swift
Structure
ProgressView
A view that shows the progress toward completion of a task.
iOS 14.0+
iPadOS 14.0+
macOS 11.0+
Mac Catalyst 14.0+
tvOS 14.0+
watchOS 7.0+
visionOS 1.0+ Beta
struct ProgressView<Label, CurrentValueLabel> where Label : View, CurrentValueLabel : View
Overview
Use a progress view to show that a task is incomplete but advancing toward completion. A progress view can show both determinate (percentage complete) and indeterminate (progressing or not) types of progress.
Create a determinate progress view by initializing a ProgressView with a binding to a numeric value that indicates the progress, and a total value that represents completion of the task. By default, the progress is 0.0 and the total is 1.0.
The example below uses the state property progress to show progress in a determinate ProgressView. The progress view uses its default total of 1.0, and because progress starts with an initial value of 0.5, the progress view begins half-complete. A “More” button below the progress view allows people to increment the progress in increments of five percent:
struct LinearProgressDemoView: View {
    @State private var progress = 0.5


    var body: some View {
        VStack {
            ProgressView(value: progress)
            Button("More") { progress += 0.05 }
        }
    }
}
To create an indeterminate progress view, use an initializer that doesn’t take a progress value:
var body: some View {
    ProgressView()
}
You can also create a progress view that covers a closed range of Date values. As long as the current date is within the range, the progress view automatically updates, filling or depleting the progress view as it nears the end of the range. The following example shows a five-minute timer whose start time is that of the progress view’s initialization:
struct DateRelativeProgressDemoView: View {
    let workoutDateRange = Date()...Date().addingTimeInterval(5*60)


    var body: some View {
         ProgressView(timerInterval: workoutDateRange) {
             Text("Workout")
         }
    }
}
Styling progress views
You can customize the appearance and interaction of progress views by creating styles that conform to the ProgressViewStyle protocol. To set a specific style for all progress view instances within a view, use the progressViewStyle(_:) modifier. In the following example, a custom style adds a rounded pink border to all progress views within the enclosing VStack:
struct BorderedProgressViews: View {
    var body: some View {
        VStack {
            ProgressView(value: 0.25) { Text("25% progress") }
            ProgressView(value: 0.75) { Text("75% progress") }
        }
        .progressViewStyle(PinkBorderedProgressViewStyle())
    }
}


struct PinkBorderedProgressViewStyle: ProgressViewStyle {
    func makeBody(configuration: Configuration) -> some View {
        ProgressView(configuration)
            .padding(4)
            .border(.pink, width: 3)
            .cornerRadius(4)
    }
}
SwiftUI provides two built-in progress view styles, linear and circular, as well as an automatic style that defaults to the most appropriate style in the current context. The following example shows a circular progress view that starts at 60 percent completed.
struct CircularProgressDemoView: View {
    @State private var progress = 0.6


    var body: some View {
        VStack {
            ProgressView(value: progress)
                .progressViewStyle(.circular)
        }
    }
}
On platforms other than macOS, the circular style may appear as an indeterminate indicator instead.
Topics
Creating an indeterminate progress view
init()
Creates a progress view for showing indeterminate progress, without a label.
Available when Label conforms to View and CurrentValueLabel is EmptyView.
init(label: () -> Label)
Creates a progress view for showing indeterminate progress that displays a custom label.
Available when Label conforms to View and CurrentValueLabel is EmptyView.
init(LocalizedStringKey)
Creates a progress view for showing indeterminate progress that generates its label from a localized string.
Available when Label conforms to View and CurrentValueLabel is EmptyView.
init<S>(S)
Creates a progress view for showing indeterminate progress that generates its label from a string.
Available when Label conforms to View and CurrentValueLabel is EmptyView.
Creating a determinate progress view
init(Progress)
Creates a progress view for visualizing the given progress instance.
Available when Label conforms to View and CurrentValueLabel conforms to View.
init<V>(value: V?, total: V)
Creates a progress view for showing determinate progress.
Available when Label conforms to View and CurrentValueLabel conforms to View.
init<V>(LocalizedStringKey, value: V?, total: V)
Creates a progress view for showing determinate progress that generates its label from a localized string.
Available when Label conforms to View and CurrentValueLabel conforms to View.
init<S, V>(S, value: V?, total: V)
Creates a progress view for showing determinate progress that generates its label from a string.
Available when Label conforms to View and CurrentValueLabel conforms to View.
init<V>(value: V?, total: V, label: () -> Label)
Creates a progress view for showing determinate progress, with a custom label.
Available when Label conforms to View and CurrentValueLabel conforms to View.
init<V>(value: V?, total: V, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)
Creates a progress view for showing determinate progress, with a custom label.
Available when Label conforms to View and CurrentValueLabel conforms to View.
Create a progress view spanning a date range
init(timerInterval: ClosedRange<Date>, countsDown: Bool)
Creates a progress view for showing continuous progress as time passes.
Available when Label is EmptyView and CurrentValueLabel is DefaultDateProgressLabel.
init(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label)
Creates a progress view for showing continuous progress as time passes, with a descriptive label.
Available when Label conforms to View and CurrentValueLabel is DefaultDateProgressLabel.
init(timerInterval: ClosedRange<Date>, countsDown: Bool, label: () -> Label, currentValueLabel: () -> CurrentValueLabel)
Creates a progress view for showing continuous progress as time passes, with descriptive and current progress labels.
Available when Label conforms to View and CurrentValueLabel conforms to View.
Creating a configured progress view
init(ProgressViewStyleConfiguration)
Creates a progress view based on a style configuration.
Available when Label conforms to View and CurrentValueLabel conforms to View.
Relationships
Conforms To
Sendable
View
See Also
Indicating a value
struct Gauge
A view that shows a value within a range.
func gaugeStyle<S>(S) -> some View
Sets the style for gauges within this view.
func progressViewStyle<S>(S) -> some View
Sets the style for progress views in this view.
struct DefaultDateProgressLabel
The default type of the current value label when used by a date-relative progress view.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is ProgressView
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

