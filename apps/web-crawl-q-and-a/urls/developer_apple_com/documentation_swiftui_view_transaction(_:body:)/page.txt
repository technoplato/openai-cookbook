https://developer.apple.com/documentation/swiftui/view/transaction(_:body:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Input events
Gestures
Event handling
Scroll views
View groupings
Tables
Lists
func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View
M
func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View
Beta
M
func transaction((inout Transaction) -> Void) -> some View
func withTransaction<R, V>(WritableKeyPath<Transaction, V>, V, () throws -> R) rethrows -> R
func withTransaction<Result>(Transaction, () throws -> Result) rethrows -> Result
Moving an animation to another view
S
PlaceholderContentView
Beta
S
ContentTransition
P
var contentTransitionAddsDrawingGroup: Bool
Documentation
Open Menu
Swift
Instance Method
transaction(_:body:)
Applies the given transaction mutation function to all animations used within the body closure.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
func transaction<V>(
    _ transform: @escaping (inout Transaction) -> Void,
    @ViewBuilder body: (PlaceholderContentView<Self>) -> V
) -> some View where V : View
Discussion
Any modifiers applied to the content of body will be applied to this view, and the changes to the transaction performed in the transform will only affect the modifiers defined in the body.
The following code animates the opacity changing with a faster animation, while the contents of MyView are animated with the implicit transaction:
MyView(isActive: isActive)
    .transaction { transaction in
        transaction.animation = transaction.animation?.speed(2)
    } body: { content in
        content.opacity(isActive ? 1.0 : 0.0)
    }
See Also: Transaction.disablesAnimations
See Also
Moving an animation to another view
func withTransaction<Result>(Transaction, () throws -> Result) rethrows -> Result
Executes a closure with the specified transaction and returns the result.
func withTransaction<R, V>(WritableKeyPath<Transaction, V>, V, () throws -> R) rethrows -> R
Executes a closure with the specified transaction key path and value and returns the result.
func transaction((inout Transaction) -> Void) -> some View
Applies the given transaction mutation function to all animations used within the view.
func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View
Applies the given transaction mutation function to all animations used within the view.
Beta
struct Transaction
The context of the current state-processing update.
protocol TransactionKey
A key for accessing values in a transaction.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is transaction(_:body:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

