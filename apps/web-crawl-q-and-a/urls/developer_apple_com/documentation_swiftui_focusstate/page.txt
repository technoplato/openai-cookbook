https://developer.apple.com/documentation/swiftui/focusstateSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func focusedSceneObject<T>(T?) -> some View
M
func focusedObject<T>(T) -> some View
M
func focusedObject<T>(T?) -> some View
Exposing reference types to focused views
S
FocusedValues
M
func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View
M
func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View
P
var isFocused: Bool
M
func focused(FocusState<Bool>.Binding) -> some View
M
func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View
Managing focus state
S
FocusInteractions
Beta
M
func focusable(Bool, interactions: FocusInteractions) -> some View
Beta
M
func focusable(Bool) -> some View
Indicating that a view can receive focus
Documentation
Open Menu
Swift
Structure
FocusState
A property wrapper type that can read and write a value that SwiftUI updates as the placement of focus within the scene changes.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
@frozen @propertyWrapper
struct FocusState<Value> where Value : Hashable
Overview
Use this property wrapper in conjunction with focused(_:equals:) and focused(_:) to describe views whose appearance and contents relate to the location of focus in the scene. When focus enters the modified view, the wrapped value of this property updates to match a given prototype value. Similarly, when focus leaves, the wrapped value of this property resets to nil or false. Setting the property’s value programmatically has the reverse effect, causing focus to move to the view associated with the updated value.
In the following example of a simple login screen, when the user presses the Sign In button and one of the fields is still empty, focus moves to that field. Otherwise, the sign-in process proceeds.
struct LoginForm {
    enum Field: Hashable {
        case username
        case password
    }


    @State private var username = ""
    @State private var password = ""
    @FocusState private var focusedField: Field?


    var body: some View {
        Form {
            TextField("Username", text: $username)
                .focused($focusedField, equals: .username)


            SecureField("Password", text: $password)
                .focused($focusedField, equals: .password)


            Button("Sign In") {
                if username.isEmpty {
                    focusedField = .username
                } else if password.isEmpty {
                    focusedField = .password
                } else {
                    handleLogin(username, password)
                }
            }
        }
    }
}
To allow for cases where focus is completely absent from a view tree, the wrapped value must be either an optional or a Boolean. Set the focus binding to false or nil as appropriate to remove focus from all bound fields. You can also use this to remove focus from a TextField and thereby dismiss the keyboard.
Avoid ambiguous focus bindings
The same view can have multiple focus bindings. In the following example, setting focusedField to either name or fullName causes the field to receive focus:
struct ContentView: View {
    enum Field: Hashable {
        case name
        case fullName
    }
    @FocusState private var focusedField: Field?


    var body: some View {
        TextField("Full Name", ...)
            .focused($focusedField, equals: .name)
            .focused($focusedField, equals: .fullName)
    }
}
On the other hand, binding the same value to two views is ambiguous. In the following example, two separate fields bind focus to the name value:
struct ContentView: View {
    enum Field: Hashable {
        case name
        case fullName
    }
    @FocusState private var focusedField: Field?


    var body: some View {
        TextField("Name", ...)
            .focused($focusedField, equals: .name)
        TextField("Full Name", ...)
            .focused($focusedField, equals: .name) // incorrect re-use of .name
    }
}
If the user moves focus to either field, the focusedField binding updates to name. However, if the app programmatically sets the value to name, SwiftUI chooses the first candidate, which in this case is the “Name” field. SwiftUI also emits a runtime warning in this case, since the repeated binding is likely a programmer error.
Topics
Creating a focus state
init<T>()
Creates a focus state that binds to an optional type.
init()
Creates a focus state that binds to a Boolean.
Inspecting the focus state
var projectedValue: FocusState<Value>.Binding
A projection of the focus state value that returns a binding.
struct Binding
A property wrapper type that can read and write a value that indicates the current focus location.
var wrappedValue: Value
The current state value, taking into account whatever bindings might be in effect due to the current location of focus.
Relationships
Conforms To
DynamicProperty
Sendable
See Also
Managing focus state
func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View
Modifies this view by binding its focus state to the given state value.
func focused(FocusState<Bool>.Binding) -> some View
Modifies this view by binding its focus state to the given Boolean state value.
var isFocused: Bool
Returns whether the nearest focusable ancestor has focus.
struct FocusedValue
A property wrapper for observing values from the focused view or one of its ancestors.
protocol FocusedValueKey
A protocol for identifier types used when publishing and observing focused values.
struct FocusedBinding
A convenience property wrapper for observing and automatically unwrapping state bindings from the focused view or one of its ancestors.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is FocusState
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

