https://developer.apple.com/documentation/swiftui/shapeSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func scale(CGFloat, anchor: UnitPoint) -> ScaledShape<Self>
M
func size(width: CGFloat, height: CGFloat) -> some Shape
M
func size(CGSize) -> some Shape
M
func transform(CGAffineTransform) -> TransformedShape<Self>
M
func trim(from: CGFloat, to: CGFloat) -> some Shape
Transforming a shape
M
func path(in: CGRect) -> Path
static func rect(topLeadingRadius: CGFloat, bottomLeadingRadius: CGFloat, bottomTrailingRadius: CGFloat, topTrailingRadius: CGFloat, style: RoundedCornerStyle) -> Self
r
P
ShapeView
Beta
Defining shape behavior
S
Path
Drawing custom shapes
S
Capsule
S
Ellipse
S
Circle
Creating circular shapes
Documentation
Open Menu
Swift
Protocol
Shape
A 2D shape that you can use when drawing a view.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
protocol Shape : Sendable, Animatable, View
Overview
Shapes without an explicit fill or stroke get a default fill based on the foreground color.
You can define shapes in relation to an implicit frame of reference, such as the natural size of the view that contains it. Alternatively, you can define shapes in terms of absolute coordinates.
Topics
Getting standard shapes
static var buttonBorder: ButtonBorderShape
A shape that defers to the environment to determine the resolved button border shape.
Available when Self is ButtonBorderShape.
Beta
static var capsule: Capsule
A capsule shape aligned inside the frame of the view containing it.
Available when Self is Capsule.
static func capsule(style: RoundedCornerStyle) -> Self
A capsule shape aligned inside the frame of the view containing it.
Available when Self is Capsule.
static var circle: Circle
A circle centered on the frame of the view containing it.
Available when Self is Circle.
static var containerRelative: ContainerRelativeShape
A shape that is replaced by an inset version of the current container shape. If no container shape was defined, is replaced by a rectangle.
Available when Self is ContainerRelativeShape.
static var ellipse: Ellipse
An ellipse aligned inside the frame of the view containing it.
Available when Self is Ellipse.
static var rect: Rectangle
A rectangular shape aligned inside the frame of the view containing it.
Available when Self is Rectangle.
static func rect(cornerRadii: RectangleCornerRadii, style: RoundedCornerStyle) -> Self
A rectangular shape with rounded corners with different values, aligned inside the frame of the view containing it.
Available when Self is UnevenRoundedRectangle.
static func rect(cornerRadius: CGFloat, style: RoundedCornerStyle) -> Self
A rectangular shape with rounded corners, aligned inside the frame of the view containing it.
Available when Self is RoundedRectangle.
static func rect(cornerSize: CGSize, style: RoundedCornerStyle) -> Self
A rectangular shape with rounded corners, aligned inside the frame of the view containing it.
Available when Self is RoundedRectangle.
static func rect(topLeadingRadius: CGFloat, bottomLeadingRadius: CGFloat, bottomTrailingRadius: CGFloat, topTrailingRadius: CGFloat, style: RoundedCornerStyle) -> Self
A rectangular shape with rounded corners with different values, aligned inside the frame of the view containing it.
Available when Self is UnevenRoundedRectangle.
Defining a shape’s size and path
func sizeThatFits(ProposedViewSize) -> CGSize
Returns the size of the view that will render the shape, given a proposed size.
Required Default implementation provided.
func path(in: CGRect) -> Path
Describes this shape as a path within a rectangular frame of reference.
Required
Transforming a shape
func trim(from: CGFloat, to: CGFloat) -> some Shape
Trims this shape by a fractional amount based on its representation as a path.
func transform(CGAffineTransform) -> TransformedShape<Self>
Applies an affine transform to this shape.
func size(CGSize) -> some Shape
Returns a new version of self representing the same shape, but that will ask it to create its path from a rect of size. This does not affect the layout properties of any views created from the shape (e.g. by filling it).
func size(width: CGFloat, height: CGFloat) -> some Shape
Returns a new version of self representing the same shape, but that will ask it to create its path from a rect of size (width, height). This does not affect the layout properties of any views created from the shape (e.g. by filling it).
func scale(CGFloat, anchor: UnitPoint) -> ScaledShape<Self>
Scales this shape without changing its bounding frame.
func scale(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> ScaledShape<Self>
Scales this shape without changing its bounding frame.
func rotation(Angle, anchor: UnitPoint) -> RotatedShape<Self>
Rotates this shape around an anchor point at the angle you specify.
func offset(CGSize) -> OffsetShape<Self>
Changes the relative position of this shape using the specified size.
func offset(CGPoint) -> OffsetShape<Self>
Changes the relative position of this shape using the specified point.
func offset(x: CGFloat, y: CGFloat) -> OffsetShape<Self>
Changes the relative position of this shape using the specified point.
Setting the stroke characteristics
func stroke<S>(S, lineWidth: CGFloat) -> some View
Traces the outline of this shape with a color or gradient.
func stroke<S>(S, lineWidth: CGFloat, antialiased: Bool) -> StrokeShapeView<Self, S, EmptyView>
Traces the outline of this shape with a color or gradient.
Beta
func stroke(lineWidth: CGFloat) -> some Shape
Returns a new shape that is a stroked copy of self with line-width defined by lineWidth and all other properties of StrokeStyle having their default values.
func stroke<S>(S, style: StrokeStyle) -> some View
Traces the outline of this shape with a color or gradient.
func stroke<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeShapeView<Self, S, EmptyView>
Traces the outline of this shape with a color or gradient.
Beta
func stroke(style: StrokeStyle) -> some Shape
Returns a new shape that is a stroked copy of self, using the contents of style to define the stroke characteristics.
Filling a shape
func fill<S>(S, style: FillStyle) -> _ShapeView<Self, S>
Fills this shape with a color or gradient.
Beta
func fill<S>(S, style: FillStyle) -> some View
Fills this shape with a color or gradient.
func fill(style: FillStyle) -> some View
Fills this shape with the foreground color.
Setting the role
static var role: ShapeRole
An indication of how to style a shape.
Required Default implementation provided.
Indicating a layout direction
var layoutDirectionBehavior: LayoutDirectionBehavior
Returns the behavior this shape should use for different layout directions.
Required Default implementation provided.
Beta
Performing operations on a shape
func intersection<T>(T, eoFill: Bool) -> some Shape
Returns a new shape with filled regions common to both shapes.
Beta
func lineIntersection<T>(T, eoFill: Bool) -> some Shape
Returns a new shape with a line from this shape that overlaps the filled regions of the given shape.
Beta
func lineSubtraction<T>(T, eoFill: Bool) -> some Shape
Returns a new shape with a line from this shape that does not overlap the filled region of the given shape.
Beta
func subtracting<T>(T, eoFill: Bool) -> some Shape
Returns a new shape with filled regions from this shape that are not in the given shape.
Beta
func symmetricDifference<T>(T, eoFill: Bool) -> some Shape
Returns a new shape with filled regions either from this shape or the given shape, but not in both.
Beta
func union<T>(T, eoFill: Bool) -> some Shape
Returns a new shape with filled regions in either this shape or the given shape.
Beta
Relationships
Inherits From
Animatable
Sendable
View
Inherited By
InsettableShape
Conforming Types
AnyShape
ButtonBorderShape
Capsule
Circle
ContainerRelativeShape
Ellipse
OffsetShape
Path
Rectangle
RotatedShape
RoundedRectangle
ScaledShape
TransformedShape
UnevenRoundedRectangle
See Also
Defining shape behavior
protocol ShapeView
A view that provides a shape that you can use for drawing operations.
Beta
struct AnyShape
A type-erased shape value.
enum ShapeRole
Ways of styling a shape.
struct StrokeStyle
The characteristics of a stroke that traces a path.
struct StrokeShapeView
A shape provider that strokes its shape.
Beta
struct StrokeBorderShapeView
A shape provider that strokes the border of its shape.
Beta
struct FillStyle
A style for rasterizing vector shapes.
struct FillShapeView
A shape provider that fills its shape.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Shape
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

