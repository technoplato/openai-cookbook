https://developer.apple.com/documentation/swiftui/pickerSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func pickerStyle<S>(S) -> some View
M
init(selection: Binding<SelectionValue>, label: Label, content: () -> Content)
Deprecated
Deprecated initializers
M
init<C, S>(S, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
M
init<C>(LocalizedStringKey, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
M
init(LocalizedStringKey, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)
M
init<S>(S, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)
init<C>(LocalizedStringKey, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
init<C, S>(S, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
init<C>(sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content, label: () -> Label)
init<C>(LocalizedStringKey, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
Choosing from a set of options
M
func toggleStyle<S>(S) -> some View
S
Toggle
S
Stepper
S
Slider
Getting numeric inputs
S
HelpLink
Beta
S
TextFieldLink
Documentation
Open Menu
Swift
Structure
Picker
A control for selecting from a set of mutually exclusive values.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
struct Picker<Label, SelectionValue, Content> where Label : View, SelectionValue : Hashable, Content : View
Overview
You create a picker by providing a selection binding, a label, and the content for the picker to display. Set the selection parameter to a bound property that provides the value to display as the current selection. Set the label to a view that visually describes the purpose of selecting content in the picker, and then provide the content for the picker to display.
For example, consider an enumeration of ice cream flavors and a State variable to hold the selected flavor:
enum Flavor: String, CaseIterable, Identifiable {
    case chocolate, vanilla, strawberry
    var id: Self { self }
}


@State private var selectedFlavor: Flavor = .chocolate
You can create a picker to select among the values by providing a label, a binding to the current selection, and a collection of views for the picker’s content. Append a tag to each of these content views using the tag(_:) view modifier so that the type of each selection matches the type of the bound state variable:
List {
    Picker("Flavor", selection: $selectedFlavor) {
        Text("Chocolate").tag(Flavor.chocolate)
        Text("Vanilla").tag(Flavor.vanilla)
        Text("Strawberry").tag(Flavor.strawberry)
    }
}
If you provide a string label for the picker, as the example above does, the picker uses it to initialize a Text view as a label. Alternatively, you can use the init(selection:content:label:) initializer to compose the label from other views. The exact appearance of the picker depends on the context. If you use a picker in a List in iOS, it appears in a row with the label and selected value, and a chevron to indicate that you can tap the row to select a new value:
Iterating over a picker’s options
To provide selection values for the Picker without explicitly listing each option, you can create the picker with a ForEach:
Picker("Flavor", selection: $selectedFlavor) {
    ForEach(Flavor.allCases) { flavor in
        Text(flavor.rawValue.capitalized)
    }
}
ForEach automatically assigns a tag to the selection views using each option’s id. This is possible because Flavor conforms to the Identifiable protocol.
The example above relies on the fact that Flavor defines the type of its id parameter to exactly match the selection type. If that’s not the case, you need to override the tag. For example, consider a Topping type and a suggested topping for each flavor:
enum Topping: String, CaseIterable, Identifiable {
    case nuts, cookies, blueberries
    var id: Self { self }
}


extension Flavor {
    var suggestedTopping: Topping {
        switch self {
        case .chocolate: return .nuts
        case .vanilla: return .cookies
        case .strawberry: return .blueberries
        }
    }
}


@State private var suggestedTopping: Topping = .nuts
The following example shows a picker that’s bound to a Topping type, while the options are all Flavor instances. Each option uses the tag modifier to associate the suggested topping with the flavor it displays:
List {
    Picker("Flavor", selection: $suggestedTopping) {
        ForEach(Flavor.allCases) { flavor in
            Text(flavor.rawValue.capitalized)
                .tag(flavor.suggestedTopping)
        }
    }
    HStack {
        Text("Suggested Topping")
        Spacer()
        Text(suggestedTopping.rawValue.capitalized)
            .foregroundStyle(.secondary)
    }
}
When the user selects chocolate, the picker sets suggestedTopping to the value in the associated tag:
Other examples of when the views in a picker’s ForEach need an explicit tag modifier include when you:
Select over the cases of an enumeration that conforms to the Identifiable protocol by using anything besides Self as the id parameter type. For example, a string enumeration might use the case’s rawValue string as the id. That identifier type doesn’t match the selection type, which is the type of the enumeration itself.
Use an optional value for the selection input parameter. For that to work, you need to explicitly cast the tag modifier’s input as Optional to match. For an example of this, see tag(_:).
Styling pickers
You can customize the appearance and interaction of pickers using styles that conform to the PickerStyle protocol, like segmented or menu. To set a specific style for all picker instances within a view, use the pickerStyle(_:) modifier. The following example applies the segmented style to two pickers that independently select a flavor and a topping:
VStack {
    Picker("Flavor", selection: $selectedFlavor) {
        ForEach(Flavor.allCases) { flavor in
            Text(flavor.rawValue.capitalized)
        }
    }
    Picker("Topping", selection: $selectedTopping) {
        ForEach(Topping.allCases) { topping in
            Text(topping.rawValue.capitalized)
        }
    }
}
.pickerStyle(.segmented)
Topics
Creating a picker
init(selection: Binding<SelectionValue>, content: () -> Content, label: () -> Label)
Creates a picker that displays a custom label.
Available when Label conforms to View, SelectionValue conforms to Hashable, and Content conforms to View.
init(LocalizedStringKey, selection: Binding<SelectionValue>, content: () -> Content)
Creates a picker that generates its label from a localized string key.
Available when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View.
init<S>(S, selection: Binding<SelectionValue>, content: () -> Content)
Creates a picker that generates its label from a string.
Available when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View.
Creating a picker for a collection
init<C>(LocalizedStringKey, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
Creates a picker that generates its label from a localized string key.
Available when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View.
init<C, S>(S, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
Creates a picker bound to a collection of bindings that generates its label from a string.
Available when Label is Text, SelectionValue conforms to Hashable, and Content conforms to View.
init<C>(sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content, label: () -> Label)
Creates a picker that displays a custom label.
Available when Label conforms to View, SelectionValue conforms to Hashable, and Content conforms to View.
Creating a picker with an image resource label
init<S>(S, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)
Creates a picker that generates its label from a string and image resource.
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
Beta
init(LocalizedStringKey, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)
Creates a picker that generates its label from a localized string key and image resource
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
Beta
init<C, S>(S, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
Creates a picker bound to a collection of bindings that generates its label from a string and image resource.
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
Beta
init<C>(LocalizedStringKey, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
Creates a picker that generates its label from a localized string key and image resource.
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
Beta
Creating a picker with an system image label
init<S>(S, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)
Creates a picker that generates its label from a string and system image.
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
init(LocalizedStringKey, systemImage: String, selection: Binding<SelectionValue>, content: () -> Content)
Creates a picker that generates its label from a localized string key and system image.
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
init<C>(LocalizedStringKey, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
Creates a picker that generates its label from a localized string key.
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
init<C, S>(S, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
Creates a picker bound to a collection of bindings that generates its label from a string.
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
Deprecated initializers
init(selection: Binding<SelectionValue>, label: Label, content: () -> Content)
Creates a picker that displays a custom label.
Available when Label conforms to View, SelectionValue conforms to Hashable, and Content conforms to View.
Deprecated
Relationships
Conforms To
Sendable
View
See Also
Choosing from a set of options
func pickerStyle<S>(S) -> some View
Sets the style for pickers within this view.
func horizontalRadioGroupLayout() -> some View
Sets the style for radio group style pickers within this view to be horizontally positioned with the radio buttons inside the layout.
func defaultWheelPickerItemHeight(CGFloat) -> some View
Sets the default wheel-style picker item height.
var defaultWheelPickerItemHeight: CGFloat
The default height of an item in a wheel-style picker, such as a date picker.
func paletteSelectionEffect(PaletteSelectionEffect) -> some View
Specifies the selection effect to apply to a palette item.
Beta
struct PaletteSelectionEffect
The selection effect to apply to a palette item.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Picker
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

