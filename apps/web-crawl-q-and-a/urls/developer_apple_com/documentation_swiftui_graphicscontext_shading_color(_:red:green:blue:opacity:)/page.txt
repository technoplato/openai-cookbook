https://developer.apple.com/documentation/swiftui/graphicscontext/shading/color(_:red:green:blue:opacity:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func draw(GraphicsContext.ResolvedImage, in: CGRect, style: FillStyle)
M
func draw(GraphicsContext.ResolvedImage, at: CGPoint, anchor: UnitPoint)
M
func draw(Image, in: CGRect, style: FillStyle)
M
func draw(Image, at: CGPoint, anchor: UnitPoint)
Drawing an image
S
GraphicsContext.GradientOptions
M
static func shader(Shader, bounds: CGRect) -> GraphicsContext.Shading
static func tiledImage(Image, origin: CGPoint, sourceRect: CGRect, scale: CGFloat) -> GraphicsContext.Shading
static func conicGradient(Gradient, center: CGPoint, angle: Angle, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading
static func radialGradient(Gradient, center: CGPoint, startRadius: CGFloat, endRadius: CGFloat, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading
static func linearGradient(Gradient, startPoint: CGPoint, endPoint: CGPoint, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading
static func color(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double) -> GraphicsContext.Shading
M
static func color(Color) -> GraphicsContext.Shading
Colors
S
GraphicsContext.Shading
M
func resolve(GraphicsContext.Shading) -> GraphicsContext.Shading
M
func fill(Path, with: GraphicsContext.Shading, style: FillStyle)
M
func stroke(Path, with: GraphicsContext.Shading, style: StrokeStyle)
M
func stroke(Path, with: GraphicsContext.Shading, lineWidth: CGFloat)
Drawing a path
Documentation
Open Menu
Swift
Type Method
color(_:red:green:blue:opacity:)
Returns a shading instance that fills with a color in the given color space.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
static func color(
    _ colorSpace: Color.RGBColorSpace = .sRGB,
    red: Double,
    green: Double,
    blue: Double,
    opacity: Double = 1
) -> GraphicsContext.Shading
Parameters
colorSpace
The RGB color space used to define the color. The default is Color.RGBColorSpace.sRGB.
red
The red component of the color.
green
The green component of the color.
blue
The blue component of the color.
opacity
The opacity of the color. The default is 1, which means fully opaque.
Return Value
A shading instance filled with a color.
See Also
Colors
static func color(Color) -> GraphicsContext.Shading
Returns a shading instance that fills with a color.
static func color(Color.RGBColorSpace, white: Double, opacity: Double) -> GraphicsContext.Shading
Returns a shading instance that fills with a monochrome color in the given color space.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is color(_:red:green:blue:opacity:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

