https://developer.apple.com/documentation/swiftui/canvasSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View
M
func foregroundStyle<S1, S2>(S1, S2) -> some View
M
func foregroundStyle<S>(S) -> some View
M
func border<S>(S, width: CGFloat) -> some View
Styling content
S
Color
M
func tint(Color?) -> some View
init(opaque: Bool, colorMode: ColorRenderingMode, rendersAsynchronously: Bool, renderer: (inout GraphicsContext, CGSize) -> Void, symbols: () -> Symbols)
init(opaque: Bool, colorMode: ColorRenderingMode, rendersAsynchronously: Bool, renderer: (inout GraphicsContext, CGSize) -> Void)
Add Rich Graphics to Your SwiftUI App
Immediate mode drawing
Drawing and graphics
Shapes
Menus and commands
Controls and indicators
Images
Text input and output
Documentation
Open Menu
Swift
Structure
Canvas
A view type that supports immediate mode drawing.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
struct Canvas<Symbols> where Symbols : View
Overview
Use a canvas to draw rich and dynamic 2D graphics inside a SwiftUI view. The canvas passes a GraphicsContext to the closure that you use to perform immediate mode drawing operations. The canvas also passes a doc://com.apple.documentation/documentation/CoreGraphics/CGSize value that you can use to customize what you draw. For example, you can use the context’s stroke(_:with:lineWidth:) command to draw a Path instance:
Canvas { context, size in
    context.stroke(
        Path(ellipseIn: CGRect(origin: .zero, size: size)),
        with: .color(.green),
        lineWidth: 4)
}
.frame(width: 300, height: 200)
.border(Color.blue)
The example above draws the outline of an ellipse that exactly inscribes a canvas with a blue border:
In addition to outlined and filled paths, you can draw images, text, and complete SwiftUI views. To draw views, use the init(opaque:colorMode:rendersAsynchronously:renderer:symbols:) method to supply views that you can reference from inside the renderer. You can also add masks, apply filters, perform transforms, control blending, and more. For information about how to draw, see GraphicsContext.
A canvas doesn’t offer interactivity or accessibility for individual elements, including for views that you pass in as symbols. However, it might provide better performance for a complex drawing that involves dynamic data. Use a canvas to improve performance for a drawing that doesn’t primarily involve text or require interactive elements.
Topics
Creating a canvas
init(opaque: Bool, colorMode: ColorRenderingMode, rendersAsynchronously: Bool, renderer: (inout GraphicsContext, CGSize) -> Void)
Creates and configures a canvas.
Available when Symbols is EmptyView.
init(opaque: Bool, colorMode: ColorRenderingMode, rendersAsynchronously: Bool, renderer: (inout GraphicsContext, CGSize) -> Void, symbols: () -> Symbols)
Creates and configures a canvas that you supply with renderable child views.
Managing opacity and color
var isOpaque: Bool
A Boolean that indicates whether the canvas is fully opaque.
var colorMode: ColorRenderingMode
The working color space and storage format of the canvas.
Referencing symbols
var symbols: Symbols
A view that provides child views that you can use in the drawing callback.
Rendering
var rendersAsynchronously: Bool
A Boolean that indicates whether the canvas can present its contents to its parent view asynchronously.
var renderer: (inout GraphicsContext, CGSize) -> Void
The drawing callback that you use to draw into the canvas.
Relationships
Conforms To
Sendable
View
Conforms when Symbols conforms to View.
See Also
Immediate mode drawing
struct GraphicsContext
An immediate mode drawing destination, and its current state.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Canvas
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

