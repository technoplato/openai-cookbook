https://developer.apple.com/documentation/swiftui/view/accessibilityfocused(_:equals:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Monitoring data changes in your app
Migrating from the Observable Object protocol to the Observable macro
Managing model data in your app
Focus Cookbook: Supporting and enhancing focus-driven interactions in your SwiftUI app
Controlling the timing and movements of your animations
Building a document-based app using SwiftData
Backyard Birds: Building an app with SwiftData and widgets
M
func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View
Controlling focus
S
AccessibilityZoomGestureAction
S
AccessibilityDirectTouchOptions
Beta
M
func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
M
func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Beta
M
func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
M
func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Documentation
Open Menu
Swift
Instance Method
accessibilityFocused(_:equals:)
Modifies this view by binding its accessibility element’s focus state to the given state value.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
func accessibilityFocused<Value>(
    _ binding: AccessibilityFocusState<Value>.Binding,
    equals value: Value
) -> some View where Value : Hashable
Parameters
binding
The state binding to register. When accessibility focus moves to the accessibility element of the modified view, SwiftUI sets the bound value to the corresponding match value. If you set the state value programmatically to the matching value, then accessibility focus moves to the accessibility element of the modified view. SwiftUI sets the value to nil if accessibility focus leaves the accessibility element associated with the modified view, and programmatically setting the value to nil dismisses focus automatically.
value
The value to match against when determining whether the binding should change.
Return Value
The modified view.
See Also
Controlling focus
func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View
Modifies this view by binding its accessibility element’s focus state to the given boolean state value.
struct AccessibilityFocusState
A property wrapper type that can read and write a value that SwiftUI updates as the focus of any active accessibility technology, such as VoiceOver, changes.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is accessibilityFocused(_:equals:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

