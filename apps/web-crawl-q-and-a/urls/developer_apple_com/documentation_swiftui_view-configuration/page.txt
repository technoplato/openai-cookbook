https://developer.apple.com/documentation/swiftui/view-configurationSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func glassBackgroundEffect<S>(in: S, displayMode: GlassBackgroundDisplayMode) -> some View
Beta
M
func glassBackgroundEffect(displayMode: GlassBackgroundDisplayMode) -> some View
Beta
Adding a glass background
M
func help(Text) -> some View
M
func help<S>(S) -> some View
M
func help(LocalizedStringKey) -> some View
Providing contextual help
View fundamentals
Views
Persistent storage
Preferences
Environment values
Model data
Data and storage
App extensions
Documentation
Open Menu
Swift
View configuration
Adjust the characteristics of views in a hierarchy.
Overview
SwiftUI enables you to tune the appearance and behavior of views using view modifiers.
Many modifiers apply to specific kinds of views or behaviors, but some apply more generally. For example, you can conditionally hide any view by dynamically setting its opacity, display contextual help when people hover over a view, or request the light or dark appearance for a view.
Topics
Hiding views
func opacity(Double) -> some View
Sets the transparency of this view.
func hidden() -> some View
Hides this view unconditionally.
Hiding system elements
func labelsHidden() -> some View
Hides the labels of any controls contained within this view.
func menuIndicator(Visibility) -> some View
Sets the menu indicator visibility for controls within this view.
func statusBarHidden(Bool) -> some View
Sets the visibility of the status bar.
func persistentSystemOverlays(Visibility) -> some View
Sets the preferred visibility of the non-transient system views overlaying the app.
enum Visibility
The visibility of a UI element, chosen automatically based on the platform, current context, and other factors.
Managing view interaction
func disabled(Bool) -> some View
Adds a condition that controls whether users can interact with this view.
var isEnabled: Bool
A Boolean value that indicates whether the view associated with this environment allows user interaction.
func interactionActivityTrackingTag(String) -> some View
Sets a tag that you use for tracking interactivity.
func invalidatableContent(Bool) -> some View
Mark the receiver as their content might be invalidated.
Beta
Providing contextual help
func help(LocalizedStringKey) -> some View
Adds help text to a view using a localized string that you provide.
func help<S>(S) -> some View
Adds help text to a view using a string that you provide.
func help(Text) -> some View
Adds help text to a view using a text view that you provide.
Adding a glass background
func glassBackgroundEffect(displayMode: GlassBackgroundDisplayMode) -> some View
Sets the view’s glass background to displayMode, filling the view’s container relative rounded corner shape.
Beta
func glassBackgroundEffect<S>(in: S, displayMode: GlassBackgroundDisplayMode) -> some View
Sets the view’s glass background to a specified shape filled with the dispalyMode.
Beta
enum GlassBackgroundDisplayMode
Beta
Detecting and requesting the light or dark appearance
func preferredColorScheme(ColorScheme?) -> some View
Sets the preferred color scheme for this presentation.
var colorScheme: ColorScheme
The color scheme of this environment.
enum ColorScheme
The possible color schemes, corresponding to the light and dark appearances.
Getting the color scheme contrast
var colorSchemeContrast: ColorSchemeContrast
The contrast associated with the color scheme of this environment.
enum ColorSchemeContrast
The contrast between the app’s foreground and background colors.
Configuring passthrough
func preferredSurroundingsEffect(SurroundingsEffect?) -> some View
Sets the preference for the video passthrough effect of the user’s surroundings. Use nil to state no preference. Note that this modifier only sets a preference and ultimately the system will decide if it will honor it or not.
Beta
struct SurroundingsEffect
Beta
Redacting private content
Designing your app for the Always On state
Customize your watchOS app’s user interface for continuous display.
func privacySensitive(Bool) -> some View
Marks the view as containing sensitive, private user data.
func redacted(reason: RedactionReasons) -> some View
Adds a reason to apply a redaction to this view hierarchy.
func unredacted() -> some View
Removes any reason to apply a redaction to this view hierarchy.
var redactionReasons: RedactionReasons
The current redaction reasons applied to the view hierarchy.
struct RedactionReasons
The reasons to apply a redaction to data displayed on screen.
See Also
Views
API Reference
View fundamentals
Define the visual elements of your app using a hierarchy of views.
API Reference
View styles
Apply built-in and custom appearances and behaviors to different types of views.
API Reference
Animations
Create smooth visual updates in response to state changes.
API Reference
Text input and output
Display formatted text and get text input from the user.
API Reference
Images
Add images and symbols to your app’s user interface.
API Reference
Controls and indicators
Display values and get user selections.
API Reference
Menus and commands
Provide space-efficient, context-dependent access to commands and controls.
API Reference
Shapes
Trace and fill built-in and custom shapes with a color, gradient, or other pattern.
API Reference
Drawing and graphics
Enhance your views with graphical effects and customized drawings.
Current page is View configuration
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

