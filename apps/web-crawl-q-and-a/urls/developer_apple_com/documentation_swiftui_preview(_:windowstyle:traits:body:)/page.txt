https://developer.apple.com/documentation/swiftui/preview(_:windowstyle:traits:body:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Chart view modifiers
Auxiliary view modifiers
Text and symbol modifiers
Appearance modifiers
Accessibility modifiers
Configuring view elements
r
P
PreviewContextKey
macro Preview<Style>(String?, windowStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> View, cameras: () -> [PreviewCamera])
macro Preview<Style>(String?, windowStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> View)
#
macro Preview<Style>(String?, immersionStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> View, cameras: () -> [PreviewCamera])
Beta
#
macro Preview<Style>(String?, immersionStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> View)
Beta
Specifying a scene style for a preview
E
PreviewPlatform
r
P
PreviewProvider
#
macro Preview(String?, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> View, cameras: () -> [PreviewCamera])
Beta
#
macro Preview(String?, traits: PreviewTrait<Preview.ViewTraits>, PreviewTrait<Preview.ViewTraits>..., body: () -> View)
Beta
#
macro Preview(String?, body: () -> View)
Documentation
Open Menu
Swift
Macro
Preview(_:windowStyle:traits:body:)
Creates a preview of a SwiftUI with given window style.
visionOS 1.0+ Beta
@freestanding(declaration)
macro Preview<Style>(
    _ name: String? = nil,
    windowStyle: Style,
    traits: PreviewTrait<Preview.ViewTraits>...,
    @ViewBuilder body: @escaping @MainActor () -> View
) where Style : WindowStyle
Parameters
name
Optional display name for the preview, which will appear in the canvas.
windowStyle
The window style to use for the preview.
traits
Optional list of traits customizing the appearance of the preview.
body
A closure producing a SwiftUI view.
cameras
A closure producing an array of preview cameras.
Overview
For example creating preview in volumetric window:
#Preview("Volumetric window", windowStyle: .volumetric) {
   ContentView()
}
See Also
Specifying a scene style for a preview
macro Preview<Style>(String?, immersionStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> View)
Creates a preview of a SwiftUI in immersive space.
Beta
macro Preview<Style>(String?, immersionStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> View, cameras: () -> [PreviewCamera])
Creates a preview of a SwiftUI in immersive space and custom preview cameras.
Beta
macro Preview<Style>(String?, windowStyle: Style, traits: PreviewTrait<Preview.ViewTraits>..., body: () -> View, cameras: () -> [PreviewCamera])
Creates a preview of a SwiftUI view with given window style and custom preview cameras.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Preview(_:windowStyle:traits:body:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

