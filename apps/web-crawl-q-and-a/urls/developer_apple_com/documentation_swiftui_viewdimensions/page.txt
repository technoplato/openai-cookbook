https://developer.apple.com/documentation/swiftui/viewdimensionsSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
SafeAreaRegions
M
func safeAreaPadding(Edge.Set, CGFloat?) -> some View
Beta
M
func safeAreaPadding(CGFloat) -> some View
Beta
M
func safeAreaPadding(EdgeInsets) -> some View
Beta
M
func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View
M
func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View
M
func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View
r
P
AlignmentID
S
DepthAlignment
Beta
S
VerticalAlignment
S
HorizontalAlignment
S
Alignment
M
func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
M
func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Aligning views across stacks
Documentation
Open Menu
Swift
Structure
ViewDimensions
A view’s size and alignment guides in its own coordinate space.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
struct ViewDimensions
Overview
This structure contains the size and alignment guides of a view. You receive an instance of this structure to use in a variety of layout calculations, like when you:
Define a default value for a custom alignment guide; see defaultValue(in:).
Modify an alignment guide on a view; see alignmentGuide(_:computeValue:).
Ask for the dimensions of a subview of a custom view layout; see dimensions(in:).
Custom alignment guides
You receive an instance of this structure as the context parameter to the defaultValue(in:) method that you implement to produce the default offset for an alignment guide, or as the first argument to the closure you provide to the alignmentGuide(_:computeValue:) view modifier to override the default calculation for an alignment guide. In both cases you can use the instance, if helpful, to calculate the offset for the guide. For example, you could compute a default offset for a custom VerticalAlignment as a fraction of the view’s height:
private struct FirstThirdAlignment: AlignmentID {
    static func defaultValue(in context: ViewDimensions) -> CGFloat {
        context.height / 3
    }
}


extension VerticalAlignment {
    static let firstThird = VerticalAlignment(FirstThirdAlignment.self)
}
As another example, you could use the view dimensions instance to look up the offset of an existing guide and modify it:
struct ViewDimensionsOffset: View {
    var body: some View {
        VStack(alignment: .leading) {
            Text("Default")
            Text("Indented")
                .alignmentGuide(.leading) { context in
                    context[.leading] - 10
                }
        }
    }
}
The example above indents the second text view because the subtraction moves the second text view’s leading guide in the negative x direction, which is to the left in the view’s coordinate space. As a result, SwiftUI moves the second text view to the right, relative to the first text view, to keep their leading guides aligned:
Layout direction
The discussion above describes a left-to-right language environment, but you don’t change your guide calculation to operate in a right-to-left environment. SwiftUI moves the view’s origin from the left to the right side of the view and inverts the positive x direction. As a result, the existing calculation produces the same effect, but in the opposite direction.
You can see this if you use the environment(_:_:) modifier to set the layoutDirection property for the view that you defined above:
ViewDimensionsOffset()
    .environment(\.layoutDirection, .rightToLeft)
With no change in your guide, this produces the desired effect — it indents the second text view’s right side, relative to the first text view’s right side. The leading edge is now on the right, and the direction of the offset is reversed:
Topics
Getting dimensions
var height: CGFloat
The view’s height.
var width: CGFloat
The view’s width.
Accessing guide values
subscript(VerticalAlignment) -> CGFloat
Gets the value of the given vertical guide.
subscript(HorizontalAlignment) -> CGFloat
Gets the value of the given horizontal guide.
subscript(explicit _: VerticalAlignment) -> CGFloat?
Gets the explicit value of the given vertical alignment guide
subscript(explicit _: HorizontalAlignment) -> CGFloat?
Gets the explicit value of the given horizontal alignment guide.
Relationships
Conforms To
Equatable
Sendable
See Also
Aligning views
Aligning views within a stack
Position views inside a stack using alignment guides.
Aligning views across stacks
Create a custom alignment and use it to align views across multiple stacks.
func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Sets the view’s horizontal alignment.
func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Sets the view’s vertical alignment.
struct Alignment
An alignment in both axes.
struct HorizontalAlignment
An alignment position along the horizontal axis.
struct VerticalAlignment
An alignment position along the vertical axis.
struct DepthAlignment
An alignment position along the depth axis.
Beta
protocol AlignmentID
A type that you use to create custom alignment guides.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is ViewDimensions
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

