https://developer.apple.com/documentation/swiftui/observedobject/init(wrappedvalue:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
View configuration
View fundamentals
Views
Persistent storage
Preferences
Environment values
r
P
DynamicProperty
Creating an observed object
S
ObservedObject
S
StateObject
Monitoring data changes in your app
#
macro Observable()
Beta
Migrating from the Observable Object protocol to the Observable macro
Managing model data in your app
Creating model data
Documentation
Open Menu
Swift
Initializer
init(wrappedValue:)
Creates an observed object with an initial wrapped value.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
init(wrappedValue: ObjectType)
Parameters
wrappedValue
An initial value for the observable object.
Discussion
Don’t call this initializer directly. Instead, declare an input to a view with the @ObservedObject attribute, and pass a value to this input when you instantiate the view. Unlike a StateObject which manages data storage, you use an observed object to refer to storage that you manage elsewhere, as in the following example:
class DataModel: ObservableObject {
    @Published var name = "Some Name"
    @Published var isEnabled = false
}


struct MyView: View {
    @StateObject private var model = DataModel()


    var body: some View {
        Text(model.name)
        MySubView(model: model)
    }
}


struct MySubView: View {
    @ObservedObject var model: DataModel


    var body: some View {
        Toggle("Enabled", isOn: $model.isEnabled)
    }
}
Explicitly calling the observed object initializer in MySubView would behave correctly, but would needlessly recreate the same observed object instance every time SwiftUI calls the view’s initializer to redraw the view.
See Also
Creating an observed object
init(initialValue: ObjectType)
Creates an observed object with an initial value.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(wrappedValue:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

