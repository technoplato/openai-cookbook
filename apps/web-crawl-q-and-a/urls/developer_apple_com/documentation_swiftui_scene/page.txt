https://developer.apple.com/documentation/swiftui/sceneSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func defaultSize(Size3D) -> some Scene
Beta
M
func defaultSize(CGSize) -> some Scene
M
func defaultPosition(UnitPoint) -> some Scene
Sizing and positioning the scene
M
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some Scene
M
func keyboardShortcut(KeyboardShortcut?) -> some Scene
M
func commandsReplaced<Content>(content: () -> Content) -> some Scene
Creating scenes
Scenes
App organization
App structure
SwiftUI updates
Exploring SwiftUI Sample Apps
Learning SwiftUI
Introducing SwiftUI
Documentation
Open Menu
Swift
Protocol
Scene
A part of an app’s user interface with a life cycle managed by the system.
iOS 14.0+
iPadOS 14.0+
macOS 11.0+
Mac Catalyst 14.0+
tvOS 14.0+
watchOS 7.0+
visionOS 1.0+ Beta
protocol Scene
Overview
You create an App by combining one or more instances that conform to the Scene protocol in the app’s body. You can use the built-in scenes that SwiftUI provides, like WindowGroup, along with custom scenes that you compose from other scenes. To create a custom scene, declare a type that conforms to the Scene protocol. Implement the required body computed property and provide the content for your custom scene:
struct MyScene: Scene {
    var body: some Scene {
        WindowGroup {
            MyRootView()
        }
    }
}
A scene acts as a container for a view hierarchy that you want to display to the user. The system decides when and how to present the view hierarchy in the user interface in a way that’s platform-appropriate and dependent on the current state of the app. For example, for the window group shown above, the system lets the user create or remove windows that contain MyRootView on platforms like macOS and iPadOS. On other platforms, the same view hierarchy might consume the entire display when active.
Read the scenePhase environment value from within a scene or one of its views to check whether a scene is active or in some other state. You can create a property that contains the scene phase, which is one of the values in the ScenePhase enumeration, using the Environment attribute:
struct MyScene: Scene {
    @Environment(\.scenePhase) private var scenePhase


    // ...
}
The Scene protocol provides scene modifiers, defined as protocol methods with default implementations, that you use to configure a scene. For example, you can use the onChange(of:perform:) modifier to trigger an action when a value changes. The following code empties a cache when all of the scenes in the window group have moved to the background:
struct MyScene: Scene {
    @Environment(\.scenePhase) private var scenePhase
    @StateObject private var cache = DataCache()


    var body: some Scene {
        WindowGroup {
            MyRootView()
        }
        .onChange(of: scenePhase) { newScenePhase in
            if newScenePhase == .background {
                cache.empty()
            }
        }
    }
}
Topics
Creating a scene
var body: Self.Body
The content and behavior of the scene.
Required
associatedtype Body : Scene
The type of scene that represents the body of this scene.
Required
Watching for changes
func onChange<V>(of: V, initial: Bool, () -> Void) -> some Scene
Adds an action to perform when the given value changes.
Beta
func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some Scene
Adds an action to perform when the given value changes.
Beta
func handlesExternalEvents(matching: Set<String>) -> some Scene
Specifies a modifier to indicate if this Scene can be used when creating a new Scene for the received External Event.
Creating background tasks
func backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some Scene
Runs the specified action when the system provides a background task.
Managing app storage
func defaultAppStorage(UserDefaults) -> some Scene
The default store used by AppStorage contained within the scene and its view content.
Setting commands
func commands<Content>(content: () -> Content) -> some Scene
Adds commands to the scene.
func commandsRemoved() -> some Scene
Removes all commands defined by the modified scene.
func commandsReplaced<Content>(content: () -> Content) -> some Scene
Replaces all commands defined by the modified scene with the commands from the builder.
func keyboardShortcut(KeyboardShortcut?) -> some Scene
Defines a keyboard shortcut for opening new scene windows.
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some Scene
Defines a keyboard shortcut for opening new scene windows.
Sizing and positioning the scene
func defaultPosition(UnitPoint) -> some Scene
Sets a default position for a window.
func defaultSize(CGSize) -> some Scene
Sets a default size for a window.
func defaultSize(Size3D) -> some Scene
Sets a default size for a volumetric window.
Beta
func defaultSize(width: CGFloat, height: CGFloat) -> some Scene
Sets a default width and height for a window.
func defaultSize(width: CGFloat, height: CGFloat, depth: CGFloat) -> some Scene
Sets a default size for a volumetric window.
Beta
func defaultSize(Size3D, in: UnitLength) -> some Scene
Sets a default size for a volumetric window.
Beta
func defaultSize(width: CGFloat, height: CGFloat, depth: CGFloat, in: UnitLength) -> some Scene
Sets a default size for a volumetric window.
Beta
func windowResizability(WindowResizability) -> some Scene
Sets the kind of resizability to use for a window.
Styling the scene
func immersionStyle(selection: Binding<ImmersionStyle>, in: ImmersionStyle...) -> some Scene
Sets the allowed styles for the immersive space.
Beta
func upperLimbVisibility(Visibility) -> some Scene
Sets the preferred visibility of the user’s upper limbs, while an ImmersiveSpace scene is presented.
Beta
func windowStyle<S>(S) -> some Scene
Sets the style for windows created by this scene.
func windowToolbarStyle<S>(S) -> some Scene
Sets the style for the toolbar defined within this scene.
Configuring a data model
func modelContext(ModelContext) -> some Scene
Sets the model context in this scene’s environment.
Beta
func modelContainer(ModelContainer) -> some Scene
Sets the model container and associated model context in this scene’s environment.
Beta
func modelContainer(for: [PersistentModel.Type], inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some Scene
Sets the model container in this scene for storing the provided model types, creating a new container if necessary, and also sets a model context for that container in this scene’s environment.
Beta
func modelContainer(for: PersistentModel.Type, inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some Scene
Sets the model container in this scene for storing the provided model type, creating a new container if necessary, and also sets a model context for that container in this scene’s environment.
Beta
Deprecated symbols
func onChange<V>(of: V, perform: (V) -> Void) -> some Scene
Adds an action to perform when the given value changes.
Deprecated
Relationships
Conforming Types
DocumentGroup
Group
Conforms when Content conforms to Scene.
ImmersiveSpace
MenuBarExtra
ModifiedContent
Conforms when Content conforms to Scene and Modifier conforms to _SceneModifier.
Settings
WKNotificationScene
Window
WindowGroup
See Also
Creating scenes
struct SceneBuilder
A result builder for composing a collection of scenes into a single composite scene.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Scene
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

