https://developer.apple.com/documentation/swiftui/scene/backgroundtask(_:action:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Accessible controls
Accessible appearance
Accessibility fundamentals
Accessibility
M
func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View
Handling external events
M
func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View
Handling background tasks
M
func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View
M
func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View
M
func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View
Restoring Your App’s State with SwiftUI
Handling user activities
System events
Focus
Documentation
Open Menu
Swift
Instance Method
backgroundTask(_:action:)
Runs the specified action when the system provides a background task.
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
tvOS 16.0+
watchOS 9.0+
visionOS 1.0+ Beta
func backgroundTask<D, R>(
    _ task: BackgroundTask<D, R>,
    action: @escaping (D) async -> R
) -> some Scene where D : Sendable, R : Sendable
Parameters
task
The type of task with which to associate the provided action.
action
An async closure that the system runs for the specified task type.
Discussion
When the system wakes your app or extension for one or more background tasks, it will call any actions associated with matching tasks. When your async actions return, the system put your app back into a suspended state. The system considers the task completed when the action closure that you provide returns. If the action closure has not returned when the task runs out of time to complete, the system cancels the task. Use doc://com.apple.documentation/documentation/Swift/3851300-withtaskcancellationhandler to observe whether the task is low on runtime.
/// An example of a Weather Application.
struct WeatherApp: App {
    var body: some Scene {
        WindowGroup {
            Text("Responds to App Refresh")
        }
        .backgroundTask(.appRefresh("WEATHER_DATA")) {
            await updateWeatherData()
        }
    }
    func updateWeatherData() async {
        // fetches new weather data and updates app state
    }
}
See Also
Handling background tasks
struct BackgroundTask
The kinds of background tasks that your app or extension can handle.
struct SnapshotData
The associated data of a snapshot background task.
struct SnapshotResponse
Your appplication’s response to a snapshot background task.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is backgroundTask(_:action:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

