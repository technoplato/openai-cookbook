https://developer.apple.com/documentation/swiftui/view-auxiliary-viewsSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
P
var body: Self.Body
Body
M
func modifier<T>(T) -> ModifiedContent<Self, T>
Previews in Xcode
Configuring view elements
Accessibility modifiers
Appearance modifiers
Text and symbol modifiers
M
func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View
M
func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View
M
func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View
Navigation bars
M
func navigationBarBackButtonHidden(Bool) -> some View
M
func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View
Navigation stacks and columns
Documentation
Open Menu
Swift
Auxiliary view modifiers
Add and configure supporting views, like toolbars and context menus.
Overview
Use these modifiers to manage supplemental views that present context-specific controls and information. For example, you can add titles and buttons to navigation bars, manage the status bar, create context menus, and add badges many different kinds of views.
Topics
Navigation titles
Configure your apps navigation titles
Use a navigation title to display the current navigation state of an interface.
func navigationTitle(LocalizedStringKey) -> some View
Configures the view’s title for purposes of navigation, using a localized string.
func navigationTitle(Text) -> some View
Configures the view’s title for purposes of navigation.
func navigationTitle<S>(S) -> some View
Configures the view’s title for purposes of navigation, using a string.
func navigationTitle<V>(() -> V) -> some View
Configures the view’s title for purposes of navigation, using a custom view.
func navigationTitle(Binding<String>) -> some View
Configures the view’s title for purposes of navigation, using a string binding.
func navigationSubtitle<S>(S) -> some View
Configures the view’s subtitle for purposes of navigation, using a string.
func navigationSubtitle(Text) -> some View
Configures the view’s subtitle for purposes of navigation.
func navigationSubtitle(LocalizedStringKey) -> some View
Configures the view’s subtitle for purposes of navigation, using a localized string.
Navigation title configuration
func navigationDocument<D>(D) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument(URL) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View
Configures the view’s document for purposes of navigation.
Navigation bars
func navigationBarBackButtonHidden(Bool) -> some View
Hides the navigation bar back button for the view.
func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View
Configures the title display mode for this view.
Navigation stacks and columns
func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View
Associates a destination view with a presented data type for use within a navigation stack.
func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View
Associates a destination view with a binding that can be used to push the view onto a NavigationStack.
func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View
Associates a destination view with a bound value for use within a navigation stack or navigation split view
Beta
func navigationSplitViewColumnWidth(CGFloat) -> some View
Sets a fixed, preferred width for the column containing this view.
func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View
Sets a flexible, preferred width for the column containing this view.
Tab views
func tabItem<V>(() -> V) -> some View
Sets the tab bar item associated with this view.
Toolbars
For information about toolbars, see Toolbars.
func toolbar<Content>(content: () -> Content) -> some View
Populates the toolbar or navigation bar with the specified items.
func toolbar<Content>(content: () -> Content) -> some View
Populates the toolbar or navigation bar with the views you provide.
func toolbar<Content>(id: String, content: () -> Content) -> some View
Populates the toolbar or navigation bar with the specified items, allowing for user customization.
func toolbar(Visibility, for: ToolbarPlacement...) -> some View
Specifies the visibility of a bar managed by SwiftUI.
func toolbarBackground<S>(S, for: ToolbarPlacement...) -> some View
Specifies the preferred shape style of the background of a bar managed by SwiftUI.
func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View
Specifies the preferred visibility of backgrounds on a bar managed by SwiftUI.
func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View
Specifies the preferred color scheme of a bar managed by SwiftUI.
func toolbarRole(ToolbarRole) -> some View
Configures the semantic role for the content populating the toolbar.
func toolbarTitleMenu<C>(content: () -> C) -> some View
Configure the title menu of a toolbar.
func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View
Configures the toolbar title display mode for this view.
Beta
func ornament<Content>(visibility: Visibility, attachmentAnchor: OrnamentAttachmentAnchor, contentAlignment: Alignment, ornament: () -> Content) -> some View
Presents an ornament.
Beta
Context menus
For information about menus in your app, see Menus and commands.
func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View
Adds a context menu to a view.
func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View
Adds a context menu with a preview to a view.
func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View
Adds an item-based context menu to a view.
Badges
func badge(Text?) -> some View
Generates a badge for the view from a text view.
func badge<S>(S?) -> some View
Generates a badge for the view from a string.
func badge(LocalizedStringKey?) -> some View
Generates a badge for the view from a localized string key.
func badge(Int) -> some View
Generates a badge for the view from an integer value.
func badgeProminence(BadgeProminence) -> some View
Specifies the prominence of badges created by this view.
Beta
Help text
func help(LocalizedStringKey) -> some View
Adds help text to a view using a localized string that you provide.
func help<S>(S) -> some View
Adds help text to a view using a string that you provide.
func help(Text) -> some View
Adds help text to a view using a text view that you provide.
Status bar
func statusBarHidden(Bool) -> some View
Sets the visibility of the status bar.
Touch Bar
func touchBar<Content>(content: () -> Content) -> some View
Sets the content that the Touch Bar displays.
func touchBar<Content>(TouchBar<Content>) -> some View
Sets the Touch Bar content to be shown in the Touch Bar when applicable.
func touchBarItemPrincipal(Bool) -> some View
Sets principal views that have special significance to this Touch Bar.
func touchBarCustomizationLabel(Text) -> some View
Sets a user-visible string that identifies the view’s functionality.
func touchBarItemPresence(TouchBarItemPresence) -> some View
Sets the behavior of the user-customized view.
See Also
Configuring view elements
API Reference
Accessibility modifiers
Make your SwiftUI apps accessible to everyone, including people with disabilities.
API Reference
Appearance modifiers
Configure a view’s foreground and background styles, controls, and visibility.
API Reference
Text and symbol modifiers
Manage the rendering, selection, and entry of text in your view.
API Reference
Chart view modifiers
Configure charts that you declare with Swift Charts.
Current page is Auxiliary view modifiers
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

