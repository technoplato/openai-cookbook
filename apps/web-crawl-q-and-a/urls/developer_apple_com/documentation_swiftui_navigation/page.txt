https://developer.apple.com/documentation/swiftui/navigationSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func navigationTitle<S>(S) -> some View
M
func navigationTitle(Text) -> some View
M
func navigationTitle(LocalizedStringKey) -> some View
Setting titles for navigation content
S
NavigationSplitViewColumn
Beta
Managing column collapse
M
func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View
Documents
Immersive spaces
Windows
Scenes
App organization
App structure
SwiftUI updates
Exploring SwiftUI Sample Apps
Documentation
Open Menu
Swift
Navigation
Enable people to move between different parts of your app’s view hierarchy within a scene.
Overview
Use navigation containers to provide structure to your app’s user interface, enabling people to easily move among the parts of your app.
For example, people can move forward and backward through a stack of views using a NavigationStack, or choose which view to display from a tab bar using a TabView.
Configure navigation containers by adding view modifiers like navigationSplitViewStyle(_:) to the container. Use other modifiers on the views inside the container to affect the container’s behavior when showing that view. For example, you can use navigationTitle(_:) on a view to provide a toolbar title to display when showing that view.
Topics
Presenting views in columns
Bringing robust navigation structure to your SwiftUI app
Use navigation links, stacks, destinations, and paths to provide a streamlined experience for all platforms, as well as behaviors such as deep linking and state restoration.
Migrating to new navigation types
Improve navigation behavior in your app by replacing navigation views with navigation stacks and navigation split views.
struct NavigationSplitView
A view that presents views in two or three columns, where selections in leading columns control presentations in subsequent columns.
func navigationSplitViewStyle<S>(S) -> some View
Sets the style for navigation split views within this view.
func navigationSplitViewColumnWidth(CGFloat) -> some View
Sets a fixed, preferred width for the column containing this view.
func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View
Sets a flexible, preferred width for the column containing this view.
struct NavigationSplitViewVisibility
The visibility of the leading columns in a navigation split view.
struct NavigationLink
A view that controls a navigation presentation.
Stacking views in one column
struct NavigationStack
A view that displays a root view and enables you to present additional views over the root view.
struct NavigationPath
A type-erased list of data representing the content of a navigation stack.
func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View
Associates a destination view with a presented data type for use within a navigation stack.
func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View
Associates a destination view with a binding that can be used to push the view onto a NavigationStack.
func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View
Associates a destination view with a bound value for use within a navigation stack or navigation split view
Beta
Managing column collapse
struct NavigationSplitViewColumn
A view that represents a column in a navigation split view.
Beta
Setting titles for navigation content
func navigationTitle(LocalizedStringKey) -> some View
Configures the view’s title for purposes of navigation, using a localized string.
func navigationTitle(Text) -> some View
Configures the view’s title for purposes of navigation.
func navigationTitle<S>(S) -> some View
Configures the view’s title for purposes of navigation, using a string.
func navigationTitle<V>(() -> V) -> some View
Configures the view’s title for purposes of navigation, using a custom view.
func navigationTitle(Binding<String>) -> some View
Configures the view’s title for purposes of navigation, using a string binding.
func navigationSubtitle<S>(S) -> some View
Configures the view’s subtitle for purposes of navigation, using a string.
func navigationSubtitle(Text) -> some View
Configures the view’s subtitle for purposes of navigation.
func navigationSubtitle(LocalizedStringKey) -> some View
Configures the view’s subtitle for purposes of navigation, using a localized string.
func navigationDocument<D>(D) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument(URL) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View
Configures the view’s document for purposes of navigation.
func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View
Configures the view’s document for purposes of navigation.
Configuring the navigation bar
func navigationBarBackButtonHidden(Bool) -> some View
Hides the navigation bar back button for the view.
func navigationBarTitleDisplayMode(NavigationBarItem.TitleDisplayMode) -> some View
Configures the title display mode for this view.
struct NavigationBarItem
A configuration for a navigation bar that represents a view at the top of a navigation stack.
Configuring the sidebar
var sidebarRowSize: SidebarRowSize
The current size of sidebar rows.
enum SidebarRowSize
The standard sizes of sidebar rows.
Presenting views in tabs
struct TabView
A view that switches between multiple child views using interactive user interface elements.
func tabViewStyle<S>(S) -> some View
Sets the style for the tab view within the current environment.
func tabItem<V>(() -> V) -> some View
Sets the tab bar item associated with this view.
Displaying views in multiple panes
struct HSplitView
A layout container that arranges its children in a horizontal line and allows the user to resize them using dividers placed between them.
struct VSplitView
A layout container that arranges its children in a vertical line and allows the user to resize them using dividers placed between them.
Deprecated Types
struct NavigationView
A view for presenting a stack of views that represents a visible path in a navigation hierarchy.
Deprecated
See Also
App structure
API Reference
App organization
Define the entry point and top-level structure of your app.
API Reference
Scenes
Declare the user interface groupings that make up the parts of your app.
API Reference
Windows
Display user interface content in a window or a collection of windows.
API Reference
Immersive spaces
Display unbounded content in a person’s surroundings.
API Reference
Documents
Enable people to open and manage documents.
API Reference
Modal presentations
Present content in a separate view that offers focused interaction.
API Reference
Toolbars
Provide immediate access to frequently used commands and controls.
API Reference
Search
Enable people to search for text or other content within your app.
API Reference
App extensions
Extend your app’s basic functionality to other parts of the system, like by adding a Widget.
Current page is Navigation
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

