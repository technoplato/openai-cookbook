https://developer.apple.com/documentation/swiftui/appstorageSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
P
var wrappedValue: Value
Getting the value
M
init(String, store: UserDefaults?)
M
init(String, store: UserDefaults?)
M
init(String, store: UserDefaults?)
M
init<R>(String, store: UserDefaults?)
M
init<R>(String, store: UserDefaults?)
M
func defaultAppStorage(UserDefaults) -> some View
Restoring Your App’s State with SwiftUI
Saving state across app launches
Persistent storage
Preferences
Environment values
Model data
Data and storage
Documentation
Open Menu
Swift
Structure
AppStorage
A property wrapper type that reflects a value from UserDefaults and invalidates a view on a change in value in that user default.
iOS 14.0+
iPadOS 14.0+
macOS 11.0+
Mac Catalyst 14.0+
tvOS 14.0+
watchOS 7.0+
visionOS 1.0+ Beta
@frozen @propertyWrapper
struct AppStorage<Value>
Topics
Storing a value
init(wrappedValue: Value, String, store: UserDefaults?)
Creates a property that can read and write to a string user default.
init(wrappedValue: Value, String, store: UserDefaults?)
Creates a property that can read and write to an integer user default, transforming that to RawRepresentable data type.
init(wrappedValue: Value, String, store: UserDefaults?)
Creates a property that can read and write to a user default as data.
init(wrappedValue: Value, String, store: UserDefaults?)
Creates a property that can read and write to an integer user default.
init(wrappedValue: Value, String, store: UserDefaults?)
Creates a property that can read and write to a string user default, transforming that to RawRepresentable data type.
init(wrappedValue: Value, String, store: UserDefaults?)
Creates a property that can read and write to a url user default.
init(wrappedValue: Value, String, store: UserDefaults?)
Creates a property that can read and write to a double user default.
init(wrappedValue: Value, String, store: UserDefaults?)
Creates a property that can read and write to a boolean user default.
init<RowValue>(wrappedValue: Value, String, store: UserDefaults?)
Creates a property that can save and restore table column state.
Beta
Storing an optional value
init(String, store: UserDefaults?)
Creates a property that can read and write an Optional integer user default.
Available when Value conforms to ExpressibleByNilLiteral.
init(String, store: UserDefaults?)
Creates a property that can read and write an Optional string user default.
Available when Value conforms to ExpressibleByNilLiteral.
init(String, store: UserDefaults?)
Creates a property that can read and write an Optional double user default.
Available when Value conforms to ExpressibleByNilLiteral.
init<R>(String, store: UserDefaults?)
Creates a property that can save and restore an Optional integer, transforming it to an Optional RawRepresentable data type.
init<R>(String, store: UserDefaults?)
Creates a property that can save and restore an Optional string, transforming it to an Optional RawRepresentable data type.
init(String, store: UserDefaults?)
Creates a property that can read and write an Optional data user default.
Available when Value conforms to ExpressibleByNilLiteral.
init(String, store: UserDefaults?)
Creates a property that can read and write an Optional boolean user default.
Available when Value conforms to ExpressibleByNilLiteral.
init(String, store: UserDefaults?)
Creates a property that can read and write an Optional URL user default.
Available when Value conforms to ExpressibleByNilLiteral.
Getting the value
var wrappedValue: Value
var projectedValue: Binding<Value>
Relationships
Conforms To
DynamicProperty
Sendable
See Also
Saving state across app launches
func defaultAppStorage(UserDefaults) -> some View
The default store used by AppStorage contained within the view.
struct SceneStorage
A property wrapper type that reads and writes to persisted, per-scene storage.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is AppStorage
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

