https://developer.apple.com/documentation/swiftui/fetchrequestSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Saving state across app launches
Restoring Your App’s State with SwiftUI
M
func defaultAppStorage(UserDefaults) -> some View
S
AppStorage
S
SceneStorage
Accessing Core Data
Loading and Displaying a Large Data Feed
P
var managedObjectContext: NSManagedObjectContext
init(entity: NSEntityDescription, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)
DynamicProperty Implementations
S
FetchedResults
S
SectionedFetchRequest
S
SectionedFetchResults
Views
View fundamentals
View configuration
Documentation
Open Menu
Swift
Structure
FetchRequest
A property wrapper type that retrieves entities from a Core Data persistent store.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
@MainActor @propertyWrapper
struct FetchRequest<Result> where Result : NSFetchRequestResult
Overview
Use a FetchRequest property wrapper to declare a FetchedResults property that provides a collection of Core Data managed objects to a SwiftUI view. The request infers the entity type from the Result placeholder type that you specify. Condition the request with an optional predicate and sort descriptors. For example, you can create a request to list all Quake managed objects that the Loading and Displaying a Large Data Feed sample code project defines to store earthquake data, sorted by their time property:
@FetchRequest(sortDescriptors: [SortDescriptor(\.time, order: .reverse)])
private var quakes: FetchedResults<Quake> // Define Quake in your model.
Alternatively, when you need more flexibility, you can initialize the request with a configured NSFetchRequest instance:
@FetchRequest(fetchRequest: request)
private var quakes: FetchedResults<Quake>
Always declare properties that have a fetch request wrapper as private. This lets the compiler help you avoid accidentally setting the property from the memberwise initializer of the enclosing view.
The fetch request and its results use the managed object context stored in the environment, which you can access using the managedObjectContext environment value. To support user interface activity, you typically rely on the viewContext property of a shared NSPersistentContainer instance. For example, you can set a context on your top level content view using a shared container that you define as part of your model:
ContentView()
    .environment(
        \.managedObjectContext,
        QuakesProvider.shared.container.viewContext)
When you need to dynamically change the predicate or sort descriptors, access the request’s FetchRequest.Configuration structure. To create a request that groups the fetched results according to a characteristic that they share, use SectionedFetchRequest instead.
Topics
Creating a fetch request
init(sortDescriptors: [SortDescriptor<Result>], predicate: NSPredicate?, animation: Animation?)
Creates a fetch request based on a predicate and value type sort parameters.
Available when Result inherits NSManagedObject.
init(sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)
Creates a fetch request based on a predicate and reference type sort parameters.
Available when Result inherits NSManagedObject.
init(entity: NSEntityDescription, sortDescriptors: [NSSortDescriptor], predicate: NSPredicate?, animation: Animation?)
Creates a fetch request for a specified entity description, based on a predicate and sort parameters.
Available when Result conforms to NSFetchRequestResult.
Creating a fully configured fetch request
init(fetchRequest: NSFetchRequest<Result>, animation: Animation?)
Creates a fully configured fetch request that uses the specified animation when updating results.
Available when Result conforms to NSFetchRequestResult.
init(fetchRequest: NSFetchRequest<Result>, transaction: Transaction)
Creates a fully configured fetch request that uses the specified transaction when updating results.
Available when Result conforms to NSFetchRequestResult.
Configuring a request dynamically
struct Configuration
The request’s configurable properties.
var projectedValue: Binding<FetchRequest<Result>.Configuration>
A binding to the request’s mutable configuration properties.
Getting the fetched results
func update()
Updates the fetched results.
Available when Result conforms to NSFetchRequestResult.
var wrappedValue: FetchedResults<Result>
The fetched results of the fetch request.
Default Implementations
API Reference
DynamicProperty Implementations
Relationships
Conforms To
DynamicProperty
Conforms when Result conforms to NSFetchRequestResult.
Sendable
See Also
Accessing Core Data
var managedObjectContext: NSManagedObjectContext
struct FetchedResults
A collection of results retrieved from a Core Data store.
struct SectionedFetchRequest
A property wrapper type that retrieves entities, grouped into sections, from a Core Data persistent store.
struct SectionedFetchResults
A collection of results retrieved from a Core Data persistent store, grouped into sections.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is FetchRequest
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

