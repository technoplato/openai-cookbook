https://developer.apple.com/documentation/swiftui/environmentkeySkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
View layout
Drawing and graphics
Shapes
Menus and commands
Controls and indicators
Images
Text input and output
func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View
Creating custom environment values
S
EnvironmentValues
S
Environment
Accessing environment values
Environment values
Model data
Data and storage
App extensions
Documentation
Open Menu
Swift
Protocol
EnvironmentKey
A key for accessing values in the environment.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
protocol EnvironmentKey
Overview
You can create custom environment values by extending the EnvironmentValues structure with new properties. First declare a new environment key type and specify a value for the required defaultValue property:
private struct MyEnvironmentKey: EnvironmentKey {
    static let defaultValue: String = "Default value"
}
The Swift compiler automatically infers the associated Value type as the type you specify for the default value. Then use the key to define a new environment value property:
extension EnvironmentValues {
    var myCustomValue: String {
        get { self[MyEnvironmentKey.self] }
        set { self[MyEnvironmentKey.self] = newValue }
    }
}
Clients of your environment value never use the key directly. Instead, they use the key path of your custom environment value property. To set the environment value for a view and all its subviews, add the environment(_:_:) view modifier to that view:
MyView()
    .environment(\.myCustomValue, "Another string")
As a convenience, you can also define a dedicated view modifier to apply this environment value:
extension View {
    func myCustomValue(_ myCustomValue: String) -> some View {
        environment(\.myCustomValue, myCustomValue)
    }
}
This improves clarity at the call site:
MyView()
    .myCustomValue("Another string")
To read the value from inside MyView or one of its descendants, use the Environment property wrapper:
struct MyView: View {
    @Environment(\.myCustomValue) var customValue: String


    var body: some View {
        Text(customValue) // Displays "Another string".
    }
}
Topics
Getting the default value
static var defaultValue: Self.Value
The default value for the environment key.
Required
associatedtype Value
The associated type representing the type of the environment key’s value.
Required
Relationships
Inherited By
UITraitBridgedEnvironmentKey
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is EnvironmentKey
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

