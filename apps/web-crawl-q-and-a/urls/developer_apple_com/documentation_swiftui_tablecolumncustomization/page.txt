https://developer.apple.com/documentation/swiftui/tablecolumncustomizationSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Event handling
Scroll views
View groupings
S
TableOutlineGroupContent
Beta
S
DisclosureTableRow
Beta
Adding progressive disclosure
S
TableRowBuilder
M
func tableColumnHeaders(Visibility) -> some View
Beta
Customizing columns
S
TableColumnBuilder
S
TableColumnAlignment
Beta
r
P
TableColumnContent
S
TableColumn
Creating columns
M
func tableStyle<S>(S) -> some View
Documentation
Open Menu
Swift
Structure
TableColumnCustomization
A representation of the state of the columns in a table.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
visionOS 1.0+ Beta
struct TableColumnCustomization<RowValue> where RowValue : Identifiable
Overview
TableColumnCustomization can be created and provided to a table to enable column reordering and column visibility. The state can be queried and updated programmatically, as well as bound to persistent app or scene storage.
struct BugReportTable: View {
    @ObservedObject var dataModel: DataModel
    @Binding var selectedBugReports: Set<BugReport.ID>


    @SceneStorage("BugReportTableConfig")
    private var columnCustomization: TableColumnCustomization<BugReport>


    var body: some View {
        Table(dataModel.bugReports, selection: $selectedBugReports,
            sortOrder: $dataModel.sortOrder,
            columnCustomization: $columnCustomization
        ) {
            TableColumn("Title", value: \.title)
                .customizationID("title")
            TableColumn("ID", value: \.id) {
                Link("\($0.id)", destination: $0.url)
            }
            .customizationID("id")
            TableColumn("Number of Reports", value: \.duplicateCount) {
                Text($0.duplicateCount, format: .number)
            }
            .customizationID("duplicates")
        }
    }
}
The above example creates a table with three columns. On macOS, these columns can be reordered or hidden and shown by the user of the app. Their configuration will be saved and restored with the window on relaunches of the app, using the “BugReportTableConfig” scene storage identifier.
The state of a specific column is stored relative to its customization identifier, using using the value from the customizationID(_:) modifier. When column customization is encoded and decoded, it relies on stable identifiers to restore the associate the saved state with a specific column. If a table column does not have a customization identifier, it will not be customizable.
These identifiers can also be used to programmatically change column customizations, such as programmatically hiding a column:
columnCustomization[visibility: "duplicates"] = .hidden
With a binding to the overall customization, a binding to the visibility of a column can be accessed using the same subscript syntax:
struct BugReportTable: View {
    @SceneStorage("BugReportTableConfig")
    private var columnCustomization: TableColumnCustomization<BugReport>


    var body: some View {
        ...
        MyVisibilityView($columnCustomization[visibility: "duplicates"])
    }
}


struct MyVisibilityView: View {
    @Binding var visibility: Visibility
    ...
}
Topics
Creating a table column customization
init()
Creates an empty table column customization.
Managing the customization
func resetOrder()
Resets the column order back to the default, preserving the customized visibility and size.
subscript(visibility _: String) -> Visibility
The visibility of the column identified by its identifier.
Relationships
Conforms To
Decodable
Encodable
Equatable
Sendable
See Also
Customizing columns
func tableColumnHeaders(Visibility) -> some View
Controls the visibility of a Table’s column header views.
Beta
struct TableColumnCustomizationBehavior
A set of customization behaviors of a column that a table can offer to a user.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is TableColumnCustomization
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

