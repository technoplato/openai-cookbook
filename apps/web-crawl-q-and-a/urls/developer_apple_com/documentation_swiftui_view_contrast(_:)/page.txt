https://developer.apple.com/documentation/swiftui/view/contrast(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View
M
func rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some View
Beta
M
func rotationEffect(Angle, anchor: UnitPoint) -> some View
M
func aspectRatio(CGSize, contentMode: ContentMode) -> some View
M
func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View
M
func scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some View
Beta
M
func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View
M
func brightness(Double) -> some View
Transforming colors
S
ShadowStyle
S
AnyGradient
S
Gradient
S
AnyShapeStyle
r
P
ShapeStyle
P
var backgroundStyle: AnyShapeStyle?
Documentation
Open Menu
Swift
Instance Method
contrast(_:)
Sets the contrast and separation between similar colors in this view.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func contrast(_ amount: Double) -> some View
Parameters
amount
The intensity of color contrast to apply. negative values invert colors in addition to applying contrast.
Return Value
A view that applies color contrast to this view.
Discussion
Apply contrast to a view to increase or decrease the separation between similar colors in the view.
In the example below, the contrast(_:) modifier is applied to a set of red squares each containing a contrasting green inner circle. At each step in the loop, the contrast(_:) modifier changes the contrast of the circle/square view in 20% increments. This ranges from -20% contrast (yielding inverted colors — turning the red square to pale-green and the green circle to mauve), to neutral-gray at 0%, to 100% contrast (bright-red square / bright-green circle). Applying negative contrast values, as shown in the -20% square, will apply contrast in addition to inverting colors.
struct CircleView: View {
    var body: some View {
        Circle()
            .fill(Color.green)
            .frame(width: 25, height: 25, alignment: .center)
    }
}


struct Contrast: View {
    var body: some View {
        HStack {
            ForEach(-1..<6) {
                Color.red.frame(width: 50, height: 50, alignment: .center)
                    .overlay(CircleView(), alignment: .center)
                    .contrast(Double($0) * 0.2)
                    .overlay(Text("\(Double($0) * 0.2 * 100, specifier: "%.0f")%")
                                 .font(.callout),
                             alignment: .bottom)
                    .border(Color.gray)
            }
        }
    }
}
See Also
Transforming colors
func brightness(Double) -> some View
Brightens this view by the specified amount.
func colorInvert() -> some View
Inverts the colors in this view.
func colorMultiply(Color) -> some View
Adds a color multiplication effect to this view.
func saturation(Double) -> some View
Adjusts the color saturation of this view.
func grayscale(Double) -> some View
Adds a grayscale effect to this view.
func hueRotation(Angle) -> some View
Applies a hue rotation effect to this view.
func luminanceToAlpha() -> some View
Adds a luminance to alpha effect to this view.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is contrast(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

