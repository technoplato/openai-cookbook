https://developer.apple.com/documentation/swiftui/font/monospaced()Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
static func custom(String, fixedSize: CGFloat) -> Font
M
static func custom(String, size: CGFloat, relativeTo: Font.TextStyle) -> Font
M
static func custom(String, size: CGFloat) -> Font
Getting a font from another font
M
init(CTFont)
Styling a font
M
func bold() -> Font
M
func italic() -> Font
M
func dynamicTypeSize<T>(T) -> some View
M
func dynamicTypeSize(DynamicTypeSize) -> some View
P
var dynamicTypeSize: DynamicTypeSize
E
DynamicTypeSize
S
ScaledMetric
Controlling text style
M
func bold(Bool) -> some View
Documentation
Open Menu
Swift
Instance Method
monospaced()
Returns a fixed-width font from the same family as the base font.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
func monospaced() -> Font
Return Value
A fixed-width font from the same family as the base font, if one is available, and a default fixed-width font otherwise.
Discussion
If there’s no suitable font face in the same family, SwiftUI returns a default fixed-width font.
The following example adds the monospaced() modifier to the default system font, then applies this font to a Text view:
struct ContentView: View {
    let myFont = Font
        .system(size: 24)
        .monospaced()


    var body: some View {
        Text("Hello, world!")
            .font(myFont)
            .padding()
            .navigationTitle("Monospaced")
    }
}
SwiftUI may provide different fixed-width replacements for standard user interface fonts (such as title, or a system font created with system(_:design:)) than for those same fonts when created by name with custom(_:size:).
The font(_:) modifier applies the font to all text within the view. To mix fixed-width text with other styles in the same Text view, use the init(_:) initializer to use an appropropriately-styled AttributedString for the text view’s content. You can use the init(markdown:options:baseURL:) initializer to provide a Markdown-formatted string containing the backtick-syntax (`…`) to apply code voice to specific ranges of the attributed string.
See Also
Styling a font
func bold() -> Font
Adds bold styling to the font.
func italic() -> Font
Adds italics to the font.
func monospacedDigit() -> Font
Returns a modified font that uses fixed-width digits, while leaving other characters proportionally spaced.
func smallCaps() -> Font
Adjusts the font to enable all small capitals.
func lowercaseSmallCaps() -> Font
Adjusts the font to enable lowercase small capitals.
func uppercaseSmallCaps() -> Font
Adjusts the font to enable uppercase small capitals.
func weight(Font.Weight) -> Font
Sets the weight of the font.
func width(Font.Width) -> Font
Sets the width of the font.
struct Width
A width to use for fonts that have multiple widths.
func leading(Font.Leading) -> Font
Adjusts the line spacing of a font.
enum Leading
A line spacing adjustment that you can apply to a font.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is monospaced()
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

