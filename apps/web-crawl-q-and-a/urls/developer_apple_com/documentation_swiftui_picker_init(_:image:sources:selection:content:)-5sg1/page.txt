https://developer.apple.com/documentation/swiftui/picker/init(_:image:sources:selection:content:)-5sg1Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Choosing a color
P
var timeZone: TimeZone
P
var calendar: Calendar
S
MultiDatePicker
M
func datePickerStyle<S>(S) -> some View
S
DatePicker
Choosing dates
init<C, S>(S, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
init<C>(LocalizedStringKey, systemImage: String, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
init<C>(LocalizedStringKey, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
init<C, S>(S, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
M
init(LocalizedStringKey, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)
Beta
M
init<S>(S, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)
Beta
Creating a picker with an image resource label
M
init<C>(sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content, label: () -> Label)
M
init<C, S>(S, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
M
init<C>(LocalizedStringKey, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
Creating a picker for a collection
M
init<S>(S, selection: Binding<SelectionValue>, content: () -> Content)
Documentation
Open Menu
Swift
Initializer
init(_:image:sources:selection:content:)
Creates a picker bound to a collection of bindings that generates its label from a string and image resource.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
init<C, S>(
    _ title: S,
    image: ImageResource,
    sources: C,
    selection: KeyPath<C.Element, Binding<SelectionValue>>,
    @ViewBuilder content: () -> Content
) where C : RandomAccessCollection, S : StringProtocol, C.Element == Binding<SelectionValue>
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
Parameters
title
A string that describes the purpose of selecting an option.
image
The name of the image resource to lookup.
sources
A collection of values used as the source for displaying the Picker’s selection.
selection
The key path of the values that determines the currently-selected options. When a user selects an option from the picker, the values at the key path of all items in the sources collection are updated with the selected option.
content
A view that contains the set of options.
Discussion
If the wrapped values of the collection passed to sources are not all the same, some styles render the selection in a mixed state. The specific presentation depends on the style. For example, a Picker with a menu style uses dashes instead of checkmarks to indicate the selected values.
In the following example, a picker in a document inspector controls the thickness of borders for the currently-selected shapes, which can be of any number.
enum Thickness: String, CaseIterable, Identifiable {
    case thin
    case regular
    case thick


    var id: String { rawValue }
}


struct Border {
    var color: Color
    var thickness: Thickness
}


@State private var selectedObjectBorders = [
    Border(color: .black, thickness: .thin),
    Border(color: .red, thickness: .thick)
]


Picker(
    "Border Thickness",
    sources: $selectedObjectBorders,
    selection: \.thickness
) {
    ForEach(Thickness.allCases) { thickness in
        Text(thickness.rawValue)
    }
}
See Also
Creating a picker with an image resource label
init<S>(S, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)
Creates a picker that generates its label from a string and image resource.
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
Beta
init(LocalizedStringKey, image: ImageResource, selection: Binding<SelectionValue>, content: () -> Content)
Creates a picker that generates its label from a localized string key and image resource
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
Beta
init<C>(LocalizedStringKey, image: ImageResource, sources: C, selection: KeyPath<C.Element, Binding<SelectionValue>>, content: () -> Content)
Creates a picker that generates its label from a localized string key and image resource.
Available when Label is Label<Text, Image>, SelectionValue conforms to Hashable, and Content conforms to View.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(_:image:sources:selection:content:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

