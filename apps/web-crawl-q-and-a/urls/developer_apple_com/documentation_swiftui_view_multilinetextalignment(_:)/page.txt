https://developer.apple.com/documentation/swiftui/view/multilinetextalignment(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Preparing views for localization
Localizing text
M
func typeSelectEquivalent<S>(S) -> some View
M
func typeSelectEquivalent(LocalizedStringKey) -> some View
M
func typeSelectEquivalent(Text?) -> some View
Specifying text equivalents
S
TextInputDictationBehavior
P
var lineSpacing: CGFloat
M
func lineSpacing(CGFloat) -> some View
Formatting multiline text
P
var lineLimit: Int?
M
func lineLimit(Int, reservesSpace: Bool) -> some View
M
func lineLimit(ClosedRange<Int>) -> some View
M
func lineLimit(PartialRangeThrough<Int>) -> some View
M
func lineLimit(PartialRangeFrom<Int>) -> some View
Documentation
Open Menu
Swift
Instance Method
multilineTextAlignment(_:)
Sets the alignment of a text view that contains multiple lines of text.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func multilineTextAlignment(_ alignment: TextAlignment) -> some View
Parameters
alignment
A value that you use to align multiple lines of text within a view.
Return Value
A view that aligns the lines of multiline Text instances it contains.
Discussion
Use this modifier to set an alignment for a multiline block of text. For example, the modifier centers the contents of the following Text view:
Text("This is a block of text that shows up in a text element as multiple lines.\("\n") Here we have chosen to center this text.")
    .frame(width: 200)
    .multilineTextAlignment(.center)
The text in the above example spans more than one line because:
The newline character introduces a line break.
The frame modifier limits the space available to the text view, and by default a text view wraps lines that don’t fit in the available width. As a result, the text before the explicit line break wraps to three lines, and the text after uses two lines.
The modifier applies the alignment to the all the lines of text in the view, regardless of why wrapping occurs:
The modifier has no effect on a Text view that contains only one line of text, because a text view has a width that exactly matches the width of its widest line. If you want to align an entire text view rather than its contents, set the aligment of its container, like a VStack or a frame that you create with the frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:) modifier.
Note
You can use this modifier to control the alignment of a Text view that you create with the init(_:style:) initializer to display localized dates and times, including when the view uses only a single line, but only when that view appears in a widget.
The modifier also affects the content alignment of other text container types, like TextEditor and TextField. In those cases, the modifier sets the alignment even when the view contains only a single line because view’s width isn’t dictated by the width of the text it contains.
The modifier operates by setting the multilineTextAlignment value in the environment, so it affects all the text containers in the modified view hierarchy. For example, you can apply the modifier to a VStack to configure all the text views inside the stack.
See Also
Formatting multiline text
func lineSpacing(CGFloat) -> some View
Sets the amount of space between lines of text in this view.
var lineSpacing: CGFloat
The distance in points between the bottom of one line fragment and the top of the next.
var multilineTextAlignment: TextAlignment
An environment value that indicates how a text view aligns its lines when the content wraps or contains newlines.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is multilineTextAlignment(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

