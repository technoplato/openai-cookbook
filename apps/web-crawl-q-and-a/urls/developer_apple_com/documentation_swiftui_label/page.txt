https://developer.apple.com/documentation/swiftui/labelSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func textFieldStyle<S>(S) -> some View
S
TextField
Getting text input
M
func labelStyle<S>(S) -> some View
M
init(ActivityCategoryToken)
M
init(WebDomainToken)
M
init(ApplicationToken)
S
Text
Displaying text
Text input and output
Animations
View styles
View configuration
View fundamentals
Views
Documentation
Open Menu
Swift
Structure
Label
A standard label for user interface items, consisting of an icon with a title.
iOS 14.0+
iPadOS 14.0+
macOS 11.0+
Mac Catalyst 14.0+
tvOS 14.0+
watchOS 7.0+
visionOS 1.0+ Beta
struct Label<Title, Icon> where Title : View, Icon : View
Overview
One of the most common and recognizable user interface components is the combination of an icon and a label. This idiom appears across many kinds of apps and shows up in collections, lists, menus of action items, and disclosable lists, just to name a few.
You create a label, in its simplest form, by providing a title and the name of an image, such as an icon from the SF Symbols collection:
Label("Lightning", systemImage: "bolt.fill")
You can also apply styles to labels in several ways. In the case of dynamic changes to the view after device rotation or change to a window size you might want to show only the text portion of the label using the titleOnly label style:
Label("Lightning", systemImage: "bolt.fill")
    .labelStyle(.titleOnly)
Conversely, there’s also an icon-only label style:
Label("Lightning", systemImage: "bolt.fill")
    .labelStyle(.iconOnly)
Some containers might apply a different default label style, such as only showing icons within toolbars on macOS and iOS. To opt in to showing both the title and the icon, you can apply the titleAndIcon label style:
Label("Lightning", systemImage: "bolt.fill")
    .labelStyle(.titleAndIcon)
You can also create a customized label style by modifying an existing style; this example adds a red border to the default label style:
struct RedBorderedLabelStyle: LabelStyle {
    func makeBody(configuration: Configuration) -> some View {
        Label(configuration)
            .border(Color.red)
    }
}
For more extensive customization or to create a completely new label style, you’ll need to adopt the LabelStyle protocol and implement a LabelStyleConfiguration for the new style.
To apply a common label style to a group of labels, apply the style to the view hierarchy that contains the labels:
VStack {
    Label("Rain", systemImage: "cloud.rain")
    Label("Snow", systemImage: "snow")
    Label("Sun", systemImage: "sun.max")
}
.labelStyle(.iconOnly)
It’s also possible to make labels using views to compose the label’s icon programmatically, rather than using a pre-made image. In this example, the icon portion of the label uses a filled Circle overlaid with the user’s initials:
Label {
    Text(person.fullName)
        .font(.body)
        .foregroundColor(.primary)
    Text(person.title)
        .font(.subheadline)
        .foregroundColor(.secondary)
} icon: {
    Circle()
        .fill(person.profileColor)
        .frame(width: 44, height: 44, alignment: .center)
        .overlay(Text(person.initials))
}
Topics
Creating a label from text and an image
init(LocalizedStringKey, image: String)
Creates a label with an icon image and a title generated from a localized string.
Available when Title is Text and Icon is Image.
init<S>(S, image: String)
Creates a label with an icon image and a title generated from a string.
Available when Title is Text and Icon is Image.
Creating a label from text and an SF Symbol
init(LocalizedStringKey, systemImage: String)
Creates a label with a system icon image and a title generated from a localized string.
Available when Title is Text and Icon is Image.
init<S>(S, systemImage: String)
Creates a label with a system icon image and a title generated from a string.
Available when Title is Text and Icon is Image.
Creating a label from a title and icon
init(title: () -> Title, icon: () -> Icon)
Creates a label with a custom title and icon.
Creating a label from a configuration
init(LabelStyleConfiguration)
Creates a label representing the configuration of a style.
Available when Title is LabelStyleConfiguration.Title and Icon is LabelStyleConfiguration.Icon.
Creating a label from an image resource
init(LocalizedStringKey, image: ImageResource)
Creates a label with an icon image and a title generated from a localized string.
Available when Title is Text and Icon is Image.
Beta
init<S>(S, image: ImageResource)
Creates a label with an icon image and a title generated from a string.
Available when Title is Text and Icon is Image.
Beta
Creating a family activity label
init(ApplicationToken)
Creates a label representing a family activity application.
Available when Title is FamilyActivityTitleView and Icon is FamilyActivityIconView.
init(WebDomainToken)
Creates a label representing a family activity web domain.
Available when Title is FamilyActivityTitleView and Icon is FamilyActivityIconView.
init(ActivityCategoryToken)
Creates a label representing a family activity category.
Available when Title is FamilyActivityTitleView and Icon is FamilyActivityIconView.
Relationships
Conforms To
Sendable
View
See Also
Displaying text
struct Text
A view that displays one or more lines of read-only text.
func labelStyle<S>(S) -> some View
Sets the style for labels within this view.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Label
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

