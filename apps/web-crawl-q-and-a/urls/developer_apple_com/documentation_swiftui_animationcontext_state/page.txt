https://developer.apple.com/documentation/swiftui/animationcontext/stateSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
CubicKeyframe
Beta
S
LinearKeyframe
Beta
S
MoveKeyframe
Beta
S
SpringKeyframe
Beta
Creating custom animations
r
P
CustomAnimation
Beta
S
AnimationContext
Beta
Managing state
S
EmptyAnimatableData
Updating a view on a schedule
Updating watchOS apps with timelines
S
TimelineView
r
P
TimelineSchedule
T
TimelineViewDefaultContext
Synchronizing geometries
Documentation
Open Menu
Swift
Instance Property
state
The current state of a custom animation.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
var state: AnimationState<Value>
Discussion
An instance of CustomAnimation uses this property to read and write state values as the animation runs.
An alternative to using the state property in a custom animation is to create an AnimationStateKey type and extend AnimationContext with a custom property that returns the state as a custom type. For example, the following code creates a state key named PausableState. It’s convenient to store state values in the key type, so the PausableState structure includes properties for the stored state values paused and pauseTime.
private struct PausableState<Value: VectorArithmetic>: AnimationStateKey {
    var paused = false
    var pauseTime: TimeInterval = 0.0


    static var defaultValue: Self { .init() }
}
To provide access the pausable state, the following code extends AnimationContext to include the pausableState property. This property returns an instance of the custom PausableState structure stored in state, and it can also store a new PausableState instance in state.
extension AnimationContext {
    fileprivate var pausableState: PausableState<Value> {
        get { state[PausableState<Value>.self] }
        set { state[PausableState<Value>.self] = newValue }
    }
}
Now a custom animation can use the pausableState property instead of the state property as a convenient way to read and write state values as the animation runs.
struct PausableAnimation: CustomAnimation {
    func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V? where V : VectorArithmetic {
        let pausableState = context.pausableState
        var pauseTime = pausableState.pauseTime
        ...
    }
}
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is state
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

