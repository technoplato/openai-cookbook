https://developer.apple.com/documentation/swiftui/view/focusedsceneobject(_:)-8td7ySkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Accessible navigation
Accessible descriptions
Accessible controls
Accessible appearance
Accessibility fundamentals
Accessibility
System events
M
func focusedSceneObject<T>(T?) -> some View
M
func focusedObject<T>(T) -> some View
M
func focusedObject<T>(T?) -> some View
Exposing reference types to focused views
S
FocusedValues
M
func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View
M
func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View
M
func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View
Documentation
Open Menu
Swift
Instance Method
focusedSceneObject(_:)
Creates a new view that exposes the provided object to other views whose whose state depends on the active scene.
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
tvOS 16.0+
watchOS 9.0+
visionOS 1.0+ Beta
func focusedSceneObject<T>(_ object: T) -> some View where T : ObservableObject
Parameters
object
The observable object to associate with the scene.
Return Value
A view that supplies an observable object while the scene is active.
Discussion
Use this method instead of View/focusedObject(_:) for observable objects that must be visible regardless of where focus is located in the active scene. This is sometimes needed for things like main menu and discoverability HUD commands that observe and update data from the active scene but aren’t concerned with what the user is actually focused on. The scene’s root view can supply the scene’s state object:
struct RootView: View {
    @StateObject private var sceneData = SceneData()


    var body: some View {
        NavigationSplitView {
            ...
        }
        .focusedSceneObject(sceneData)
    }
}
Interested views can then use the FocusedObject property wrapper to observe and update the active scene’s state object. In this example, an app command updates the active scene’s data, and is enabled as long as any scene is active.
struct MessageCommands: Commands {
    @FocusedObject private var sceneData: SceneData?


    var body: some Commands {
        CommandGroup(after: .newItem) {
            Button("New Message") {
                sceneData?.addMessage()
            }
            .keyboardShortcut("n", modifiers: [.option, .command])
            .disabled(sceneData == nil)
        }
    }
}
See Also
Exposing reference types to focused views
func focusedObject<T>(T?) -> some View
Creates a new view that exposes the provided object to other views whose state depends on the focused view hierarchy.
func focusedObject<T>(T) -> some View
Creates a new view that exposes the provided object to other views whose whose state depends on the focused view hierarchy.
func focusedSceneObject<T>(T?) -> some View
Creates a new view that exposes the provided object to other views whose whose state depends on the active scene.
struct FocusedObject
A property wrapper type for an observable object supplied by the focused view or one of its ancestors.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is focusedSceneObject(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

