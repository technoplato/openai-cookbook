https://developer.apple.com/documentation/swiftui/uiviewcontrollerrepresentableSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
WatchKit integration
C
UIOrnament
Beta
C
UIHostingOrnament
Beta
Hosting an ornament in UIKit
r
P
UITraitBridgedEnvironmentKey
Beta
Sharing configuration information
S
UIViewControllerRepresentableContext
func sizeThatFits(ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CGSize?
S
UIViewRepresentableContext
r
P
UIViewRepresentable
Adding UIKit views to SwiftUI view hierarchies
S
UIHostingConfiguration
S
UIHostingControllerSizingOptions
C
UIHostingController
Using SwiftUI with UIKit
Displaying SwiftUI views in UIKit
Documentation
Open Menu
Swift
Protocol
UIViewControllerRepresentable
A view that represents a UIKit view controller.
iOS 13.0+
iPadOS 13.0+
Mac Catalyst 13.0+
tvOS 13.0+
visionOS 1.0+ Beta
protocol UIViewControllerRepresentable : View where Self.Body == Never
Overview
Use a UIViewControllerRepresentable instance to create and manage a UIViewController object in your SwiftUI interface. Adopt this protocol in one of your app’s custom instances, and use its methods to create, update, and tear down your view controller. The creation and update processes parallel the behavior of SwiftUI views, and you use them to configure your view controller with your app’s current state information. Use the teardown process to remove your view controller cleanly from your SwiftUI. For example, you might use the teardown process to notify other objects that the view controller is disappearing.
To add your view controller into your SwiftUI interface, create your UIViewControllerRepresentable instance and add it to your SwiftUI interface. The system calls the methods of your custom instance at appropriate times.
The system doesn’t automatically communicate changes occurring within your view controller to other parts of your SwiftUI interface. When you want your view controller to coordinate with other SwiftUI views, you must provide a Coordinator instance to facilitate those interactions. For example, you use a coordinator to forward target-action and delegate messages from your view controller to any SwiftUI views.
Topics
Creating and updating the view controller
func makeUIViewController(context: Self.Context) -> Self.UIViewControllerType
Creates the view controller object and configures its initial state.
Required
func updateUIViewController(Self.UIViewControllerType, context: Self.Context)
Updates the state of the specified view controller with new information from SwiftUI.
Required
typealias Context
associatedtype UIViewControllerType : UIViewController
The type of view controller to present.
Required
Specifying a size
func sizeThatFits(ProposedViewSize, uiViewController: Self.UIViewControllerType, context: Self.Context) -> CGSize?
Given a proposed size, returns the preferred size of the composite view.
Required Default implementation provided.
Cleaning up the view controller
static func dismantleUIViewController(Self.UIViewControllerType, coordinator: Self.Coordinator)
Cleans up the presented view controller (and coordinator) in anticipation of their removal.
Required Default implementation provided.
Providing a custom coordinator object
func makeCoordinator() -> Self.Coordinator
Creates the custom instance that you use to communicate changes from your view controller to other parts of your SwiftUI interface.
Required Default implementation provided.
associatedtype Coordinator = Void
A type to coordinate with the view controller.
Required
Performing layout
typealias LayoutOptions
Beta
Relationships
Inherits From
View
See Also
Adding UIKit views to SwiftUI view hierarchies
protocol UIViewRepresentable
A wrapper for a UIKit view that you use to integrate that view into your SwiftUI view hierarchy.
struct UIViewRepresentableContext
Contextual information about the state of the system that you use to create and update your UIKit view.
struct UIViewControllerRepresentableContext
Contextual information about the state of the system that you use to create and update your UIKit view controller.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is UIViewControllerRepresentable
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

