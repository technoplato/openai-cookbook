https://developer.apple.com/documentation/swiftui/view/defaultscrollanchor(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Managing content visibility
S
ScrollIndicatorVisibility
P
var verticalScrollIndicatorVisibility: ScrollIndicatorVisibility
P
var horizontalScrollIndicatorVisibility: ScrollIndicatorVisibility
M
func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View
M
func scrollIndicatorsFlash(trigger: some Equatable) -> some View
Beta
M
func scrollIndicatorsFlash(onAppear: Bool) -> some View
func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View
func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View
M
func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View
Beta
Managing scroll position
S
ScrollViewProxy
S
ScrollViewReader
S
ScrollView
Creating a scroll view
Scroll views
View groupings
Documentation
Open Menu
Swift
Instance Method
defaultScrollAnchor(_:)
Associates an anchor to control which part of the scroll view’s content should be rendered by default.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
func defaultScrollAnchor(_ anchor: UnitPoint?) -> some View
Discussion
Use this modifier to specify an anchor to control both which part of the scroll view’s content should be visible initially and how the scroll view handles content size changes.
Provide a value of `UnitPoint/center`` to have the scroll view start in the center of its content when a scroll view is scrollable in both axes.
ScrollView([.horizontal, .vertical]) {
    // initially centered content
}
.defaultScrollAnchor(.center)
Provide a value of UnitPoint/bottom to have the scroll view start at the bottom of its content when scrollable in the vertical axis.
@Binding var items: [Item]
@Binding var scrolledID: Item.ID?


ScrollView {
    LazyVStack {
        ForEach(items) { item in
            ItemView(item)
        }
    }
}
.defaultScrollAnchor(.bottom)
The user may scroll away from the initial defined scroll position. When the content size of the scroll view changes, it may consult the anchor to know how to reposition the content.
See Also
Managing scroll position
func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View
Associates a binding to be updated when a scroll view within this view scrolls.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is defaultScrollAnchor(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

