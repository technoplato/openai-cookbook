https://developer.apple.com/documentation/swiftui/view/widgetlabel(label:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
View layout
Drawing and graphics
Shapes
Menus and commands
Controls and indicators
Images
Text input and output
M
func widgetLabel(LocalizedStringKey) -> some View
M
func widgetLabel<S>(S) -> some View
Labeling a widget
S
EmptyWidgetConfiguration
r
P
WidgetConfiguration
S
LimitedAvailabilityConfiguration
r
P
WidgetBundle
r
P
Widget
Documentation
Open Menu
Swift
Instance Method
widgetLabel(label:)
Creates a label for displaying additional content outside an accessory family widget’s main SwiftUI view.
iOS 16.0+
iPadOS 16.0+
Mac Catalyst 16.0+
watchOS 9.0+
visionOS 1.0+ Beta
func widgetLabel<Label>(@ViewBuilder label: () -> Label) -> some View where Label : View
Parameters
label
A view that WidgetKit can display alongside the accessory family widget’s main SwiftUI view. You can use a Image, Text, Gauge, ProgressView, or a container with multiple subviews.
Discussion
The system only displays labels on widget-based complications in watchOS. The system ignores any labels attached to widgets on the Lock Screen on iPhone. Therefore, you can use the same code to display an accessory family widget on both iPhone and Apple Watch.
To create the widget label, call widgetLabel(label:)on a complication’s main SwiftUI view. Pass the desired content as the label parameter. The label can be a Gauge, ProgressView, Text, or Image. To provide multiple views, wrap your views in a container, such as a VStack. WidgetKit determines whether it can use any of the label’s content. If it can’t, it ignores the label.
  struct Complication: View {
      @Environment(\.widgetFamily) var widgetFamily


      var body: some View {
          switch widgetFamily {
          case .accessoryCorner:
              Text("Hi")
                  .widgetLabel {
                      Gauge(value: 0.8)
                  }
          case .accessoryCircular:
              VStack {
                  Image(systemName: "emoji.globe")
                  Text("Hi")
              }
              .widgetLabel("World!")
          case .accessoryInline:
              Text("\(Image(systemName: "emoji.globe.face")) World!")
      }
  }
WidgetKit configures the label so that the watch face presents a unified look. For example, it sets the size for an image, the font for text, and can even render text and gauges along a curve.
The following widget families support widget labels:
WidgetKit/WidgetFamily/accessoryCorner
In watchOS, this widget-based complication can display a Gauge, a ProgressView, or a Text. Adding a label to an accessory corner causes the main SwiftUI view to shrink to make space for the label. If you pass a view containing multiple, valid subviews, the system picks which view to display as the widget label.
WidgetKit/WidgetFamily/accessoryCircular
In watchOS, the widget-based complication can display either an Image or a Text. To pass both an image and text, wrap those views in a container.
However, WidgetKit only renders the label along the bezel on the Infograph watch face (the top circular complication). On all other circular complications — including widgets on all other platforms — WidgetKit ignores the label.
See Also
Labeling a widget
func widgetLabel<S>(S) -> some View
Returns a text label that displays additional content outside the accessory family widget’s main SwiftUI view.
func widgetLabel(LocalizedStringKey) -> some View
Returns a localized text label that displays additional content outside the accessory family widget’s main SwiftUI view.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is widgetLabel(label:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

