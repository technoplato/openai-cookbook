https://developer.apple.com/documentation/swiftui/refreshactionSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Accessibility
System events
Focus
Drag and drop
Clipboard
Input events
Gestures
P
var refresh: RefreshAction?
M
func refreshable(action: () async -> Void) -> some View
Refreshing a list’s content
M
func selectionDisabled(Bool) -> some View
Beta
M
func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View
Configuring interaction
S
BadgeProminence
Beta
P
var badgeProminence: BadgeProminence
Beta
Documentation
Open Menu
Swift
Structure
RefreshAction
An action that initiates a refresh operation.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
struct RefreshAction
Overview
When the refresh environment value contains an instance of this structure, certain built-in views in the corresponding Environment begin offering a refresh capability. They apply the instance’s handler to any refresh operation that the user initiates. By default, the environment value is nil, but you can use the refreshable(action:) modifier to create and store a new refresh action that uses the handler that you specify:
List(mailbox.conversations) { conversation in
    ConversationCell(conversation)
}
.refreshable {
    await mailbox.fetch()
}
On iOS and iPadOS, the List in the example above offers a pull to refresh gesture because it detects the refresh action. When the user drags the list down and releases, the list calls the action’s handler. Because SwiftUI declares the handler as asynchronous, it can safely make long-running asynchronous calls, like fetching network data.
Refreshing custom views
You can also offer refresh capability in your custom views. Read the refresh environment value to get the RefreshAction instance for a given Environment. If you find a non-nil value, change your view’s appearance or behavior to offer the refresh to the user, and call the instance to conduct the refresh. You can call the refresh instance directly because it defines a callAsFunction() method that Swift calls when you call the instance:
struct RefreshableView: View {
    @Environment(\.refresh) private var refresh


    var body: some View {
        Button("Refresh") {
            Task {
                await refresh?()
            }
        }
        .disabled(refresh == nil)
    }
}
Be sure to call the handler asynchronously by preceding it with await. Because the call is asynchronous, you can use its lifetime to indicate progress to the user. For example, you might reveal an indeterminate ProgressView before calling the handler, and hide it when the handler completes.
If your code isn’t already in an asynchronous context, create a Task for the method to run in. If you do this, consider adding a way for the user to cancel the task. For more information, see Concurrency in The Swift Programming Language.
Topics
Calling the action
func callAsFunction() async
Initiates a refresh action.
Relationships
Conforms To
Sendable
See Also
Refreshing a list’s content
func refreshable(action: () async -> Void) -> some View
Marks this view as refreshable.
var refresh: RefreshAction?
A refresh action stored in a view’s environment.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is RefreshAction
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

