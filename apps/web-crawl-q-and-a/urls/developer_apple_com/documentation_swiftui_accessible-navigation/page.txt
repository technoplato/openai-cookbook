https://developer.apple.com/documentation/swiftui/accessible-navigationSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View
Replacing system rotors
M
func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View
M
func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View
M
func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View
Creating rotors for text ranges
M
func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
Accessible descriptions
Accessible controls
Accessible appearance
Accessibility fundamentals
Accessibility
System events
Focus
Drag and drop
Documentation
Open Menu
Swift
Accessible navigation
Enable users to navigate to specific user interface elements using rotors.
Overview
An accessibility rotor is a shortcut that enables users to quickly navigate to specific elements of the user interface, and, optionally, to specific ranges of text within those elements.
The system automatically provides rotors for many navigable elements, but you can supply additional rotors for specific purposes, or replace system rotors when they don’t automatically pick up off-screen elements, like those far down in a LazyVStack or a List.
For design guidance, see Navigation in the Accessibility section of the Human Interface Guidelines.
Topics
Creating rotors
func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View
Create an Accessibility Rotor with the specified user-visible label, and entries generated from the content closure.
func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View
Create an Accessibility Rotor with the specified user-visible label, and entries generated from the content closure.
func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View
Create an Accessibility Rotor with the specified user-visible label, and entries generated from the content closure.
protocol AccessibilityRotorContent
Content within an accessibility rotor.
struct AccessibilityRotorContentBuilder
Result builder you use to generate rotor entry content.
struct AccessibilityRotorEntry
A struct representing an entry in an Accessibility Rotor.
Creating rotors from a collection
func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
Creating rotors with a label
func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
Creating rotors for text ranges
func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries for each of the specified ranges. The Rotor will be attached to the current Accessibility element, and each entry will go the specified range of that element.
func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries for each of the specified ranges. The Rotor will be attached to the current Accessibility element, and each entry will go the specified range of that element.
func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries for each of the specified ranges. The Rotor will be attached to the current Accessibility element, and each entry will go the specified range of that element.
Replacing system rotors
func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View
Create an Accessibility Rotor replacing the specified system-provided Rotor.
func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor replacing the specified system-provided Rotor.
func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor replacing the specified system-provided Rotor.
func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View
Create an Accessibility Rotor replacing the specified system-provided Rotor. The Rotor will be attached to the current Accessibility element, and each entry will go the specified range of that element.
struct AccessibilitySystemRotor
Designates a Rotor that replaces one of the automatic, system-provided Rotors with a developer-provided Rotor.
Configuring rotors
func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View
Defines an explicit identifier tying an Accessibility element for this view to an entry in an Accessibility Rotor.
func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View
Links multiple accessibility elements so that the user can quickly navigate from one element to another, even when the elements are not near each other in the accessibility hierarchy.
func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Sets the sort priority order for this view’s accessibility element, relative to other elements at the same level.
See Also
Accessibility
API Reference
Accessibility fundamentals
Make your SwiftUI apps accessible to everyone, including people with disabilities.
API Reference
Accessible appearance
Enhance the legibility of content in your app’s interface.
API Reference
Accessible controls
Improve access to actions that your app can undertake.
API Reference
Accessible descriptions
Describe interface elements to help people understand what they represent.
Current page is Accessible navigation
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

