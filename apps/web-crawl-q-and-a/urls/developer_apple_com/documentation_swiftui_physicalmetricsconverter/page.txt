https://developer.apple.com/documentation/swiftui/physicalmetricsconverterSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
GeometryReader
S
GeometryReader3D
Beta
S
GeometryProxy
S
GeometryProxy3D
Beta
M
func coordinateSpace(NamedCoordinateSpace) -> some View
Beta
E
CoordinateSpace
r
P
CoordinateSpaceProtocol
Beta
S
PhysicalMetric
Beta
M
func convert(Point3D, to: UnitLength) -> Point3D
M
func convert(CGSize, to: UnitLength) -> CGSize
M
func convert(Size3D, to: UnitLength) -> Size3D
M
func convert(CGFloat, to: UnitLength) -> CGFloat
Accessing Metal shaders
M
func colorEffect(Shader, isEnabled: Bool) -> some View
Beta
M
func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View
Beta
Documentation
Open Menu
Swift
Structure
PhysicalMetricsConverter
A physical metrics converter provides conversion between point values and their extent in 3D space, in the form of physical length measurements.
visionOS 1.0+ Beta
struct PhysicalMetricsConverter
Overview
Converters are available from the environment of a View or other type that inherits a View‘s environments, and are associated with the scene that contains that environment. The conversions expect (or emit) values in points in that scene’s coordinate system, and convert these to (or from) measurements of length in the user’s reference frame. For example, if the scene is scaled, that scale will be taken into account.
To obtain a converter, use the physicalMetrics key:
struct MyView: View {
    @Environment(\.physicalMetrics) var physicalMetrics
    …
}
When user action modifies a scene so that measurements have changed (e.g., by changing its scale), the view that accessed that environment key and its hierarchy will be reevaluated.
Attempting to obtain a converter inside a type not associated with a scene’s contents (for example, from an App or Scene’s environment) is not supported.
Topics
Converting from a unit length
func convert(CGPoint, from: UnitLength) -> CGPoint
Converts a point, whose coordinates are in the specified unit, to a point suitable for use in the environment this converter is associated with.
func convert(Rect3D, from: UnitLength) -> Rect3D
Converts a Rect3D, whose coordinates are in the specified unit, to a Rect3D with coordinates specified in points, suitable for use in the environment this converter is associated with.
func convert(Size3D, from: UnitLength) -> Size3D
Converts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.
func convert(CGFloat, from: UnitLength) -> CGFloat
Converts a length in the specified unit to a length in points suitable for use in the environment this converter is associated with.
func convert(Point3D, from: UnitLength) -> Point3D
Converts a point, whose coordinates are in the specified unit, to a point value suitable for use in the environment this converter is associated with.
func convert(CGSize, from: UnitLength) -> CGSize
Converts a size, given in the specified unit, to a size in points suitable for use in the environment this converter is associated with.
func convert<V>(V, from: UnitLength) -> V
Converts a vector of physical length measurements, in the specified unit, to a vector of values in points suitable for use in the environment this converter is associated with.
func convert(CGRect, from: UnitLength) -> CGRect
Converts a rectangle, whose coordinates are in the specified unit, to a rectangle with coordinates specified in points, suitable for use in the environment this converter is associated with.
Converting to a unit length
func convert(Rect3D, to: UnitLength) -> Rect3D
Converts a Rect3D’s coordinates to physical length measurements in the specified unit.
func convert(CGRect, to: UnitLength) -> CGRect
Converts a rectangle’s coordinates to physical length measurements in the specified unit.
func convert(CGPoint, to: UnitLength) -> CGPoint
Converts a point’s coordinates to physical length measurements in the specified unit.
func convert<V>(V, to: UnitLength) -> V
Converts a vector of values in points to corresponding physical length measurements in the specified unit.
func convert(Point3D, to: UnitLength) -> Point3D
Converts a point’s coordinates to physical length measurements in the specified unit.
func convert(CGSize, to: UnitLength) -> CGSize
Converts a size, specified in points, to physical length measurements in the specified unit.
func convert(Size3D, to: UnitLength) -> Size3D
Converts a size, specified in points, to physical length measurements in the specified unit.
func convert(CGFloat, to: UnitLength) -> CGFloat
Converts a length in points to a physical length measurement in the specified unit.
Relationships
Conforms To
Equatable
Sendable
See Also
Measuring a view
struct GeometryReader
A container view that defines its content as a function of its own size and coordinate space.
struct GeometryReader3D
A container view that defines its content as a function of its own size and coordinate space.
Beta
struct GeometryProxy
A proxy for access to the size and coordinate space (for anchor resolution) of the container view.
struct GeometryProxy3D
A proxy for access to the size and coordinate space of the container view.
Beta
func coordinateSpace(NamedCoordinateSpace) -> some View
Assigns a name to the view’s coordinate space, so other code can operate on dimensions like points and sizes relative to the named space.
Beta
enum CoordinateSpace
A resolved coordinate space created by CoordinateSpaceProtocol.
protocol CoordinateSpaceProtocol
A frame of reference within the layout system.
Beta
struct PhysicalMetric
Provides access to a value in points that corresponds to the specified physical measurement.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is PhysicalMetricsConverter
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

