https://developer.apple.com/documentation/swiftui/animationstate/subscript(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func transition<T>(T) -> some View
Beta
Defining transitions
M
func geometryGroup() -> some View
Beta
S
Namespace
r
P
GeometryEffect
S
MatchedGeometryProperties
M
func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View
Accessing custom keys
M
init()
Creating animation state
S
AnimationState
Beta
S
AnimationContext
Beta
r
P
CustomAnimation
Beta
Creating custom animations
S
SpringKeyframe
Beta
Documentation
Open Menu
Swift
Instance Subscript
subscript(_:)
Accesses the state for a custom key.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
subscript<K>(key: K.Type) -> K.Value where K : AnimationStateKey { get set }
Overview
Create a custom animation state value by defining a key that conforms to the AnimationStateKey protocol and provide the defaultValue for the key. Also include properties to read and write state values that your CustomAnimation uses. For example, the following code defines a key named PausableState that has two state values, paused and pauseTime:
private struct PausableState<Value: VectorArithmetic>: AnimationStateKey {
    var paused = false
    var pauseTime: TimeInterval = 0.0


    static var defaultValue: Self { .init() }
}
Use that key with the subscript operator of the AnimationState structure to get and set a value for the key. For more convenient access to the key value, extend AnimationContext with a computed property that gets and sets the key’s value.
extension AnimationContext {
    fileprivate var pausableState: PausableState<Value> {
        get { state[PausableState<Value>.self] }
        set { state[PausableState<Value>.self] = newValue }
    }
}
To access the state values in a CustomAnimation, call the custom computed property, then read and write the state values that the custom AnimationStateKey provides.
struct PausableAnimation: CustomAnimation {
    let base: Animation


    func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V? where V : VectorArithmetic {
        let paused = context.environment.animationPaused


        let pausableState = context.pausableState
        var pauseTime = pausableState.pauseTime
        if pausableState.paused != paused {
            pauseTime = time - pauseTime
            context.pausableState = PausableState(paused: paused, pauseTime: pauseTime)
        }


        let effectiveTime = paused ? pauseTime : time - pauseTime
        let result = base.animate(value: value, time: effectiveTime, context: &context)
        return result
    }
}
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is subscript(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

