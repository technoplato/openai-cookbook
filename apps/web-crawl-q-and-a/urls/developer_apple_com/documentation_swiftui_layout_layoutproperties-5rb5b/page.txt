https://developer.apple.com/documentation/swiftui/layout/layoutproperties-5rb5bSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
GridLayout
S
ZStackLayout
S
VStackLayout
S
HStackLayout
S
AnyLayout
Transitioning between layout types
r
P
LayoutValueKey
M
func spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> ViewSpacing
M
func explicitAlignment(of: VerticalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?
M
func explicitAlignment(of: HorizontalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?
Reporting layout container characteristics
T
Layout.Subviews
M
func placeSubviews(in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache)
M
func sizeThatFits(proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGSize
Sizing the container and placing subviews
Documentation
Open Menu
Swift
Type Property
layoutProperties
Properties of a layout container.
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
tvOS 16.0+
watchOS 9.0+
visionOS 1.0+ Beta
static var layoutProperties: LayoutProperties { get }
Required Default implementation provided.
Discussion
Implement this property in a type that conforms to the Layout protocol to characterize your custom layout container. For example, you can indicate that your layout has a vertical stackOrientation:
extension BasicVStack {
    static var layoutProperties: LayoutProperties {
        var properties = LayoutProperties()
        properties.stackOrientation = .vertical
        return properties
    }
}
If you don’t implement this property in your custom layout, the protocol provides a default implementation, namely layoutProperties, that returns a LayoutProperties instance with default values.
Default Implementations
Layout Implementations
static var layoutProperties: LayoutProperties
The default property values for a layout.
See Also
Reporting layout container characteristics
func explicitAlignment(of: HorizontalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?
Returns the position of the specified horizontal alignment guide along the x axis.
Required Default implementations provided.
func explicitAlignment(of: VerticalAlignment, in: CGRect, proposal: ProposedViewSize, subviews: Self.Subviews, cache: inout Self.Cache) -> CGFloat?
Returns the position of the specified vertical alignment guide along the y axis.
Required Default implementations provided.
func spacing(subviews: Self.Subviews, cache: inout Self.Cache) -> ViewSpacing
Returns the preferred spacing values of the composite view.
Required Default implementation provided.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is layoutProperties
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

