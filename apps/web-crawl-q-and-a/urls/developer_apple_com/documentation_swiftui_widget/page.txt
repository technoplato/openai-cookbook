https://developer.apple.com/documentation/swiftui/widgetSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Environment values
Model data
Data and storage
M
func dynamicIsland(verticalPlacement: DynamicIslandExpandedRegionVerticalPlacement) -> some View
Managing placement in the Dynamic Island
M
func widgetAccentable(Bool) -> some View
Controlling the accented group
Making a configurable widget
Keeping a widget up to date
Creating a widget extension
Building Widgets Using WidgetKit and SwiftUI
Creating widgets
App extensions
Search
Toolbars
Documentation
Open Menu
Swift
Protocol
Widget
The configuration and content of a widget to display on the Home screen or in Notification Center.
iOS 14.0+
iPadOS 14.0+
macOS 11.0+
Mac Catalyst 14.0+
watchOS 9.0+
visionOS 1.0+ Beta
protocol Widget
Overview
Widgets show glanceable and relevant content from your app right on the iOS Home screen or in Notification Center on macOS. Users can add, configure, and arrange widgets to suit their individual needs. You can provide multiple types of widgets, each presenting a specific kind of information. When users want more information, like to read the full article for a headline or to see the details of a package delivery, the widget lets them get to the information in your app quickly.
There are three key components to a widget:
A configuration that determines whether the widget is configurable, identifies the widget, and defines the SwiftUI views that show the widget’s content.
A timeline provider that drives the process of updating the widget’s view over time.
SwiftUI views used by WidgetKit to display the widget.
For information about adding a widget extension to your app, and keeping your widget up to date, see Creating a widget extension and Keeping a widget up to date, respectively.
By adding a custom SiriKit intent definition, you can let users customize their widgets to show the information that’s most relevant to them. If you’ve already added support for Siri or Shortcuts, you’re well on your way to supporting customizable widgets. For more information, see Making a configurable widget.
Topics
Implementing a widget
var body: Self.Body
The content and behavior of the widget.
Required
associatedtype Body : WidgetConfiguration
The type of configuration representing the content of the widget.
Required
Running a widget
init()
Creates a widget using body as its content.
Required
static func main()
Initializes and runs the widget.
See Also
Creating widgets
protocol WidgetBundle
A container used to expose multiple widgets from a single widget extension.
struct LimitedAvailabilityConfiguration
A type-erased widget configuration.
protocol WidgetConfiguration
A type that describes a widget’s content.
struct EmptyWidgetConfiguration
An empty widget configuration.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Widget
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

