https://developer.apple.com/documentation/swiftui/foreach/init(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
OutlineGroup
Disclosing information progressively
r
P
DynamicViewContent
T
ForEach.Body
Type Aliases
P
var data: Data
P
var content: (Data.Element) -> Content
init<C, R>(Binding<C>, id: KeyPath<C.Element, ID>, editActions: EditActions<C>, content: (Binding<C.Element>) -> R)
M
init<C>(Binding<C>, id: KeyPath<C.Element, ID>, content: (Binding<C.Element>) -> Content)
M
init(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)
M
init<C>(Binding<C>, content: (Binding<C.Element>) -> Content)
M
init(Data, content: (Data.Element) -> Content)
Creating a collection from data
M
init(Range<Int>, content: (Int) -> Content)
Creating a collection from a range
S
ForEach
Documentation
Open Menu
Swift
Initializer
init(_:)
Creates an instance that uniquely identifies and creates table rows across updates based on the identity of the underlying data.
iOS 16.0+
iPadOS 16.0+
macOS 12.0+
Mac Catalyst 16.0+
visionOS 1.0+ Beta
init(_ data: Data) where ID == Data.Element.ID, Content == TableRow<Data.Element>, Data.Element : Identifiable
Available when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to TableRowContent.
Parameters
data
The identified data that the ForEach instance uses to create table rows dynamically.
Discussion
The following example creates a Person type that conforms to Identifiable, and an array of this type called people. A ForEach instance iterates over the array, producing new TableRow instances implicitly.
private struct Person: Identifiable {
    var id = UUID()
    var name: String
}


@State private var people: [Person] = /* ... */


Table(of: Person.self) {
    TableColumn("ID", value: \.id.uuidString)
    TableColumn("Name", value: \.name)
} rows: {
    Section("Team") {
        /* This is equivalent to the line below:
        ForEach(people) { TableRow($0) }
        */
        ForEach(people)
    }
}
See Also
Creating a collection from data
init(Data, content: (Data.Element) -> Content)
Creates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.
Available when Data conforms to RandomAccessCollection, ID is Data.Element.ID, Content conforms to View, and Data.Element conforms to Identifiable.
init<C>(Binding<C>, content: (Binding<C.Element>) -> Content)
Creates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.
Available when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.
init(Data, id: KeyPath<Data.Element, ID>, content: (Data.Element) -> Content)
Creates an instance that uniquely identifies and creates views across updates based on the provided key path to the underlying data’s identifier.
Available when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.
init<C>(Binding<C>, id: KeyPath<C.Element, ID>, content: (Binding<C.Element>) -> Content)
Creates an instance that uniquely identifies and creates views across updates based on the identity of the underlying data.
Available when Data conforms to RandomAccessCollection, ID conforms to Hashable, and Content conforms to View.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is init(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

