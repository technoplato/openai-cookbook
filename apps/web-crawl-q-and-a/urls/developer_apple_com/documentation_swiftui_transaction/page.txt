https://developer.apple.com/documentation/swiftui/transactionSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Menus and commands
Controls and indicators
Images
Text input and output
r
P
AnimatableModifier
Deprecated
Deprecated types
r
P
TransactionKey
M
func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View
Beta
M
func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View
Beta
M
func transaction((inout Transaction) -> Void) -> some View
func withTransaction<R, V>(WritableKeyPath<Transaction, V>, V, () throws -> R) rethrows -> R
func withTransaction<Result>(Transaction, () throws -> Result) rethrows -> Result
Moving an animation to another view
S
PlaceholderContentView
Beta
S
ContentTransition
Documentation
Open Menu
Swift
Structure
Transaction
The context of the current state-processing update.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
@frozen
struct Transaction
Overview
Use a transaction to pass an animation between views in a view hierarchy.
The root transaction for a state change comes from the binding that changed, plus any global values set by calling withTransaction(_:_:) or withAnimation(_:_:).
Topics
Creating a transaction
init()
Creates a transaction.
init(animation: Animation?)
Creates a transaction and assigns its animation property.
Managing animations
var animation: Animation?
The animation, if any, associated with the current state change.
var disablesAnimations: Bool
A Boolean value that indicates whether views should disable animations.
func addAnimationCompletion(criteria: AnimationCompletionCriteria, () -> Void)
Adds a completion to run when the animations created with this transaction are all complete.
Beta
Managing window dismissal
var dismissBehavior: DismissBehavior
The behavior for how windows will dismiss programmatically when used in conjunction with DismissWindowAction.
Beta
Getting information about a transaction
var isContinuous: Bool
A Boolean value that indicates whether the transaction originated from an action that produces a sequence of values.
var scrollTargetAnchor: UnitPoint?
The preferred alignment of the view within a scroll view’s visible region when scrolling to a view.
Beta
var tracksVelocity: Bool
Whether this transaction will track the velocity of any animatable properties that change.
Beta
subscript<K>(K.Type) -> K.Value
Accesses the transaction value associated with a custom key.
Beta
Relationships
Conforms To
Sendable
See Also
Moving an animation to another view
func withTransaction<Result>(Transaction, () throws -> Result) rethrows -> Result
Executes a closure with the specified transaction and returns the result.
func withTransaction<R, V>(WritableKeyPath<Transaction, V>, V, () throws -> R) rethrows -> R
Executes a closure with the specified transaction key path and value and returns the result.
func transaction((inout Transaction) -> Void) -> some View
Applies the given transaction mutation function to all animations used within the view.
func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View
Applies the given transaction mutation function to all animations used within the view.
Beta
func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View
Applies the given transaction mutation function to all animations used within the body closure.
Beta
protocol TransactionKey
A key for accessing values in a transaction.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Transaction
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

