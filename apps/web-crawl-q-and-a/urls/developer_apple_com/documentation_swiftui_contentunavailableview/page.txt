https://developer.apple.com/documentation/swiftui/contentunavailableviewSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
P
var controlSize: ControlSize
M
func controlSize(ControlSize) -> some View
Sizing controls
S
SensoryFeedback
Beta
M
func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View
Beta
M
func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View
Beta
M
func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View
static var search: ContentUnavailableView<SearchUnavailableContent.Label, SearchUnavailableContent.Description, SearchUnavailableContent.Actions>
Indicating missing content
S
DefaultDateProgressLabel
M
func progressViewStyle<S>(S) -> some View
S
ProgressView
M
func gaugeStyle<S>(S) -> some View
S
Gauge
Indicating a value
S
ColorPicker
Documentation
Open Menu
Swift
Structure
ContentUnavailableView
An interface, consisting of a label and additional content, that you display when the content of your app is unavailable to users.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
struct ContentUnavailableView<Label, Description, Actions> where Label : View, Description : View, Actions : View
Overview
It is recommended to use ContentUnavailableView in situations where a view’s content cannot be displayed. That could be caused by a network error, a list without items, a search that returns no results etc.
You create an ContentUnavailableView in its simplest form, by providing a label and some additional content such as a description or a call to action:
ContentUnavailableView {
    Label("No Mail", systemImage: "tray.fill")
} description: {
    Text("New mails you receive will appear here.")
}
The system provides default ContentUnavailableViews that you can use in specific situations. The example below illustrates the usage of the search view:
struct ContentView: View {
    @ObservedObject private var viewModel = ContactsViewModel()


    var body: some View {
        NavigationStack {
            List {
                ForEach(viewModel.searchResults) { contact in
                    NavigationLink {
                        ContactsView(contact)
                    } label: {
                        Text(contact.name)
                    }
                }
            }
            .navigationTitle("Contacts")
            .searchable(text: $viewModel.searchText)
            .overlay {
                if searchResults.isEmpty {
                    ContentUnavailableView.search
                }
            }
        }
    }
}
Topics
Getting built-in unavailable views
static var search: ContentUnavailableView<SearchUnavailableContent.Label, SearchUnavailableContent.Description, SearchUnavailableContent.Actions>
Creates a ContentUnavailableView instance that conveys a search state.
Available when Label is SearchUnavailableContent.Label, Description is SearchUnavailableContent.Description, and Actions is SearchUnavailableContent.Actions.
static func search(text: String) -> ContentUnavailableView<Label, Description, Actions>
Creates a ContentUnavailableView instance that conveys a search state.
Available when Label is SearchUnavailableContent.Label, Description is SearchUnavailableContent.Description, and Actions is SearchUnavailableContent.Actions.
Creating an unavailable view
init(label: () -> Label, description: () -> Description, actions: () -> Actions)
Creates an interface, consisting of a label and additional content, that you display when the content of your app is unavailable to users.
Creating an unavailable view with an image
init(LocalizedStringKey, image: String, description: Text?)
Creates an interface, consisting of a title generated from a localized string, an image and additional content, that you display when the content of your app is unavailable to users.
Available when Label is Label<Text, Image>, Description is Text?, and Actions is EmptyView.
init<S>(S, image: String, description: Text?)
Creates an interface, consisting of a title generated from a string, an image and additional content, that you display when the content of your app is unavailable to users.
Available when Label is Label<Text, Image>, Description is Text?, and Actions is EmptyView.
Creating an unavailable view with a system image
init(LocalizedStringKey, systemImage: String, description: Text?)
Creates an interface, consisting of a title generated from a localized string, a system icon image and additional content, that you display when the content of your app is unavailable to users.
Available when Label is Label<Text, Image>, Description is Text?, and Actions is EmptyView.
init<S>(S, systemImage: String, description: Text?)
Creates an interface, consisting of a title generated from a string, a system icon image and additional content, that you display when the content of your app is unavailable to users.
Available when Label is Label<Text, Image>, Description is Text?, and Actions is EmptyView.
Supporting types
struct SearchUnavailableContent
A structure that represents the body of a static placeholder search view.
Relationships
Conforms To
Sendable
View
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is ContentUnavailableView
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

