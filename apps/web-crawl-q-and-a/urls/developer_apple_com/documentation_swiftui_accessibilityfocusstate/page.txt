https://developer.apple.com/documentation/swiftui/accessibilityfocusstateSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Xcode library customization
Previews in Xcode
Tool support
Technology-specific views
WatchKit integration
UIKit integration
AppKit integration
M
func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View
M
func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View
Controlling focus
S
AccessibilityZoomGestureAction
S
AccessibilityDirectTouchOptions
Beta
M
func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
M
func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Beta
M
func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Documentation
Open Menu
Swift
Structure
AccessibilityFocusState
A property wrapper type that can read and write a value that SwiftUI updates as the focus of any active accessibility technology, such as VoiceOver, changes.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
@propertyWrapper @frozen
struct AccessibilityFocusState<Value> where Value : Hashable
Overview
Use this capability to request that VoiceOver or other accessibility technologies programmatically focus on a specific element, or to determine whether VoiceOver or other accessibility technologies are focused on particular elements. Use accessibilityFocused(_:equals:) or accessibilityFocused(_:) in conjunction with this property wrapper to identify accessibility elements for which you want to get or set accessibility focus. When accessibility focus enters the modified accessibility element, the framework updates the wrapped value of this property to match a given prototype value. When accessibility focus leaves, SwiftUI resets the wrapped value of an optional property to nil or the wrapped value of a Boolean property to false. Setting the property’s value programmatically has the reverse effect, causing accessibility focus to move to whichever accessibility element is associated with the updated value.
In the example below, when notification changes, and its isPriority property is true, the accessibility focus moves to the notification Text element above the rest of the view’s content:
struct CustomNotification: Equatable {
    var text: String
    var isPriority: Bool
}


struct ContentView: View {
    @Binding var notification: CustomNotification?
    @AccessibilityFocusState var isNotificationFocused: Bool


    var body: some View {
        VStack {
            if let notification = self.notification {
                Text(notification.text)
                    .accessibilityFocused($isNotificationFocused)
            }
            Text("The main content for this view.")
        }
        .onChange(of: notification) { notification in
            if (notification?.isPriority == true)  {
                isNotificationFocused = true
            }
        }


    }
}
To allow for cases where accessibility focus is completely absent from the tree of accessibility elements, or accessibility technologies are not active, the wrapped value must be either optional or Boolean.
Some initializers of AccessibilityFocusState also allow specifying accessibility technologies, determining to which types of accessibility focus this binding applies. If you specify no accessibility technologies, SwiftUI uses an aggregate of any and all active accessibility technologies.
Topics
Creating a focus state
init<T>()
Creates a new accessibility focus state of the type you provide.
init()
Creates a new accessibility focus state for a Boolean value.
init<T>(for: AccessibilityTechnologies)
Creates a new accessibility focus state of the type and using the accessibility technologies you specify.
init(for: AccessibilityTechnologies)
Creates a new accessibility focus state for a Boolean value, using the accessibility technologies you specify.
Getting the state
var projectedValue: AccessibilityFocusState<Value>.Binding
A projection of the state value that can be used to establish bindings between view content and accessibility focus placement.
var wrappedValue: Value
The current state value, taking into account whatever bindings might be in effect due to the current location of focus.
struct Binding
Relationships
Conforms To
DynamicProperty
Sendable
See Also
Controlling focus
func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View
Modifies this view by binding its accessibility element’s focus state to the given boolean state value.
func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View
Modifies this view by binding its accessibility element’s focus state to the given state value.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is AccessibilityFocusState
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

