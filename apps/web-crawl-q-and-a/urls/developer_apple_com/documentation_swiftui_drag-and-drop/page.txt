https://developer.apple.com/documentation/swiftui/drag-and-dropSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
System events
Focus
S
SpringLoadingBehavior
Beta
P
var springLoadingBehavior: SpringLoadingBehavior
Beta
M
func springLoadingBehavior(SpringLoadingBehavior) -> some View
Beta
Configuring spring loading
S
DropInfo
func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View
Clipboard
Input events
Gestures
Event handling
Scroll views
View groupings
Tables
Lists
Documentation
Open Menu
Swift
Drag and drop
Enable people to move or duplicate items by dragging them from one location to another.
Overview
Drag and drop offers people a convenient way to move content from one part of your app to another, or from one app to another, using an intuitive dragging gesture. Support this feature in your app by adding view modifiers to potential source and destination views within your app’s interface.
In your modifiers, provide or accept types that conform to the Transferable protocol, or that inherit from the NSItemProvider class. When possible, prefer using transferable items.
For design guidance, see Drag and drop in the Human Interface Guidelines.
Topics
Moving transferable items
func draggable<T>(() -> T) -> some View
Activates this view as the source of a drag and drop operation.
func draggable<V, T>(() -> T, preview: () -> V) -> some View
Activates this view as the source of a drag and drop operation.
func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View
Defines the destination of a drag and drop operation that handles the dropped content with a closure that you specify.
Moving items using item providers
func itemProvider(Optional<() -> NSItemProvider?>) -> some View
Provides a closure that vends the drag representation to be used for a particular data element.
func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View
Activates this view as the source of a drag and drop operation.
func onDrag(() -> NSItemProvider) -> some View
Activates this view as the source of a drag and drop operation.
func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View
Defines the destination of a drag-and-drop operation that handles the dropped content with a closure that you specify.
func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View
Defines the destination of a drag and drop operation that handles the dropped content with a closure that you specify.
func onDrop(of: [UTType], delegate: DropDelegate) -> some View
Defines the destination of a drag and drop operation using behavior controlled by the delegate that you provide.
protocol DropDelegate
An interface that you implement to interact with a drop operation in a view modified to accept drops.
struct DropProposal
The behavior of a drop.
enum DropOperation
Operation types that determine how a drag and drop session resolves when the user drops a drag item.
struct DropInfo
The current state of a drop.
Configuring spring loading
func springLoadingBehavior(SpringLoadingBehavior) -> some View
Sets the spring loading behavior this view.
Beta
var springLoadingBehavior: SpringLoadingBehavior
The behavior of spring loaded interactions for the views associated with this environment.
Beta
struct SpringLoadingBehavior
The options for controlling the spring loading behavior of views.
Beta
See Also
Event handling
API Reference
Gestures
Define interactions from taps, clicks, and swipes to fine-grained gestures.
API Reference
Input events
Respond to input from a hardware device, like a keyboard or a Touch Bar.
API Reference
Clipboard
Enable people to move or duplicate items by issuing Copy and Paste commands.
API Reference
Focus
Identify and control which visible object responds to user interaction.
API Reference
System events
React to system events, like opening a URL.
Current page is Drag and drop
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

