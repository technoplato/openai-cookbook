https://developer.apple.com/documentation/swiftui/scrolltargetbehavior/viewalignedSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func defaultScrollAnchor(UnitPoint?) -> some View
Beta
Defining scroll targets
M
func scrollTargetBehavior(some ScrollTargetBehavior) -> some View
Beta
M
func scrollTargetLayout(isEnabled: Bool) -> some View
Beta
S
ScrollTarget
Beta
r
P
ScrollTargetBehavior
Beta
Getting the scroll target behavior
P
static var paging: PagingScrollTargetBehavior
func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View
func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View
M
func scrollIndicatorsFlash(trigger: some Equatable) -> some View
M
func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View
P
var horizontalScrollIndicatorVisibility: ScrollIndicatorVisibility
P
var verticalScrollIndicatorVisibility: ScrollIndicatorVisibility
S
ScrollIndicatorVisibility
Managing content visibility
M
func scrollContentBackground(Visibility) -> some View
Documentation
Open Menu
Swift
Type Property
viewAligned
The scroll behavior that aligns scroll targets to view-based geometry.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
static var viewAligned: ViewAlignedScrollTargetBehavior { get }
Available when Self is ViewAlignedScrollTargetBehavior.
Discussion
You use this behavior when a scroll view should always align its scroll targets to a rectangle that’s aligned to the geometry of a view. In the following example, the scroll view always picks an item view to settle on.
ScrollView(.horizontal) {
    LazyHStack(spacing: 10.0) {
        ForEach(items) { item in
            ItemView(item)
        }
    }
    .scrollTargetLayout()
}
.scrollTargetBehavior(.viewAligned)
.padding(.horizontal, 20.0)
You configure which views should be used for settling using the View/scrollTargetLayout() modifier. Apply this modifier to a layout container like LazyVStack or HStack and each individual view in that layout will be considered for alignment.
You can customize whether the view aligned behavior limits the number of views that can be scrolled at a time by using the ViewAlignedScrollTargetBehavior.LimitBehavior type. Provide a value of ViewAlignedScrollTargetBehavior.LimitBehavior/always to always have the behavior only allow a few views to be scrolled at a time.
By default, the view aligned behavior limits the number of views it scrolls when in a compact horizontal size class when scrollable in the horizontal axis, when in a compact vertical size class when scrollable in the vertical axis, and otherwise doesn’t impose any limit on the number of views that can be scrolled.
See Also
Getting the scroll target behavior
static var paging: PagingScrollTargetBehavior
The scroll behavior that aligns scroll targets to container-based geometry.
Available when Self is PagingScrollTargetBehavior.
Beta
static func viewAligned(limitBehavior: ViewAlignedScrollTargetBehavior.LimitBehavior) -> Self
The scroll behavior that aligns scroll targets to view-based geometry.
Available when Self is ViewAlignedScrollTargetBehavior.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is viewAligned
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

