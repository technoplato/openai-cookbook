https://developer.apple.com/documentation/swiftui/alignmentidSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
E
LayoutDirection
P
var layoutDirection: LayoutDirection
E
LayoutDirectionBehavior
Beta
M
func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View
Beta
Setting a layout direction
S
SafeAreaRegions
M
func safeAreaPadding(Edge.Set, CGFloat?) -> some View
func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View
func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View
S
DepthAlignment
Beta
S
VerticalAlignment
S
HorizontalAlignment
S
Alignment
M
func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
M
func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Aligning views across stacks
Aligning views within a stack
Documentation
Open Menu
Swift
Protocol
AlignmentID
A type that you use to create custom alignment guides.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
protocol AlignmentID
Overview
Every built-in alignment guide that VerticalAlignment or HorizontalAlignment defines as a static property, like top or leading, has a unique alignment identifier type that produces the default offset for that guide. To create a custom alignment guide, define your own alignment identifier as a type that conforms to the AlignmentID protocol, and implement the required defaultValue(in:) method:
private struct FirstThirdAlignment: AlignmentID {
    static func defaultValue(in context: ViewDimensions) -> CGFloat {
        context.height / 3
    }
}
When implementing the method, calculate the guide’s default offset from the view’s origin. If it’s helpful, you can use information from the ViewDimensions input in the calculation. This parameter provides context about the specific view that’s using the guide. The above example creates an identifier called FirstThirdAlignment and calculates a default value that’s one-third of the height of the aligned view.
Use the identifier’s type to create a static property in an extension of one of the alignment guide types, like VerticalAlignment:
extension VerticalAlignment {
    static let firstThird = VerticalAlignment(FirstThirdAlignment.self)
}
You can apply your custom guide like any of the built-in guides. For example, you can use an HStack to align its views at one-third of their height using the guide defined above:
struct StripesGroup: View {
    var body: some View {
        HStack(alignment: .firstThird, spacing: 1) {
            HorizontalStripes().frame(height: 60)
            HorizontalStripes().frame(height: 120)
            HorizontalStripes().frame(height: 90)
        }
    }
}


struct HorizontalStripes: View {
    var body: some View {
        VStack(spacing: 1) {
            ForEach(0..<3) { _ in Color.blue }
        }
    }
}
Because each set of stripes has three equal, vertically stacked rectangles, they align at the bottom edge of the top rectangle. This corresponds in each case to a third of the overall height, as measured from the origin at the top of each set of stripes:
You can also use the alignmentGuide(_:computeValue:) view modifier to alter the behavior of your custom guide for a view, as you might alter a built-in guide. For example, you can change one of the stacks of stripes from the previous example to align its firstThird guide at two thirds of the height instead:
struct StripesGroupModified: View {
    var body: some View {
        HStack(alignment: .firstThird, spacing: 1) {
            HorizontalStripes().frame(height: 60)
            HorizontalStripes().frame(height: 120)
            HorizontalStripes().frame(height: 90)
                .alignmentGuide(.firstThird) { context in
                    2 * context.height / 3
                }
        }
    }
}
The modified guide calculation causes the affected view to place the bottom edge of its middle rectangle on the firstThird guide, which aligns with the bottom edge of the top rectangle in the other two groups:
Topics
Getting the default value
static func defaultValue(in: ViewDimensions) -> CGFloat
Calculates a default value for the corresponding guide in the specified context.
Required
See Also
Aligning views
Aligning views within a stack
Position views inside a stack using alignment guides.
Aligning views across stacks
Create a custom alignment and use it to align views across multiple stacks.
func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Sets the view’s horizontal alignment.
func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Sets the view’s vertical alignment.
struct Alignment
An alignment in both axes.
struct HorizontalAlignment
An alignment position along the horizontal axis.
struct VerticalAlignment
An alignment position along the vertical axis.
struct DepthAlignment
An alignment position along the depth axis.
Beta
struct ViewDimensions
A view’s size and alignment guides in its own coordinate space.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is AlignmentID
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

