https://developer.apple.com/documentation/swiftui/view/togglestyle(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func progressViewStyle<S>(S) -> some View
S
ProgressView
M
func gaugeStyle<S>(S) -> some View
S
Gauge
Indicating a value
S
ColorPicker
Choosing a color
S
Toggle
S
Stepper
S
Slider
Getting numeric inputs
S
HelpLink
Beta
S
TextFieldLink
S
SharePreview
S
ShareLink
Documentation
Open Menu
Swift
Instance Method
toggleStyle(_:)
Sets the style for toggles in a view hierarchy.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func toggleStyle<S>(_ style: S) -> some View where S : ToggleStyle
Parameters
style
The toggle style to set. Use one of the built-in values, like switch or button, or a custom style that you define by creating a type that conforms to the ToggleStyle protocol.
Return Value
A view that uses the specified toggle style for itself and its child views.
Discussion
Use this modifier on a Toggle instance to set a style that defines the control’s appearance and behavior. For example, you can choose the switch style:
Toggle("Vibrate on Ring", isOn: $vibrateOnRing)
    .toggleStyle(.switch)
Built-in styles typically have a similar appearance across platforms, tailored to the platform’s overall style:
Platform
Appearance
iOS, iPadOS
macOS
Styling toggles in a hierarchy
You can set a style for all toggle instances within a view hierarchy by applying the style modifier to a container view. For example, you can apply the button style to an HStack:
HStack {
    Toggle(isOn: $isFlagged) {
        Label("Flag", systemImage: "flag.fill")
    }
    Toggle(isOn: $isMuted) {
        Label("Mute", systemImage: "speaker.slash.fill")
    }
}
.toggleStyle(.button)
The example above has the following appearance when isFlagged is true and isMuted is false:
Platform
Appearance
iOS, iPadOS
macOS
Automatic styling
If you don’t set a style, SwiftUI assumes a value of automatic, which corresponds to a context-specific default. Specify the automatic style explicitly to override a container’s style and revert to the default:
HStack {
    Toggle(isOn: $isShuffling) {
        Label("Shuffle", systemImage: "shuffle")
    }
    Toggle(isOn: $isRepeating) {
        Label("Repeat", systemImage: "repeat")
    }


    Divider()


    Toggle("Enhance Sound", isOn: $isEnhanced)
        .toggleStyle(.automatic) // Revert to the default style.
}
.toggleStyle(.button) // Use button style for toggles in the stack.
.labelStyle(.iconOnly) // Omit the title from any labels.
The style that SwiftUI uses as the default depends on both the platform and the context. In macOS, the default in most contexts is a checkbox, while in iOS, the default toggle style is a switch:
Platform
Appearance
iOS, iPadOS
macOS
Note
Like toggle style does for toggles, the labelStyle(_:) modifier sets the style for Label instances in the hierarchy. The example above demostrates the compact iconOnly style, which is useful for button toggles in space-constrained contexts. Always include a descriptive title for better accessibility.
For more information about how SwiftUI chooses a default toggle style, see the automatic style.
See Also
Getting numeric inputs
struct Slider
A control for selecting a value from a bounded linear range of values.
struct Stepper
A control that performs increment and decrement actions.
struct Toggle
A control that toggles between on and off states.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is toggleStyle(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

