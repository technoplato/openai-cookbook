https://developer.apple.com/documentation/swiftui/tablerowbuilderSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Scroll views
View groupings
S
TableOutlineGroupContent
Beta
S
DisclosureTableRow
Beta
Adding progressive disclosure
M
static func buildExpression<Content>(Content) -> Content
M
static func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>
static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>
static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>
static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>
static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>
static func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>
static func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>
r
P
DynamicTableRowContent
S
EmptyTableRowContent
S
TableForEachContent
S
TupleTableRowContent
S
TableHeaderRowContent
r
P
TableRowContent
S
TableRow
Creating rows
Documentation
Open Menu
Swift
Structure
TableRowBuilder
A result builder that creates table row content from closures.
iOS 16.0+
iPadOS 16.0+
macOS 12.0+
Mac Catalyst 16.0+
visionOS 1.0+ Beta
@resultBuilder
struct TableRowBuilder<Value> where Value : Identifiable
Overview
The buildBlock methods in this type create TableRowContent instances based on the number and types of sources provided as parameters.
Don’t use this type directly; instead, SwiftUI annotates the rows parameter of the various Table initializers with the @TableRowBuilder annotation, implicitly calling this builder for you.
Topics
Building a row from sources
static func buildBlock<C>(C) -> C
Creates a single row result.
static func buildBlock<C0, C1>(C0, C1) -> TupleTableRowContent<Value, (C0, C1)>
Creates a row result from two sources.
Available when Value conforms to Identifiable.
static func buildBlock<C0, C1, C2>(C0, C1, C2) -> TupleTableRowContent<Value, (C0, C1, C2)>
Creates a row result from three sources.
Available when Value conforms to Identifiable.
static func buildBlock<C0, C1, C2, C3>(C0, C1, C2, C3) -> TupleTableRowContent<Value, (C0, C1, C2, C3)>
Creates a row result from four sources.
Available when Value conforms to Identifiable.
static func buildBlock<C0, C1, C2, C3, C4>(C0, C1, C2, C3, C4) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4)>
Creates a row result from five sources.
Available when Value conforms to Identifiable.
static func buildBlock<C0, C1, C2, C3, C4, C5>(C0, C1, C2, C3, C4, C5) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5)>
Creates a row result from six sources.
Available when Value conforms to Identifiable.
static func buildBlock<C0, C1, C2, C3, C4, C5, C6>(C0, C1, C2, C3, C4, C5, C6) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6)>
Creates a row result from seven sources.
Available when Value conforms to Identifiable.
static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7>(C0, C1, C2, C3, C4, C5, C6, C7) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7)>
Creates a row result from eight sources.
Available when Value conforms to Identifiable.
static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8>(C0, C1, C2, C3, C4, C5, C6, C7, C8) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8)>
Creates a row result from nine sources.
Available when Value conforms to Identifiable.
static func buildBlock<C0, C1, C2, C3, C4, C5, C6, C7, C8, C9>(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9) -> TupleTableRowContent<Value, (C0, C1, C2, C3, C4, C5, C6, C7, C8, C9)>
Creates a row result from ten sources.
Available when Value conforms to Identifiable.
Building a row from conditionals
static func buildIf<C>(C?) -> C?
Creates a row result for conditional statements.
Available when Value conforms to Identifiable.
static func buildEither<T, F>(first: T) -> _ConditionalContent<T, F>
Creates a row result for the first of two row content alternatives.
Available when Value conforms to Identifiable.
static func buildEither<T, F>(second: F) -> _ConditionalContent<T, F>
Creates a row result for the second of two row content alternatives.
Available when Value conforms to Identifiable.
static func buildExpression<Content>(Content) -> Content
Builds an expression within the builder.
Relationships
Conforms To
Sendable
See Also
Creating rows
struct TableRow
A row that represents a data value in a table.
protocol TableRowContent
A type used to represent table rows.
struct TableHeaderRowContent
A table row that displays a single view instead of columned content.
struct TupleTableRowContent
A type of table column content that creates table rows created from a Swift tuple of table rows.
struct TableForEachContent
A type of table row content that creates table rows created by iterating over a collection.
struct EmptyTableRowContent
A table row content that doesn’t produce any rows.
protocol DynamicTableRowContent
A type of table row content that generates table rows from an underlying collection of data.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is TableRowBuilder
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

