https://developer.apple.com/documentation/swiftui/layoutvaluekeySkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
LayoutSubview
S
LayoutSubviews
Configuring a custom layout
S
LayoutProperties
S
ProposedViewSize
S
ViewSpacing
Associating values with views in a custom layout
M
func layoutValue<K>(key: K.Type, value: K.Value) -> some View
Gestures
Input events
Clipboard
Drag and drop
Focus
System events
Accessibility
Documentation
Open Menu
Swift
Protocol
LayoutValueKey
A key for accessing a layout value of a layout container’s subviews.
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
tvOS 16.0+
watchOS 9.0+
visionOS 1.0+ Beta
protocol LayoutValueKey
Overview
If you create a custom layout by defining a type that conforms to the Layout protocol, you can also create custom layout values that you set on individual views, and that your container view can access to guide its layout behavior. Your custom values resemble the built-in layout values that you set with view modifiers like layoutPriority(_:) and zIndex(_:), but have a purpose that you define.
To create a custom layout value, define a type that conforms to the LayoutValueKey protocol and implement the one required property that returns the default value of the property. For example, you can create a property that defines an amount of flexibility for a view, defined as an optional floating point number with a default value of nil:
private struct Flexibility: LayoutValueKey {
    static let defaultValue: CGFloat? = nil
}
The Swift compiler infers this particular key’s associated type as an optional doc://com.apple.documentation/documentation/CoreGraphics/CGFloat from this definition.
Set a value on a view
Set the value on a view by adding the layoutValue(key:value:) view modifier to the view. To make your custom value easier to work with, you can do this in a convenience modifier in an extension of the View protocol:
extension View {
    func layoutFlexibility(_ value: CGFloat?) -> some View {
        layoutValue(key: Flexibility.self, value: value)
    }
}
Use your modifier to set the value on any views that need a nondefault value:
BasicVStack {
    Text("One View")
    Text("Another View")
        .layoutFlexibility(3)
}
Any view that you don’t explicitly set a value for uses the default value, as with the first Text view, above.
Retrieve a value during layout
Access a custom layout value using the key as an index on subview’s proxy (an instance of LayoutSubview) and use the value to make decisions about sizing, placement, or other layout operations. For example, you might read the flexibility value in your layout view’s sizeThatFits(_:) method, and adjust your size calculations accordingly:
extension BasicVStack {
    func sizeThatFits(
        proposal: ProposedViewSize,
        subviews: Subviews,
        cache: inout Void
    ) -> CGSize {


        // Map the flexibility property of each subview into an array.
        let flexibilities = subviews.map { subview in
            subview[Flexibility.self]
        }


        // Calculate and return the size of the layout container.
        // ...
    }
}
Topics
Providing a default value
static var defaultValue: Self.Value
The default value of the key.
Required
associatedtype Value
The type of the key’s value.
Required
See Also
Associating values with views in a custom layout
func layoutValue<K>(key: K.Type, value: K.Value) -> some View
Associates a value with a custom layout property.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is LayoutValueKey
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

