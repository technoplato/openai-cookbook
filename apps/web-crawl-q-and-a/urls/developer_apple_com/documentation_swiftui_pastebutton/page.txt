https://developer.apple.com/documentation/swiftui/pastebuttonSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
Picker
Choosing from a set of options
M
func toggleStyle<S>(S) -> some View
S
Toggle
S
Stepper
S
Slider
Getting numeric inputs
init<Payload>(supportedContentTypes: [UTType], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)
init<Payload>(supportedTypes: [String], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)
S
EditButton
Creating special-purpose buttons
S
ButtonRepeatBehavior
Beta
S
ButtonRole
S
ButtonBorderShape
P
var buttonRepeatBehavior: ButtonRepeatBehavior
Beta
M
func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View
Beta
M
func buttonBorderShape(ButtonBorderShape) -> some View
Documentation
Open Menu
Swift
Structure
PasteButton
A system button that reads items from the pasteboard and delivers it to a closure.
iOS 16.0+
iPadOS 16.0+
macOS 10.15+
Mac Catalyst 16.0+
visionOS 1.0+ Beta
@MainActor
struct PasteButton
Overview
Use a paste button when you want to provide a button for pasting items from the system pasteboard into your app. The system provides a button appearance and label appropriate to the current environment. However, you can use view modifiers like buttonBorderShape(_:), labelStyle(_:), and tint(_:) to customize the button in some contexts.
You declare what type of items your app will accept; use a type that conforms to the Transferable protocol. When the user taps or clicks the button, your closure receives the pasteboard items in the specified type.
In the following example, a paste button declares that it accepts a string. When the user taps or clicks the button, the sample’s closure receives an array of strings and sets the first as the value of pastedText, which updates a nearby Text view.
@State private var pastedText: String = ""


var body: some View {
    HStack {
        PasteButton(payloadType: String.self) { strings in
            pastedText = strings[0]
        }
        Divider()
        Text(pastedText)
        Spacer()
    }
}
A paste button automatically validates and invalidates based on changes to the pasteboard on iOS, but not on macOS.
Topics
Creating a paste button
init(supportedContentTypes: [UTType], payloadAction: ([NSItemProvider]) -> Void)
Creates a Paste button that accepts specific types of data from the pasteboard.
init<T>(payloadType: T.Type, onPaste: ([T]) -> Void)
Creates an instance that accepts values of the specified type.
Deprecated initializers
init(supportedTypes: [String], payloadAction: ([NSItemProvider]) -> Void)
Creates a Paste button that accepts specific types of data from the pasteboard.
Deprecated
init<Payload>(supportedTypes: [String], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)
Creates a Paste button that accepts specific types of data from the pasteboard, performing a custom validation of the data before sending it to your app.
Deprecated
init<Payload>(supportedContentTypes: [UTType], validator: ([NSItemProvider]) -> Payload?, payloadAction: (Payload) -> Void)
Creates a Paste button that accepts specific types of data from the pasteboard, performing a custom validation of the data before sending it to your app.
Deprecated
Relationships
Conforms To
Sendable
View
See Also
Creating special-purpose buttons
struct EditButton
A button that toggles the edit mode environment value.
struct RenameButton
A button that triggers a standard rename action.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is PasteButton
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

