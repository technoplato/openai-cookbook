https://developer.apple.com/documentation/swiftui/keyequivalentSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
EventModifiers
P
var character: Character
M
init(Character)
Creating a key equivalent
P
static let tab: KeyEquivalent
P
static let space: KeyEquivalent
P
static let `return`: KeyEquivalent
S
KeyboardShortcut
P
var keyboardShortcut: KeyboardShortcut?
M
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View
M
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View
M
func keyboardShortcut(KeyboardShortcut?) -> some View
M
func keyboardShortcut(KeyboardShortcut) -> some View
Creating keyboard shortcuts
S
KeyPress
Beta
Documentation
Open Menu
Swift
Structure
KeyEquivalent
Key equivalents consist of a letter, punctuation, or function key that can be combined with an optional set of modifier keys to specify a keyboard shortcut.
iOS 14.0+
iPadOS 14.0+
macOS 11.0+
Mac Catalyst 14.0+
tvOS 17.0+ Beta
visionOS 1.0+ Beta
struct KeyEquivalent
Overview
Key equivalents are used to establish keyboard shortcuts to app functionality. Any key can be used as a key equivalent as long as pressing it produces a single character value. Key equivalents are typically initialized using a single-character string literal, with constants for unprintable or hard-to-type values.
The modifier keys necessary to type a key equivalent are factored in to the resulting keyboard shortcut. That is, a key equivalent whose raw value is the capitalized string “A” corresponds with the keyboard shortcut Command-Shift-A. The exact mapping may depend on the keyboard layout—for example, a key equivalent with the character value “}” produces a shortcut equivalent to Command-Shift-] on ANSI keyboards, but would produce a different shortcut for keyboard layouts where punctuation characters are in different locations.
Topics
Getting arrow keys
static let upArrow: KeyEquivalent
Up Arrow (U+F700)
static let downArrow: KeyEquivalent
Down Arrow (U+F701)
static let leftArrow: KeyEquivalent
Left Arrow (U+F702)
static let rightArrow: KeyEquivalent
Right Arrow (U+F703)
Getting other special keys
static let clear: KeyEquivalent
Clear (U+F739)
static let delete: KeyEquivalent
Delete (U+0008)
static let deleteForward: KeyEquivalent
Delete Forward (U+F728)
static let end: KeyEquivalent
End (U+F72B)
static let escape: KeyEquivalent
Escape (U+001B)
static let home: KeyEquivalent
Home (U+F729)
static let pageDown: KeyEquivalent
Page Down (U+F72D)
static let pageUp: KeyEquivalent
Page Up (U+F72C)
static let `return`: KeyEquivalent
Return (U+000D)
static let space: KeyEquivalent
Space (U+0020)
static let tab: KeyEquivalent
Tab (U+0009)
Creating a key equivalent
init(Character)
Creates a new key equivalent from the given character value.
var character: Character
The character value that the key equivalent represents.
Relationships
Conforms To
Equatable
ExpressibleByExtendedGraphemeClusterLiteral
ExpressibleByUnicodeScalarLiteral
Hashable
Sendable
See Also
Creating keyboard shortcuts
func keyboardShortcut(KeyboardShortcut) -> some View
Assigns a keyboard shortcut to the modified control.
func keyboardShortcut(KeyboardShortcut?) -> some View
Assigns an optional keyboard shortcut to the modified control.
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View
Defines a keyboard shortcut and assigns it to the modified control.
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View
Defines a keyboard shortcut and assigns it to the modified control.
var keyboardShortcut: KeyboardShortcut?
The keyboard shortcut that buttons in this environment will be triggered with.
struct KeyboardShortcut
Keyboard shortcuts describe combinations of keys on a keyboard that the user can press in order to activate a button or toggle.
struct EventModifiers
A set of key modifiers that you can add to a gesture.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is KeyEquivalent
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

