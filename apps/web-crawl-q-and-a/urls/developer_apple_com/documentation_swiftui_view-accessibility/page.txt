https://developer.apple.com/documentation/swiftui/view-accessibilitySkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
M
func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
M
func accessibilityActions<Content>(() -> Content) -> some View
M
func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Actions
M
func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
M
func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View
func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Configuring view elements
Previews in Xcode
M
func modifier<T>(T) -> ModifiedContent<Self, T>
Body
P
var body: Self.Body
Implementing a custom view
r
P
View
Declaring a custom view
Documentation
Open Menu
Swift
Accessibility modifiers
Make your SwiftUI apps accessible to everyone, including people with disabilities.
Overview
Like all Apple UI frameworks, SwiftUI comes with built-in accessibility support. The framework introspects common elements like navigation views, lists, text fields, sliders, buttons, and so on, and provides basic accessibility labels and values by default. You don’t have to do any extra work to enable these standard accessibility features.
SwiftUI also provides tools to help you enhance the accessibility of your app. For example, you can explicitly add accessibility labels to elements in your UI using the accessibilityLabel(_:) or the accessibilityValue(_:) view modifier.
To learn more about adding accessibility features to your app, see Accessibility fundamentals.
Topics
Labels
func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds a label to the view that describes its contents.
func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds a label to the view that describes its contents.
func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds a label to the view that describes its contents.
func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Sets alternate input labels with which users identify a view.
func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Sets alternate input labels with which users identify a view.
func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Sets alternate input labels with which users identify a view.
func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View
Pairs an accessibility element representing a label with the element for the matching content.
Values
func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds a textual description of the value that the view contains.
func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds a textual description of the value that the view contains.
func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds a textual description of the value that the view contains.
Hints
func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Communicates to the user what happens after performing the view’s action.
func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Communicates to the user what happens after performing the view’s action.
func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Communicates to the user what happens after performing the view’s action.
Actions
func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityActions<Content>(() -> Content) -> some View
Adds multiple accessibility actions to the view.
func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View
Adds an accessibility action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility adjustable action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility scroll action to the view. Actions allow assistive technologies, such as the VoiceOver, to interact with the view by invoking the action.
Gestures
func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
The activation point for an element is the location assistive technologies use to initiate gestures.
func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
The activation point for an element is the location assistive technologies use to initiate gestures.
func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Explicitly set whether this accessibility element is a direct touch area. Direct touch areas passthrough touch events to the app rather than being handled through an assistive technology, such as VoiceOver. The modifier accepts an optional AccessibilityDirectTouchOptions option set to customize the functionality of the direct touch area.
Beta
func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds an accessibility zoom action to the view. Actions allow assistive technologies, such as VoiceOver, to interact with the view by invoking the action.
Elements
func accessibilityElement(children: AccessibilityChildBehavior) -> some View
Creates a new accessibility element, or modifies the AccessibilityChildBehavior of the existing accessibility element.
func accessibilityChildren<V>(children: () -> V) -> some View
Replaces the existing accessibility element’s children with one or more new synthetic accessibility elements.
func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Specifies whether to hide this view from system accessibility features.
Custom controls
func accessibilityRepresentation<V>(representation: () -> V) -> some View
Replaces one or more accessibility elements for this view with new accessibility elements.
func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Explicitly set whether this Accessibility element responds to user interaction and would thus be interacted with by technologies such as Switch Control, Voice Control or Full Keyboard Access.
Custom content
func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Add additional accessibility information to the view.
func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Add additional accessibility information to the view.
func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Add additional accessibility information to the view.
func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Add additional accessibility information to the view.
func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Add additional accessibility information to the view.
func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Add additional accessibility information to the view.
func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Add additional accessibility information to the view.
Creating rotors
func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View
Create an Accessibility Rotor with the specified user-visible label, and entries generated from the content closure.
func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View
Create an Accessibility Rotor with the specified user-visible label, and entries generated from the content closure.
func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View
Create an Accessibility Rotor with the specified user-visible label, and entries generated from the content closure.
func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries.
func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries for each of the specified ranges. The Rotor will be attached to the current Accessibility element, and each entry will go the specified range of that element.
func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries for each of the specified ranges. The Rotor will be attached to the current Accessibility element, and each entry will go the specified range of that element.
func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View
Create an Accessibility Rotor with the specified user-visible label and entries for each of the specified ranges. The Rotor will be attached to the current Accessibility element, and each entry will go the specified range of that element.
Replacing system rotors
func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View
Create an Accessibility Rotor replacing the specified system-provided Rotor.
func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor replacing the specified system-provided Rotor.
func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
Create an Accessibility Rotor replacing the specified system-provided Rotor.
func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View
Create an Accessibility Rotor replacing the specified system-provided Rotor. The Rotor will be attached to the current Accessibility element, and each entry will go the specified range of that element.
Configuring rotors
func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View
Defines an explicit identifier tying an Accessibility element for this view to an entry in an Accessibility Rotor.
func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View
Links multiple accessibility elements so that the user can quickly navigate from one element to another, even when the elements are not near each other in the accessibility hierarchy.
func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Sets the sort priority order for this view’s accessibility element, relative to other elements at the same level.
Focus
func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View
Modifies this view by binding its accessibility element’s focus state to the given boolean state value.
func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View
Modifies this view by binding its accessibility element’s focus state to the given state value.
Traits
func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Adds the given traits to the view.
func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Removes the given traits from this view.
Identity
func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Uses the string you specify to identify the view.
Color inversion
func accessibilityIgnoresInvertColors(Bool) -> some View
Sets whether this view should ignore the system Smart Invert setting.
Content descriptions
func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Sets an accessibility text content type.
func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>
Sets the accessibility level of this heading.
VoiceOver
func speechAdjustedPitch(Double) -> some View
Raises or lowers the pitch of spoken text.
func speechAlwaysIncludesPunctuation(Bool) -> some View
Sets whether VoiceOver should always speak all punctuation in the text view.
func speechAnnouncementsQueued(Bool) -> some View
Controls whether to queue pending announcements behind existing speech rather than interrupting speech in progress.
func speechSpellsOutCharacters(Bool) -> some View
Sets whether VoiceOver should speak the contents of the text view character by character.
Charts
func accessibilityChartDescriptor<R>(R) -> some View
Adds a descriptor to a View that represents a chart to make the chart’s contents accessible to all users.
Large content
func accessibilityShowsLargeContentViewer() -> some View
Adds a default large content view to be shown by the large content viewer.
func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View
Adds a custom large content view to be shown by the large content viewer.
Quick actions
func accessibilityQuickAction<Style, Content>(style: Style, content: () -> Content) -> some View
Adds a quick action to be shown by the system when active.
func accessibilityQuickAction<Style, Content>(style: Style, isActive: Binding<Bool>, content: () -> Content) -> some View
Adds a quick action to be shown by the system when active.
See Also
Configuring view elements
API Reference
Appearance modifiers
Configure a view’s foreground and background styles, controls, and visibility.
API Reference
Text and symbol modifiers
Manage the rendering, selection, and entry of text in your view.
API Reference
Auxiliary view modifiers
Add and configure supporting views, like toolbars and context menus.
API Reference
Chart view modifiers
Configure charts that you declare with Swift Charts.
Current page is Accessibility modifiers
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

