https://developer.apple.com/documentation/swiftui/view/interactivedismissdisabled(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Shapes
Menus and commands
Controls and indicators
Images
Text input and output
Animations
View styles
S
DismissAction
P
var dismiss: DismissAction
P
var isPresented: Bool
Dismissing a presentation
M
func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View
Beta
M
func inspectorColumnWidth(CGFloat) -> some View
Beta
M
func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View
Beta
Presenting an inspector
Documentation
Open Menu
Swift
Instance Method
interactiveDismissDisabled(_:)
Conditionally prevents interactive dismissal of presentations like popovers, sheets, and inspectors.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
func interactiveDismissDisabled(_ isDisabled: Bool = true) -> some View
Parameters
isDisabled
A Boolean value that indicates whether to prevent nonprogrammatic dismissal of the containing view hierarchy when presented in a sheet or popover.
Discussion
Users can dismiss certain kinds of presentations using built-in gestures. In particular, a user can dismiss a sheet by dragging it down, or a popover by clicking or tapping outside of the presented view. Use the interactiveDismissDisabled(_:) modifier to conditionally prevent this kind of dismissal. You typically do this to prevent the user from dismissing a presentation before providing needed data or completing a required action.
For instance, suppose you have a view that displays a licensing agreement that the user must acknowledge before continuing:
struct TermsOfService: View {
    @Binding var areTermsAccepted: Bool
    @Environment(\.dismiss) private var dismiss


    var body: some View {
        Form {
            Text("License Agreement")
                .font(.title)
            Text("Terms and conditions go here.")
            Button("Accept") {
                areTermsAccepted = true
                dismiss()
            }
        }
    }
}
If you present this view in a sheet, the user can dismiss it by either tapping the button — which calls dismiss from its action closure — or by dragging the sheet down. To ensure that the user accepts the terms by tapping the button, disable interactive dismissal, conditioned on the areTermsAccepted property:
struct ContentView: View {
    @State private var isSheetPresented = false
    @State private var areTermsAccepted = false


    var body: some View {
        Button("Use Service") {
            isSheetPresented = true
        }
        .sheet(isPresented: $isSheetPresented) {
            TermsOfService()
                .interactiveDismissDisabled(!areTermsAccepted)
        }
    }
}
You can apply the modifier to any view in the sheet’s view hierarchy, including to the sheet’s top level view, as the example demonstrates, or to any child view, like the Form or the Accept Button.
The modifier has no effect on programmatic dismissal, which you can invoke by updating the Binding that controls the presentation, or by calling the environment’s dismiss action. On macOS, disabling interactive dismissal in a popover makes the popover nontransient.
See Also
Dismissing a presentation
var isPresented: Bool
A Boolean value that indicates whether the view associated with this environment is currently presented.
var dismiss: DismissAction
An action that dismisses the current presentation.
struct DismissAction
An action that dismisses a presentation.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is interactiveDismissDisabled(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

