https://developer.apple.com/documentation/swiftui/customanimationSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
T
TimelineViewDefaultContext
r
P
TimelineSchedule
S
TimelineView
Updating watchOS apps with timelines
Updating a view on a schedule
S
EmptyAnimatableData
r
P
VectorArithmetic
func shouldMerge<V>(previous: Animation, value: V, time: TimeInterval, context: inout AnimationContext<V>) -> Bool
Creating custom animations
S
SpringKeyframe
Beta
S
MoveKeyframe
Beta
S
LinearKeyframe
Beta
S
CubicKeyframe
Beta
r
P
KeyframeTrackContent
Beta
S
KeyframesBuilder
Beta
S
KeyframeTrackContentBuilder
Beta
Documentation
Open Menu
Swift
Protocol
CustomAnimation
A type that defines how an animatable value changes over time.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
protocol CustomAnimation : Hashable
Overview
Use this protocol to create a type that changes an animatable value over time, which produces a custom visual transition of a view. For example, the follow code changes an animatable value using an elastic ease-in ease-out function:
struct ElasticEaseInEaseOutAnimation: CustomAnimation {
    let duration: TimeInterval


    func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V? where V : VectorArithmetic {
        if time > duration { return nil } // The animation has finished.


        let p = time / duration
        let s = sin((20 * p - 11.125) * ((2 * Double.pi) / 4.5))
        if p < 0.5 {
            return value.scaled(by: -(pow(2, 20 * p - 10) * s) / 2)
        } else {
            return value.scaled(by: (pow(2, -20 * p + 10) * s) / 2 + 1)
        }
    }
}
Note
To maintain state during the life span of a custom animation, use the state property available on the context parameter value. You can also use context’s environment property to retrieve environment values from the view that created the custom animation. For more information, see AnimationContext.
To create an Animation instance of a custom animation, use the init(_:) initializer, passing in an instance of a custom animation; for example:
Animation(ElasticEaseInEaseOutAnimation(duration: 5.0))
To help make view code more readable, extend Animation and add a static property and function that returns an Animation instance of a custom animation. For example, the following code adds the static property elasticEaseInEaseOut that returns the elastic ease-in ease-out animation with a default duration of 0.35 seconds. Next, the code adds a method that returns the animation with a specified duration.
extension Animation {
    static var elasticEaseInEaseOut: Animation { elasticEaseInEaseOut(duration: 0.35) }
    static func elasticEaseInEaseOut(duration: TimeInterval) -> Animation {
        Animation(ElasticEaseInEaseOutAnimation(duration: duration))
    }
}
To animate a view with the elastic ease-in ease-out animation, a view calls either .elasticEaseInEaseOut or .elasticEaseInEaseOut(duration:). For example, the follow code includes an Animate button that, when clicked, animates a circle as it moves from one edge of the view to the other, using the elastic ease-in ease-out animation with a duration of 5 seconds:
struct ElasticEaseInEaseOutView: View {
    @State private var isActive = false


    var body: some View {
        VStack(alignment: isActive ? .trailing : .leading) {
            Circle()
                .frame(width: 100.0)
                .foregroundColor(.accentColor)


            Button("Animate") {
                withAnimation(.elasticEaseInEaseOut(duration: 5.0)) {
                    isActive.toggle()
                }
            }
            .frame(maxWidth: .infinity)
        }
        .padding()
    }
}
Play
Topics
Animating a value
func animate<V>(value: V, time: TimeInterval, context: inout AnimationContext<V>) -> V?
Calculates the value of the animation at the specified time.
Required
Getting the velocity
func velocity<V>(value: V, time: TimeInterval, context: AnimationContext<V>) -> V?
Calculates the velocity of the animation at a specified time.
Required Default implementation provided.
Determining whether to merge
func shouldMerge<V>(previous: Animation, value: V, time: TimeInterval, context: inout AnimationContext<V>) -> Bool
Determines whether an instance of the animation can merge with other instance of the same type.
Required Default implementation provided.
Relationships
Inherits From
Equatable
Hashable
See Also
Creating custom animations
struct AnimationContext
Contextual values that a custom animation can use to manage state and access a view’s environment.
Beta
struct AnimationState
A container that stores the state for a custom animation.
Beta
protocol AnimationStateKey
A key for accessing animation state values.
Beta
struct UnitCurve
A function defined by a two-dimensional curve that maps an input progress in the range [0,1] to an output progress that is also in the range [0,1]. By changing the shape of the curve, the effective speed of an animation or other interpolation can be changed.
Beta
struct Spring
A representation of a spring’s motion.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is CustomAnimation
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

