https://developer.apple.com/documentation/swiftui/image/renderingmode(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
SymbolVariants
P
var symbolVariants: SymbolVariants
M
func symbolVariant(SymbolVariants) -> some View
Setting a symbol variant
E
AsyncImagePhase
S
AsyncImage
Loading images asynchronously
M
func symbolRenderingMode(SymbolRenderingMode?) -> Image
M
func antialiased(Bool) -> Image
Specifying rendering behavior
M
func resizable(capInsets: EdgeInsets, resizingMode: Image.ResizingMode) -> Image
Resizing images
M
init(size: CGSize, label: Text?, opaque: Bool, colorMode: ColorRenderingMode, renderer: (inout GraphicsContext) -> Void)
Creating an image from drawing instructions
M
init(nsImage: NSImage)
Documentation
Open Menu
Swift
Instance Method
renderingMode(_:)
Indicates whether SwiftUI renders an image as-is, or by using a different mode.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func renderingMode(_ renderingMode: Image.TemplateRenderingMode?) -> Image
Parameters
renderingMode
The mode SwiftUI uses to render images.
Return Value
A modified Image.
Discussion
The Image.TemplateRenderingMode enumeration has two cases: Image.TemplateRenderingMode.original and Image.TemplateRenderingMode.template. The original mode renders pixels as they appear in the original source image. Template mode renders all nontransparent pixels as the foreground color, which you can use for purposes like creating image masks.
The following example shows both rendering modes, as applied to an icon image of a green circle with darker green border:
Image("dot_green")
    .renderingMode(.original)
Image("dot_green")
    .renderingMode(.template)
You also use renderingMode to produce multicolored system graphics from the SF Symbols set. Use the Image.TemplateRenderingMode.original mode to apply a foreground color to all parts of the symbol except those that have a distinct color in the graphic. The following example shows three uses of the person.crop.circle.badge.plus symbol to achieve different effects:
A default appearance with no foreground color or template rendering mode specified. The symbol appears all black in light mode, and all white in Dark Mode.
The multicolor behavior achieved by using original template rendering mode, along with a blue foreground color. This mode causes the graphic to override the foreground color for distinctive parts of the image, in this case the plus icon.
A single-color template behavior achieved by using template rendering mode with a blue foreground color. This mode applies the foreground color to the entire image, regardless of the user’s Appearance preferences.
HStack {
   Image(systemName: "person.crop.circle.badge.plus")
   Image(systemName: "person.crop.circle.badge.plus")
       .renderingMode(.original)
       .foregroundColor(.blue)
   Image(systemName: "person.crop.circle.badge.plus")
       .renderingMode(.template)
       .foregroundColor(.blue)
}
.font(.largeTitle)
Use the SF Symbols app to find system images that offer the multicolor feature. Keep in mind that some multicolor symbols use both the foreground and accent colors.
See Also
Specifying rendering behavior
func antialiased(Bool) -> Image
Specifies whether SwiftUI applies antialiasing when rendering the image.
func symbolRenderingMode(SymbolRenderingMode?) -> Image
Sets the rendering mode for symbol images within this view.
func interpolation(Image.Interpolation) -> Image
Specifies the current level of quality for rendering an image that requires interpolation.
enum TemplateRenderingMode
A type that indicates how SwiftUI renders images.
enum Interpolation
The level of quality for rendering an image that requires interpolation, such as a scaled image.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is renderingMode(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

