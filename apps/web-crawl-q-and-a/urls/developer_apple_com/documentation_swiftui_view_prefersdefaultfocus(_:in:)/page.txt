https://developer.apple.com/documentation/swiftui/view/prefersdefaultfocus(_:in:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Tool support
Technology-specific views
WatchKit integration
UIKit integration
AppKit integration
Framework integration
Accessible navigation
Controlling default focus
M
func focusSection() -> some View
M
func focusScope(Namespace.ID) -> some View
Setting focus scope
S
FocusedObject
M
func focusedSceneObject<T>(T) -> some View
M
func focusedSceneObject<T>(T?) -> some View
M
func focusedObject<T>(T) -> some View
Documentation
Open Menu
Swift
Instance Method
prefersDefaultFocus(_:in:)
Indicates that the view should receive focus by default for a given namespace.
macOS 12.0+
tvOS 14.0+
watchOS 7.0+
func prefersDefaultFocus(
    _ prefersDefaultFocus: Bool = true,
    in namespace: Namespace.ID
) -> some View
Parameters
prefersDefaultFocus
A Boolean value that indicates whether this view prefers to receive focus by default. The default value, true, causes the view to receive focus by default.
namespace
The namespace associated with the focus scope within which this view prefers default focus.
Return Value
A modified view that sets whether it prefers to be focused by default.
Discussion
This modifier sets the initial focus preference when no other view has focus. Use the environment value resetFocus to force a reevaluation of default focus at any time.
The following tvOS example shows three buttons, labeled “1”, “2”, and “3”, in a VStack. By default, the “1” button would receive focus, because it is the first child in the stack. However, the prefersDefaultFocus(_:in:) modifier allows button “3” to receive default focus instead. Once the buttons are visible, the user can move down to and focus the “Reset to default focus” button. When the user activates this button, it uses the ResetFocusAction to reevaluate default focus in the mainNamespace, which returns the focus to button “3”.
struct ContentView: View {
    @Namespace var mainNamespace
    @Environment(\.resetFocus) var resetFocus


    var body: some View {
        VStack {
            Button ("1") {}
            Button ("2") {}
            Button ("3") {}
                .prefersDefaultFocus(in: mainNamespace)
            Button ("Reset to default focus") {
                resetFocus(in: mainNamespace)
            }
        }
        .focusScope(mainNamespace)
    }
}
The default focus preference is limited to the focusable ancestor that matches the provided namespace. If multiple views express this preference, then SwiftUI applies the current platform rules to determine which view receives focus.
See Also
Controlling default focus
func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View
Defines a region of the window in which default focus is evaluated by assigning a value to a given focus state binding.
struct DefaultFocusEvaluationPriority
Prioritizations for default focus preferences when evaluating where to move focus in different circumstances.
Current page is prefersDefaultFocus(_:in:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

