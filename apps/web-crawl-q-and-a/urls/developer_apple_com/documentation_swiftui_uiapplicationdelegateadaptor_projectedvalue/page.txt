https://developer.apple.com/documentation/swiftui/uiapplicationdelegateadaptor/projectedvalueSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Views
Persistent storage
Preferences
Environment values
Model data
Data and storage
App extensions
Getting the delegate adaptor
M
init(DelegateType.Type)
Beta
M
init(DelegateType.Type)
M
init(DelegateType.Type)
Creating a delegate adaptor
S
UIApplicationDelegateAdaptor
O
property list key UILaunchScreens
O
property list key UILaunchScreen
Documentation
Open Menu
Swift
Instance Property
projectedValue
A projection of the observed object that provides bindings to its properties.
iOS 14.0+
iPadOS 14.0+
Mac Catalyst 14.0+
tvOS 14.0+
visionOS 1.0+ Beta
@MainActor
var projectedValue: ObservedObject<DelegateType>.Wrapper { get }
Available when DelegateType inherits NSObject, DelegateType conforms to ObservableObject, and DelegateType conforms to UIApplicationDelegate.
Discussion
Use the projected value to get a binding to a value that the delegate publishes. Access the projected value by prefixing the name of the delegate instance with a dollar sign ($). For example, you might publish a Boolean value in your application delegate:
class MyAppDelegate: NSObject, UIApplicationDelegate, ObservableObject {
    @Published var isEnabled = false


    // ...
}
If you declare the delegate in your App using the UIApplicationDelegateAdaptor property wrapper, you can get the delegate that SwiftUI instantiates from the environment and access a binding to its published values from any view in your app:
struct MyView: View {
    @EnvironmentObject private var appDelegate: MyAppDelegate


    var body: some View {
        Toggle("Enabled", isOn: $appDelegate.isEnabled)
    }
}
See Also
Getting the delegate adaptor
var wrappedValue: DelegateType
The underlying app delegate.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is projectedValue
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

