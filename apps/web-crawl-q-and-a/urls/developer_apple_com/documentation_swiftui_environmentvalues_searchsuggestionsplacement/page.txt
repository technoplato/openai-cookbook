https://developer.apple.com/documentation/swiftui/environmentvalues/searchsuggestionsplacementSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
P
var verticalScrollIndicatorVisibility: ScrollIndicatorVisibility
P
var horizontalScrollIndicatorVisibility: ScrollIndicatorVisibility
P
var isScrollEnabled: Bool
Scrolling
P
var undoManager: UndoManager?
P
var timeZone: TimeZone
P
var modelContext: ModelContext
P
var menuOrder: MenuOrder
P
var menuIndicatorVisibility: Visibility
P
var keyboardShortcut: KeyboardShortcut?
P
var defaultWheelPickerItemHeight: CGFloat
P
var controlActiveState: ControlActiveState
P
var controlSize: ControlSize
P
var buttonRepeatBehavior: ButtonRepeatBehavior
Beta
Controls and input
Documentation
Open Menu
Swift
Instance Property
searchSuggestionsPlacement
The current placement of search suggestions.
iOS 16.0+
iPadOS 16.0+
macOS 13.0+
Mac Catalyst 16.0+
tvOS 16.0+
watchOS 9.0+
visionOS 1.0+ Beta
var searchSuggestionsPlacement: SearchSuggestionsPlacement { get }
Discussion
Search suggestions render based on the platform and surrounding context in which you place the searchable modifier containing suggestions. You can render search suggestions in two ways:
In a menu attached to the search field.
Inline with the main content of the app.
You find the current search suggestion placement by querying the searchSuggestionsPlacement in your search suggestions.
enum FruitSuggestion: String, Identifiable {
    case apple, banana, orange
    var id: Self { self }
}


@State private var text: String = ""
@State private var suggestions: [FruitSuggestion] = []


var body: some View {
    MainContent()
        .searchable(text: $text) {
            FruitSuggestions(suggestions: suggestions)
        }
}


struct FruitSuggestions: View {
    var suggestions: [FruitSuggestion]


    @Environment(\.searchSuggestionsPlacement)
    private var placement


    var body: some View {
        if shouldRender {
            ForEach(suggestions) { suggestion in
                Text(suggestion.rawValue.capitalized)
                    .searchCompletion(suggestion.rawValue)
            }
        }
    }


    var shouldRender: Bool {
        #if os(iOS)
        placement == .menu
        #else
        true
        #endif
    }
}
In the above example, search suggestions only render in iOS if the searchable modifier displays them in a menu. You might want to do this to render suggestions in your own list alongside your own search results when they would render in a list.
See Also
Controls and input
var buttonRepeatBehavior: ButtonRepeatBehavior
Whether buttons with this associated environment should repeatedly trigger their actions on prolonged interactions.
Beta
var controlSize: ControlSize
The size to apply to controls within a view.
var controlActiveState: ControlActiveState
The active state of controls in the view.
var defaultWheelPickerItemHeight: CGFloat
The default height of an item in a wheel-style picker, such as a date picker.
var keyboardShortcut: KeyboardShortcut?
The keyboard shortcut that buttons in this environment will be triggered with.
var menuIndicatorVisibility: Visibility
The menu indicator visibility to apply to controls within a view.
var menuOrder: MenuOrder
The preferred order of items for menus presented from this view.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is searchSuggestionsPlacement
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

