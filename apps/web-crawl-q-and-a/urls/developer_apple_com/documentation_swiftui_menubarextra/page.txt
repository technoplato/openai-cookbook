https://developer.apple.com/documentation/swiftui/menubarextraSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
SceneBuilder
Monitoring scene life cycle
P
var scenePhase: ScenePhase
E
ScenePhase
Managing a settings window
S
Settings
S
SettingsLink
Beta
Creating a menu bar extra
M
init(LocalizedStringKey, systemImage: String, isInserted: Binding<Bool>, content: () -> Content)
M
init<S>(S, systemImage: String, content: () -> Content)
M
init<S>(S, systemImage: String, isInserted: Binding<Bool>, content: () -> Content)
Creating a menu bar extra with an image resource
M
init(LocalizedStringKey, image: ImageResource, content: () -> Content)
Beta
M
init(LocalizedStringKey, image: ImageResource, isInserted: Binding<Bool>, content: () -> Content)
Beta
M
init<S>(S, image: ImageResource, content: () -> Content)
Beta
Documentation
Open Menu
Swift
Structure
MenuBarExtra
A scene that renders itself as a persistent control in the system menu bar.
macOS 13.0+
struct MenuBarExtra<Label, Content> where Label : View, Content : View
Overview
Use a MenuBarExtra when you want to provide access to commonly used functionality, even when your app is not active.
@main
struct AppWithMenuBarExtra: App {
    @AppStorage("showMenuBarExtra") private var showMenuBarExtra = true


    var body: some Scene {
        WindowGroup {
            ContentView()
        }
        MenuBarExtra(
            "App Menu Bar Extra", systemImage: "star",
            isInserted: $showMenuBarExtra)
        {
            StatusMenu()
        }
    }
}
Or alternatively, to create a utility app that only shows in the menu bar.
@main
struct UtilityApp: App {
    var body: some Scene {
        MenuBarExtra("Utility App", systemImage: "hammer") {
            AppMenu()
        }
    }
}
An app that only shows in the menu bar will be automatically terminated if the user removes the extra from the menu bar.
For apps that only show in the menu bar, a common behavior is for the app to not display its icon in either the Dock or the application switcher. To enable this behavior, set the LSUIElement flag in your app’s Information Property List file to true.
For more complex or data rich menu bar extras, you can use the window style, which displays a popover-like window from the menu bar icon that contains standard controls. You define the layout and contents of those controls with the content that you provide:
MenuBarExtra("Utility App", systemImage: "hammer") {
    ScrollView {
        LazyVGrid(...)
    }
}
.menuBarExtraStyle(.window)
Topics
Creating a menu bar extra
init(LocalizedStringKey, content: () -> Content)
Creates a menu bar extra with a key for a localized string to use as the label. The extra defines the primary scene of an App.
Available when Label is Text and Content conforms to View.
init<S>(S, content: () -> Content)
Creates a menu bar extra with a string to use as the label. The item defines the primary scene of an App.
Available when Label is Text and Content conforms to View.
init(content: () -> Content, label: () -> Label)
Creates a menu bar extra that will be displayed in the system menu bar, and defines the primary scene of an App.
init(LocalizedStringKey, isInserted: Binding<Bool>, content: () -> Content)
Creates a menu bar extra with a key for a localized string to use as the label. The item will be displayed in the system menu bar when the specified binding is set to true. If the user removes the item from the menu bar, the binding will be set to false.
Available when Label is Text and Content conforms to View.
init<S>(S, isInserted: Binding<Bool>, content: () -> Content)
Creates a menu bar extra with a string to use as the label. The item will be displayed in the system menu bar when the specified binding is set to true. If the user removes the item from the menu bar, the binding will be set to false.
Available when Label is Text and Content conforms to View.
init(isInserted: Binding<Bool>, content: () -> Content, label: () -> Label)
Creates a menu bar extra. The item will be displayed in the system menu bar when the specified binding is set to true. If the user removes the item from the menu bar, the binding will be set to false.
Creating a menu bar extra with a named image
init(LocalizedStringKey, image: String, content: () -> Content)
Creates a menu bar extra with a named image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
init(LocalizedStringKey, image: String, isInserted: Binding<Bool>, content: () -> Content)
Creates a menu bar extra with a named image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
init<S>(S, image: String, content: () -> Content)
Creates a menu bar extra with a named image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
init<S>(S, image: String, isInserted: Binding<Bool>, content: () -> Content)
Creates a menu bar extra with a named image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
Creating a menu bar extra with a system image
init(LocalizedStringKey, systemImage: String, content: () -> Content)
Creates a menu bar extra with a system image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
init(LocalizedStringKey, systemImage: String, isInserted: Binding<Bool>, content: () -> Content)
Creates a menu bar extra with a system image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
init<S>(S, systemImage: String, content: () -> Content)
Creates a menu bar extra with a system image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
init<S>(S, systemImage: String, isInserted: Binding<Bool>, content: () -> Content)
Creates a menu bar extra with a system image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
Creating a menu bar extra with an image resource
init(LocalizedStringKey, image: ImageResource, content: () -> Content)
Creates a menu bar extra with an image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
Beta
init(LocalizedStringKey, image: ImageResource, isInserted: Binding<Bool>, content: () -> Content)
Creates a menu bar extra with an image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
Beta
init<S>(S, image: ImageResource, content: () -> Content)
Creates a menu bar extra with an image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
Beta
init<S>(S, image: ImageResource, isInserted: Binding<Bool>, content: () -> Content)
Creates a menu bar extra with an image to use as the items label. The provided title will be used by the accessibility system.
Available when Label is Label<Text, Image> and Content conforms to View.
Beta
Relationships
Conforms To
Scene
Sendable
See Also
Creating a menu bar extra
func menuBarExtraStyle<S>(S) -> some Scene
Sets the style for menu bar extra created by this scene.
protocol MenuBarExtraStyle
A specification for the appearance and behavior of a menu bar extra scene.
Current page is MenuBarExtra
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

