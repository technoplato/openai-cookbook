https://developer.apple.com/documentation/swiftui/scene/keyboardshortcut(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Deprecated symbols
M
func modelContainer(for: PersistentModel.Type, inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some Scene
Beta
M
func modelContainer(for: [PersistentModel.Type], inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some Scene
Beta
M
func modelContainer(ModelContainer) -> some Scene
Beta
M
func modelContext(ModelContext) -> some Scene
Beta
Configuring a data model
M
func windowToolbarStyle<S>(S) -> some Scene
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some Scene
M
func commandsReplaced<Content>(content: () -> Content) -> some Scene
M
func commandsRemoved() -> some Scene
M
func commands<Content>(content: () -> Content) -> some Scene
Setting commands
M
func defaultAppStorage(UserDefaults) -> some Scene
Managing app storage
M
func backgroundTask<D, R>(BackgroundTask<D, R>, action: (D) async -> R) -> some Scene
Creating background tasks
Documentation
Open Menu
Swift
Instance Method
keyboardShortcut(_:)
Defines a keyboard shortcut for opening new scene windows.
macOS 13.0+
func keyboardShortcut(_ shortcut: KeyboardShortcut?) -> some Scene
Parameters
shortcut
The keyboard shortcut for presenting the scene, or nil.
Return Value
A scene that can be presented with a keyboard shortcut.
Discussion
A scene’s keyboard shortcut is bound to the command it adds for creating new windows (in the case of WindowGroup and DocumentGroup) or bringing a singleton window forward (in the case of Window and, on macOS, Settings). Pressing the keyboard shortcut is equivalent to selecting the menu command.
In cases where a command already has a keyboard shortcut, the scene’s keyboard shortcut is used instead. For example, WindowGroup normally creates a File > New Window menu command whose keyboard shortcut is ⌘N. The following code changes it to something based on dynamic state:
@main
struct Notes: App {
    @State private var newWindowShortcut: KeyboardShortcut? = ...


    var body: some Scene {
        WindowGroup {
            ContentView($newWindowShortcut)
        }
        .keyboardShortcut(newWindowShortcut)
    }
}
If shortcut is nil, the scene’s presentation command will not be associated with a keyboard shortcut, even if SwiftUI normally assigns one automatically.
See Also
Setting commands
func commands<Content>(content: () -> Content) -> some Scene
Adds commands to the scene.
func commandsRemoved() -> some Scene
Removes all commands defined by the modified scene.
func commandsReplaced<Content>(content: () -> Content) -> some Scene
Replaces all commands defined by the modified scene with the commands from the builder.
func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some Scene
Defines a keyboard shortcut for opening new scene windows.
Current page is keyboardShortcut(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

