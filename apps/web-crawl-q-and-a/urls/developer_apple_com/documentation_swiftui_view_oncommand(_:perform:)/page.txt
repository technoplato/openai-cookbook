https://developer.apple.com/documentation/swiftui/view/oncommand(_:perform:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func touchBarItemPrincipal(Bool) -> some View
M
func touchBar<Content>(TouchBar<Content>) -> some View
M
func touchBar<Content>(content: () -> Content) -> some View
Managing Touch Bar input
E
DigitalCrownRotationalSensitivity
S
DigitalCrownEvent
M
func digitalCrownRotation<V>(Binding<V>, from: V, through: V, by: V.Stride?, sensitivity: DigitalCrownRotationalSensitivity, isContinuous: Bool, isHapticFeedbackEnabled: Bool) -> some View
func digitalCrownRotation<V>(detent: Binding<V>, from: V, through: V, by: V.Stride, sensitivity: DigitalCrownRotationalSensitivity, isContinuous: Bool, isHapticFeedbackEnabled: Bool, onChange: (DigitalCrownEvent) -> Void, onIdle: () -> Void) -> some View
func digitalCrownRotation<V>(detent: Binding<V>, from: V, through: V, by: V.Stride, sensitivity: DigitalCrownRotationalSensitivity, isContinuous: Bool, isHapticFeedbackEnabled: Bool, onChange: (DigitalCrownEvent) -> Void, onIdle: () -> Void) -> some View
func digitalCrownRotation<V>(Binding<V>, onChange: (DigitalCrownEvent) -> Void, onIdle: () -> Void) -> some View
func digitalCrownRotation<V>(Binding<V>, from: V, through: V, sensitivity: DigitalCrownRotationalSensitivity, isContinuous: Bool, isHapticFeedbackEnabled: Bool, onChange: (DigitalCrownEvent) -> Void, onIdle: () -> Void) -> some View
M
func onPlayPauseCommand(perform: (() -> Void)?) -> some View
M
func onExitCommand(perform: (() -> Void)?) -> some View
M
func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View
M
func onDeleteCommand(perform: (() -> Void)?) -> some View
M
func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View
Responding to commands
S
SubmitLabel
M
func submitLabel(SubmitLabel) -> some View
Documentation
Open Menu
Swift
Instance Method
onCommand(_:perform:)
Adds an action to perform in response to the given selector.
macOS 10.15+
func onCommand(
    _ selector: Selector,
    perform action: (() -> Void)?
) -> some View
Parameters
selector
The selector to register for action.
action
The action to perform. If action is nil, command keeps its association with this view but doesn’t trigger.
Return Value
A view that triggers action when the command occurs.
Discussion
This view or one of the views it contains must be in focus in order for the action to trigger. Other actions for the same command on views closer to the view in focus take priority, potentially overriding this action.
See Also
Responding to commands
func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View
Adds an action to perform in response to a move command, like when the user presses an arrow key on a Mac keyboard, or taps the edge of the Siri Remote when controlling an Apple TV.
func onDeleteCommand(perform: (() -> Void)?) -> some View
Adds an action to perform in response to the system’s Delete command, or pressing either the ⌫ (backspace) or ⌦ (forward delete) keys while the view has focus.
func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View
Steps a value through a range in response to page up or page down commands.
func onExitCommand(perform: (() -> Void)?) -> some View
Sets up an action that triggers in response to receiving the exit command while the view has focus.
func onPlayPauseCommand(perform: (() -> Void)?) -> some View
Adds an action to perform in response to the system’s Play/Pause command.
enum MoveCommandDirection
Specifies the direction of an arrow key movement.
Current page is onCommand(_:perform:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

