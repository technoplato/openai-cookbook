https://developer.apple.com/documentation/swiftui/graphicscontext/filter/colormatrix(_:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func concatenate(CGAffineTransform)
M
func translateBy(x: CGFloat, y: CGFloat)
M
func rotate(by: Angle)
M
func scaleBy(x: CGFloat, y: CGFloat)
Applying transforms
S
GraphicsContext.ShadowOptions
S
GraphicsContext.BlurOptions
static func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat, blendMode: GraphicsContext.BlendMode, options: GraphicsContext.ShadowOptions) -> GraphicsContext.Filter
M
static func grayscale(Double) -> GraphicsContext.Filter
M
static func hueRotation(Angle) -> GraphicsContext.Filter
M
static func colorMultiply(Color) -> GraphicsContext.Filter
M
static func colorInvert(Double) -> GraphicsContext.Filter
M
static func saturation(Double) -> GraphicsContext.Filter
Manipulating color
M
static func contrast(Double) -> GraphicsContext.Filter
M
static func brightness(Double) -> GraphicsContext.Filter
Documentation
Open Menu
Swift
Type Method
colorMatrix(_:)
Returns a filter that multiplies by a given color matrix.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
static func colorMatrix(_ matrix: ColorMatrix) -> GraphicsContext.Filter
Parameters
matrix
A ColorMatrix instance used by the filter.
Return Value
A filter that transforms color using the given matrix.
Discussion
This filter is equivalent to the feColorMatrix filter primitive defined by the Scalable Vector Graphics (SVG) specification.
The filter creates the output color [R', G', B', A'] at each pixel from an input color [R, G, B, A] by multiplying the input color by the square matrix formed by the first four columns of the ColorMatrix, then adding the fifth column to the result:
R' = r1 ✕ R + r2 ✕ G + r3 ✕ B + r4 ✕ A + r5
G' = g1 ✕ R + g2 ✕ G + g3 ✕ B + g4 ✕ A + g5
B' = b1 ✕ R + b2 ✕ G + b3 ✕ B + b4 ✕ A + b5
A' = a1 ✕ R + a2 ✕ G + a3 ✕ B + a4 ✕ A + a5
See Also
Manipulating color
static func saturation(Double) -> GraphicsContext.Filter
Returns a filter that applies a saturation adjustment.
static func colorInvert(Double) -> GraphicsContext.Filter
Returns a filter that inverts the color of their results.
static func colorMultiply(Color) -> GraphicsContext.Filter
Returns a filter that multiplies each color component by the matching component of a given color.
static func hueRotation(Angle) -> GraphicsContext.Filter
Returns a filter that applies a hue rotation adjustment.
static func grayscale(Double) -> GraphicsContext.Filter
Returns a filter that applies a grayscale adjustment.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is colorMatrix(_:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

