https://developer.apple.com/documentation/swiftui/view/pastedestination(for:action:validator:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Previews in Xcode
Tool support
Technology-specific views
WatchKit integration
UIKit integration
AppKit integration
Framework integration
func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View
M
func cuttable<T>(for: T.Type, action: () -> [T]) -> some View
M
func copyable<T>(() -> [T]) -> some View
Copying transferable items
Clipboard
Input events
Gestures
Event handling
Scroll views
Documentation
Open Menu
Swift
Instance Method
pasteDestination(for:action:validator:)
Specifies an action that adds validated items to a view in response to the system’s Paste command.
macOS 13.0+
func pasteDestination<T>(
    for payloadType: T.Type = T.self,
    action: @escaping ([T]) -> Void,
    validator: @escaping ([T]) -> [T] = { $0 }
) -> some View where T : Transferable
Parameters
payloadType
The type of data that the paste destination accepts. The type must conform to the Transferable protocol.
action
The action to perform when someone uses the system’s Paste command to paste one or more items of the payload type. The closure takes one parameter, which is the array of items to paste.
validator
A closure that you implement to validate the data to paste. SwiftUI calls this before it calls the action closure, and passes in an array of items to validate. Inspect the items, and return an array that includes only those from the input array that you consider valid. The array that you return from this closure becomes the input to the action closure. If you return an empty array, SwiftUI doesn’t call the action closure.
Return Value
A view that people can paste into using the system Paste command.
Discussion
Use this modifier to paste one or more items into a view from the Clipboard when someone issues a Paste command. People issue a Paste command by choosing Edit > Paste from the app’s menu, or by using the Command-V keyboard shortcut. The system enables the Paste command for your app when the view in focus provides a paste destination.
For example, the following code enables people to paste bird names into a list:
struct PasteDestinationExample: View {
    @State private var birds: [String] = []
    @State private var selection: Set<String> = []


    let knownBirds = ["owl", "parrot", "swift",
                      "sparrow", "robin", "bluebird"]


    var body: some View {
        List(birds, id: \.self, selection: $selection) {
            Text($0)
        }
        .pasteDestination(for: String.self) { values in
            birds.append(contentsOf: values)
        } validator: { values in
            values.filter { knownBirds.contains($0) }
        }
    }
}
The paste destination handles only pasted content with a type that matches the payloadType that you specify. The list in the above example only accepts strings.
Use the validator closure to restrict the pasted content to items that make sense in the context of the view. The above example allows people to paste only strings that match one of a known list of bird names because the list is meant to contain only birds. You can omit the final closure if you don’t need to perform any validation.
Note
To enable people to paste using a custom action — like from a context menu item — rather than using the system Paste command, access the Clipboard directly using an NSPasteboard or a UIPasteboard instance.
See Also
Copying transferable items
func copyable<T>(() -> [T]) -> some View
Specifies a list of items to copy in response to the system’s Copy command.
func cuttable<T>(for: T.Type, action: () -> [T]) -> some View
Specifies an action that moves items to the Clipboard in response to the system’s Cut command.
Current page is pasteDestination(for:action:validator:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

