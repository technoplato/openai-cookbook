https://developer.apple.com/documentation/swiftui/accessibilityrotorentrySkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Creating rotors for text ranges
M
func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
M
func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
M
func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View
Creating rotors with a label
M
func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
M
func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View
S
AccessibilityRotorContentBuilder
r
P
AccessibilityRotorContent
M
func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View
M
func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View
M
func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View
Creating rotors
Accessible navigation
Accessible descriptions
Documentation
Open Menu
Swift
Structure
AccessibilityRotorEntry
A struct representing an entry in an Accessibility Rotor.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
struct AccessibilityRotorEntry<ID> where ID : Hashable
Overview
An Accessibility Rotor is a shortcut for Accessibility users to quickly navigate to specific elements of the user interface, and optionally specific ranges of text within those elements.
An entry in a Rotor may contain a label to identify the entry to the user, and identifier used to determine which Accessibility element the Rotor entry should navigate to, as well as an optional range used for entries that navigate to a specific position in the text of their associated Accessibility element. An entry can also specify a handler to be called before the entry is navigated to, to do any manual work needed to bring the Accessibility element on-screen.
In the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs.
// `messages` is a list of `Identifiable` `Message`s.


ScrollView {
    LazyVStack {
        ForEach(messages) { message in
            MessageView(message)
        }
    }
}
.accessibilityElement(children: .contain)
.accessibilityRotor("VIPs") {
    // Not all the `MessageView`s are generated at once, but the model
    // knows about all the messages.
    ForEach(messages) { message in
        // If the Message is from a VIP, make a Rotor entry for it.
        if message.isVIP {
            AccessibilityRotorEntry(message.subject, id: message.id)
        }
    }
}
An entry may also be created using an optional namespace, for situations where there are multiple Accessibility elements within a ForEach iteration or where a ScrollView is not present. In this case, the prepare closure may be needed in order to scroll the element into position using ScrollViewReader. The same namespace should be passed to calls to accessibilityRotorEntry(id:in:) to tag the Accessibility elements associated with this entry.
In the following example, a Message application creates a Rotor allowing users to navigate to specifically the messages originating from VIPs. The Rotor entries are associated with the content text of the message, which is one of the two views within the ForEach that generate Accessibility elements. That view is tagged with accessibilityRotorEntry(id:in:) so that it can be found by the AccessibilityRotorEntry, and ScrollViewReader is used with the prepare closure to scroll it into position.
struct MessageListView: View {
    @Namespace var namespace


    var body: some View {
        ScrollViewReader { scroller in
             ScrollView {
                LazyVStack {
                    ForEach(allMessages) { message in
                        VStack {
                            Text(message.subject)
                            // Tag this `Text` as an element associated
                            // with a Rotor entry.
                            Text(message.content)
                                .accessibilityRotorEntry(
                                    "\(message.id)_content",
                                    in: namespace
                                )
                        }
                    }
                }
            }
            .accessibilityElement(children: .contain)
            .accessibilityRotor("VIP Messages") {
                ForEach(vipMessages) { vipMessage in
                    // The Rotor entry points to a specific ID we
                    // defined within a given `ForEach` iteration,
                    // not to the entire `ForEach` iteration.
                    AccessibilityRotorEntry(vipMessage.subject,
                        id: "\(vipMessage.id)_content", in: namespace)
                    {
                        // But the ID we give to `ScrollViewReader`
                        // matches the one used in the `ForEach`, which
                        // is the identifier for the whole iteration
                        // and what `ScrollViewReader` requires.
                        scroller.scrollTo(vipMessage.id)
                    }
                }
            }
        }
    }
}
Topics
Creating a rotor entry
init(LocalizedStringKey, textRange: Range<String.Index>, prepare: (() -> Void))
Create a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor.
init<L>(L, textRange: Range<String.Index>, prepare: (() -> Void))
Create a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor.
init(Text?, textRange: Range<String.Index>, prepare: (() -> Void))
Create a Rotor entry with a specific label and range. This Rotor entry will be associated with the Accessibility element that owns the Rotor.
Creating a rotor entry with an identifier
init(LocalizedStringKey, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))
Create a Rotor entry with a specific label and identifier, with an optional range.
init<L>(L, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))
Create a Rotor entry with a specific label and identifier, with an optional range.
init(Text, id: ID, textRange: Range<String.Index>?, prepare: (() -> Void))
Create a Rotor entry with a specific label and identifier, with an optional range.
Creating an identified rotor entry in a namespace
init(LocalizedStringKey, id: ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))
Create a Rotor entry with a specific label, identifier and namespace, and with an optional range.
init<L>(L, ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))
Create a Rotor entry with a specific label, identifier and namespace, and with an optional range.
init(Text, id: ID, in: Namespace.ID, textRange: Range<String.Index>?, prepare: (() -> Void))
Create a Rotor entry with a specific label, identifier and namespace, and with an optional range.
Relationships
Conforms To
AccessibilityRotorContent
Conforms when ID conforms to Hashable.
Sendable
See Also
Creating rotors
func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View
Create an Accessibility Rotor with the specified user-visible label, and entries generated from the content closure.
func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View
Create an Accessibility Rotor with the specified user-visible label, and entries generated from the content closure.
func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View
Create an Accessibility Rotor with the specified user-visible label, and entries generated from the content closure.
protocol AccessibilityRotorContent
Content within an accessibility rotor.
Available when ID conforms to Hashable.
struct AccessibilityRotorContentBuilder
Result builder you use to generate rotor entry content.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is AccessibilityRotorEntry
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

