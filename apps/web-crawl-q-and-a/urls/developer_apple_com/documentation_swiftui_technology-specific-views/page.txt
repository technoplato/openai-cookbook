https://developer.apple.com/documentation/swiftui/technology-specific-viewsSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
SpriteView
S
SceneView
S
Chart
Creating graphics
S
DeviceActivityReport
Reporting on device activity
M
func familyActivityPicker(headerText: String?, footerText: String?, isPresented: Binding<Bool>, selection: Binding<FamilyActivitySelection>) -> some View
func familyActivityPicker(isPresented: Binding<Bool>, selection: Binding<FamilyActivitySelection>) -> some View
WatchKit integration
UIKit integration
AppKit integration
Framework integration
Accessible navigation
Accessible descriptions
Accessible controls
Accessible appearance
Documentation
Open Menu
Swift
Technology-specific views
Use SwiftUI views that other Apple frameworks provide.
Overview
To access SwiftUI views that another framework defines, import both SwiftUI and the other framework into the file where you use the view. You can find the framework to import by looking at the availability information on the view’s documentation page.
For example, to use the Map view in your app, import both SwiftUI and MapKit.
import SwiftUI
import MapKit


struct MyMapView: View {
    // Center the map on Joshua Tree National Park.
    @State private var region = MKCoordinateRegion(
            center: CLLocationCoordinate2D(latitude: 34.011_286, longitude: -116.166_868),
            span: MKCoordinateSpan(latitudeDelta: 0.2, longitudeDelta: 0.2)
        )


    var body: some View {
        Map(coordinateRegion: $region)
    }
}
For design guidance, see All technologies in the Human Interface Guidelines.
Topics
Accessing Apple Pay and Wallet
struct PayWithApplePayButton
struct AddPassToWalletButton
struct VerifyIdentityWithWalletButton
A view that displays a button for identity verification.
struct AsyncShareablePassConfiguration
Authorizing and authenticating
struct LocalAuthenticationView
A SwiftUI view that displays an authentication interface.
struct SignInWithAppleButton
The view that creates the Sign in with Apple button for display.
func signInWithAppleButtonStyle(SignInWithAppleButton.Style) -> some View
Sets the style used for displaying the control (see SignInWithAppleButton.Style).
var authorizationController: AuthorizationController
A value provided in the SwiftUI environment that views can use to perform authorization requests.
var webAuthenticationSession: WebAuthenticationSession
A value provided in the SwiftUI environment that views can use to authenticate a user through a web service.
Configuring Family Sharing
struct FamilyActivityPicker
A view in which users specify applications, web domains, and categories without revealing their choices to the app.
func familyActivityPicker(isPresented: Binding<Bool>, selection: Binding<FamilyActivitySelection>) -> some View
Presents an activity picker view as a sheet.
func familyActivityPicker(headerText: String?, footerText: String?, isPresented: Binding<Bool>, selection: Binding<FamilyActivitySelection>) -> some View
Presents an activity picker view as a sheet.
Reporting on device activity
struct DeviceActivityReport
A view that reports the user’s application, category, and web domain activity in a privacy-preserving way.
Creating graphics
struct Chart
A SwiftUI view that displays a chart.
struct SceneView
A SwiftUI view for displaying 3D SceneKit content.
struct SpriteView
A SwiftUI view that renders a SpriteKit scene.
Getting location information
struct LocationButton
A SwiftUI button that grants one-time location authorization.
struct Map
A view that displays an embedded map interface.
Displaying media
struct CameraView
A SwiftUI view into which a video stream or an image snapshot is rendered.
struct NowPlayingView
A view that displays the system’s Now Playing interface so that the user can control audio.
struct VideoPlayer
A view that displays content from a player and a native user interface to control playback.
Selecting photos
struct PhotosPicker
A view that displays a Photos picker for choosing assets from the photo library.
func photosPicker(isPresented: Binding<Bool>, selection: Binding<PhotosPickerItem?>, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy) -> some View
Presents a Photos picker that selects a PhotosPickerItem.
func photosPicker(isPresented: Binding<Bool>, selection: Binding<PhotosPickerItem?>, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy, photoLibrary: PHPhotoLibrary) -> some View
Presents a Photos picker that selects a PhotosPickerItem from a given photo library.
func photosPicker(isPresented: Binding<Bool>, selection: Binding<[PhotosPickerItem]>, maxSelectionCount: Int?, selectionBehavior: PhotosPickerSelectionBehavior, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy) -> some View
Presents a Photos picker that selects a collection of PhotosPickerItem.
func photosPicker(isPresented: Binding<Bool>, selection: Binding<[PhotosPickerItem]>, maxSelectionCount: Int?, selectionBehavior: PhotosPickerSelectionBehavior, matching: PHPickerFilter?, preferredItemEncoding: PhotosPickerItem.EncodingDisambiguationPolicy, photoLibrary: PHPhotoLibrary) -> some View
Presents a Photos picker that selects a collection of PhotosPickerItem from a given photo library.
func photosPickerAccessoryVisibility(Visibility, edges: Edge.Set) -> some View
Sets the accessory visibility of the Photos picker. Accessories include anything between the content and the edge, like the navigation bar or the sidebar.
Beta
func photosPickerDisabledCapabilities(PHPickerCapabilities) -> some View
Disables capabilities of the Photos picker.
Beta
func photosPickerStyle(PhotosPickerStyle) -> some View
Sets the mode of the Photos picker.
Beta
Previewing content
func quickLookPreview(Binding<URL?>) -> some View
Presents a Quick Look preview of the contents of a single URL.
func quickLookPreview<Items>(Binding<Items.Element?>, in: Items) -> some View
Presents a Quick Look preview of the URLs you provide.
Interacting with networked devices
struct DevicePicker
A SwiftUI view that displays other devices on the network, and creates an encrypted connection to a copy of your app running on that device.
Configuring a Live Activity
func activitySystemActionForegroundColor(Color?) -> some View
The text color for the auxiliary action button that the system shows next to a Live Activity on the Lock Screen.
func activityBackgroundTint(Color?) -> some View
Sets the tint color for the background of a Live Activity that appears on the Lock Screen.
var isActivityFullscreen: Bool
A Boolean value that indicates whether the Live Activity appears in a full-screen presentation.
Interacting with the App Store and Apple Music
func appStoreOverlay(isPresented: Binding<Bool>, configuration: () -> SKOverlay.Configuration) -> some View
Presents a StoreKit overlay when a given condition is true.
func manageSubscriptionsSheet(isPresented: Binding<Bool>) -> some View
func refundRequestSheet(for: Transaction.ID, isPresented: Binding<Bool>, onDismiss: ((Result<Transaction.RefundRequestStatus, Transaction.RefundRequestError>) -> ())?) -> some View
Display the refund request sheet for the given transaction.
func offerCodeRedemption(isPresented: Binding<Bool>, onCompletion: (Result<Void, Error>) -> Void) -> some View
Presents a sheet that enables users to redeem subscription offer codes that you configure in App Store Connect.
func musicSubscriptionOffer(isPresented: Binding<Bool>, options: MusicSubscriptionOffer.Options, onLoadCompletion: ((Error)?) -> Void) -> some View
Initiates the process of presenting a sheet with subscription offers for Apple Music when the isPresented binding is true.
func currentEntitlementTask(for: String, priority: TaskPriority, action: (EntitlementTaskState<VerificationResult<Transaction>?>) async -> ()) -> some View
Declares the view as dependent on the entitlement of an in-app purchase product for productID and returns a modified view.
Beta
func inAppPurchaseOptions(((Product) async -> Set<Product.PurchaseOption>)?) -> some View
Add a function to call before initiating a purchase from an in-app store within view, providing a set of options for the purchase.
Beta
func manageSubscriptionsSheet(isPresented: Binding<Bool>, subscriptionGroupID: String) -> some View
Beta
func onInAppPurchaseCompletion(perform: ((Product, Result<Product.PurchaseResult, Error>) async -> ())?) -> some View
Add an action to perform when a purchase initiated from an in-app store within this view completes.
Beta
func onInAppPurchaseStart(perform: ((Product) async -> ())?) -> some View
Add an action to perform when a user triggers the purchase button on an in-app store within this view.
Beta
func productIconBorder() -> some View
Adds a standard border to an icon used by an ProductView .
Beta
func productViewStyle(some ProductViewStyle) -> some View
Sets the style for in-app store products within a view.
Beta
func storeButton(Visibility, for: StoreButtonKind...) -> some View
Specifies the visibility of certain kinds of auxiliary buttons used by StoreView or SubscriptionStoreView instances within the view.
Beta
func storeProductTask(for: Product.ID, priority: TaskPriority, action: (Product.TaskState) async -> ()) -> some View
Declares the view as dependent on the in-app purchase product for id and returns a modified view.
Beta
func storeProductsTask(for: some Collection<String> & Equatable & Sendable, priority: TaskPriority, action: (Product.CollectionTaskState) async -> ()) -> some View
Declares the view as dependent on a collection of in-app purchase products and returns a modified view.
Beta
func subscriptionStatusTask(for: String, priority: TaskPriority, action: (EntitlementTaskState<[Product.SubscriptionInfo.Status]>) async -> ()) -> some View
Declares the view as dependent on the status of an auto-renewable subscription group for groupID and returns a modified view.
Beta
func subscriptionStoreButtonLabel(SubscriptionStoreButtonLabel) -> some View
Configures in-app subscription store instances within a view to use a certain button label.
Beta
func subscriptionStoreControlIcon(icon: (Product, Product.SubscriptionInfo) -> some View) -> some View
Set a view to use to decorate individual subscription options within a SubscriptionStoreView.
Beta
func subscriptionStoreControlStyle(some SubscriptionStoreControlStyle) -> some View
Sets the control style for in-app subscription stores within a view.
Beta
func subscriptionStorePickerItemBackground(some ShapeStyle) -> some View
Sets the background style for picker items of SubscriptionStoreView instances within this view.
Beta
func subscriptionStorePolicyDestination(for: SubscriptionStorePolicyKind, destination: () -> some View) -> some View
Configures a view as the destination when someone chooses to view the corresponding policy in a SubscriptionStoreView within this view.
Beta
func subscriptionStorePolicyDestination(url: URL, for: SubscriptionStorePolicyKind) -> some View
Configures a URL as the destination when someone chooses to view the corresponding policy in a SubscriptionStoreView within this view.
Beta
func subscriptionStorePolicyForegroundStyle(some ShapeStyle) -> some View
Sets the style for terms of service or privacy policy buttons created by SubscriptionStoreView within a view.
Beta
func subscriptionStorePolicyForegroundStyle(some ShapeStyle, some ShapeStyle) -> some View
Sets the style for terms of service and privacy policy buttons created by SubscriptionStoreView within a view.
Beta
func subscriptionStoreSignInAction((() -> ())?) -> some View
Add an action to perform when someone triggers the sign in button on a SubscriptionStoreView within this view.
Beta
func subscriptionStoreControlBackground(SubscriptionStoreControlBackground) -> some View
Set the control background style for SubscriptionStoreView instances within the view.
Beta
func subscriptionStoreControlBackground(some ShapeStyle) -> some View
Set the control background style for SubscriptionStoreView instances within the view.
Beta
Accessing health data
func healthDataAccessRequest(store: HKHealthStore, objectType: HKObjectType, predicate: NSPredicate?, trigger: some Equatable, completion: (Result<Bool, Error>) -> Void) -> some View
Beta
func healthDataAccessRequest(store: HKHealthStore, readTypes: Set<HKObjectType>, trigger: some Equatable, completion: (Result<Bool, Error>) -> Void) -> some View
Beta
func healthDataAccessRequest(store: HKHealthStore, shareTypes: Set<HKSampleType>, readTypes: Set<HKObjectType>?, trigger: some Equatable, completion: (Result<Bool, Error>) -> Void) -> some View
Requests authorization to read and share the given HealthKit types Parameters: store: Your app’s HKHealthStore, for which authorization will be requested shareTypes: An optional set containing the data types you want to share readTypes: An optional set containing the data types you want to read trigger: A generic equatable value; change this value to initiate a new request completion: A block that will be passed success or error when the request completes.
Beta
See Also
Framework integration
API Reference
AppKit integration
Add AppKit views to your SwiftUI app, or use SwiftUI views in your AppKit app.
API Reference
UIKit integration
Add UIKit views to your SwiftUI app, or use SwiftUI views in your UIKit app.
API Reference
WatchKit integration
Add WatchKit views to your SwiftUI app, or use SwiftUI views in your WatchKit app.
Current page is Technology-specific views
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

