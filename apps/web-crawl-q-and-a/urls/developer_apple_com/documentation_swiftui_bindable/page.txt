https://developer.apple.com/documentation/swiftui/bindableSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func onReceive<P>(P, perform: (P.Output) -> Void) -> some View
M
func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View
Beta
M
func onChange<V>(of: V, initial: Bool, () -> Void) -> some View
Beta
Responding to data changes
r
P
ObservableObject
S
ObservedObject
S
StateObject
S
State
Managing user interface state
Creating and sharing view state
Model data
Data and storage
App extensions
Search
Toolbars
Documentation
Open Menu
Swift
Structure
Bindable
A property wrapper type that supports creating bindings to the mutable properties of observable objects.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
@dynamicMemberLookup @propertyWrapper
struct Bindable<Value>
Overview
Use this property wrapper to create bindings to mutable properties of a data model object that conforms to the doc://com.apple.documentation/documentation/Observation/Observable-swift.protocol protocol. For example, the following code wraps the book input with @Bindable. Then it uses a TextField to change the title property of a book, and a Toggle to change the isAvailable property, using the $ syntax to pass a binding for each property to those controls.
@Observable
class Book: Identifiable {
    var title = "Sample Book Title"
    var isAvailable = true
}


struct BookEditView: View {
    @Bindable var book: Book
    @Environment(\.dismiss) private var dismiss


    var body: some View {
        Form {
            TextField("Title", text: $book.title)


            Toggle("Book is available", isOn: $book.isAvailable)


            Button("Close") {
                dismiss()
            }
        }
    }
}
You can use the Bindable property wrapper on properties and variables to an doc://com.apple.documentation/documentation/Observation/Observable-swift.protocol object. This includes global variables, properties that exists outside of SwiftUI types, or even local variables. For example, you can create a @Bindable variable within a view’s body:
struct LibraryView: View {
    @State private var books = [Book(), Book(), Book()]


    var body: some View {
        List(books) { book in
            @Bindable var book = book
            TextField("Title", text: $book.title)
        }
    }
}
The @Bindable variable book provides a binding that connects TextField to the title property of a book so that a person can make changes directly to the model data.
Use this same approach when you need a binding to a property of an observable object stored in a view’s environment. For example, the following code uses the Environment property wrapper to retrieve an instance of the observable type Book. Then the code creates a @Bindable variable book and passes a binding for the title property to a TextField using the $ syntax.
struct TitleEditView: View {
    @Environment(Book.self) private var book


    var body: some View {
        @Bindable var book = book
        TextField("Title", text: $book.title)
    }
}
Topics
Creating a bindable value
init(Value)
Creates a bindable object from an observable object.
Available when Value conforms to Observable.
init(wrappedValue: Value)
Creates a bindable object from an observable object.
Available when Value conforms to Observable.
init(projectedValue: Bindable<Value>)
Creates a bindable from the value of another bindable.
Available when Value conforms to Observable.
Getting the value
var wrappedValue: Value
The wrapped object.
var projectedValue: Bindable<Value>
The bindable wrapper for the object that creates bindings to its properties using dynamic member lookup.
subscript<Subject>(dynamicMember _: ReferenceWritableKeyPath<Value, Subject>) -> Binding<Subject>
Returns a binding to the value of a given key path.
Relationships
Conforms To
Identifiable
Sendable
See Also
Creating and sharing view state
Managing user interface state
Encapsulate view-specific data within your app’s view hierarchy to make your views reusable.
struct State
A property wrapper type that can read and write a value managed by SwiftUI.
struct Binding
A property wrapper type that can read and write a value owned by a source of truth.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is Bindable
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

