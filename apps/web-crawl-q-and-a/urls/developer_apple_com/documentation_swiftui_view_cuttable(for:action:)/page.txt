https://developer.apple.com/documentation/swiftui/view/cuttable(for:action:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Tool support
Technology-specific views
WatchKit integration
UIKit integration
AppKit integration
Framework integration
Accessible navigation
func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View
M
func copyable<T>(() -> [T]) -> some View
Copying transferable items
Clipboard
Input events
Gestures
Event handling
Scroll views
View groupings
Documentation
Open Menu
Swift
Instance Method
cuttable(for:action:)
Specifies an action that moves items to the Clipboard in response to the system’s Cut command.
macOS 13.0+
func cuttable<T>(
    for payloadType: T.Type = T.self,
    action: @escaping () -> [T]
) -> some View where T : Transferable
Parameters
payloadType
The type of items to cut.
action
A closure that you implement to delete the selected items from the collection, and return them for addition to the Clipboard. The items must conform to the Transferable protocol.
Return Value
A view that sends one or more items to the Clipboard in response to a Cut command.
Discussion
Use this modifier to remove one or more items from a collection of items and then move the items to the Clipboard when someone issues a Cut command. People issue a Cut command by choosing Edit > Cut from the app’s menu, or by using the Command-X keyboard shortcut. The system enables the Cut command for your app when it detects cuttable content.
For example, the following code enables people to remove bird names from a list of birds:
struct CuttableExample: View {
    @State private var birds = ["owl", "parrot", "swift"]
    @State private var selection: Set<String> = []


    var body: some View {
        List(birds, id: \.self, selection: $selection) {
            Text($0)
        }
        .cuttable(for: String.self) {
            for bird in selection {
                birds.removeAll(where: { $0 == bird })
            }
            return Array(selection)
        }
    }
}
When someone selects “owl” and issues a Cut command, the action closure removes the selected item from the list and returns it. In response, SwiftUI moves it to the Clipboard. If you want to copy the item without removing it, use the copyable(_:) modifier instead.
Note
To enable people to cut using a custom action — like from a context menu item — rather than using the system Cut command, update the Clipboard directly using an NSPasteboard or a UIPasteboard instance.
See Also
Copying transferable items
func copyable<T>(() -> [T]) -> some View
Specifies a list of items to copy in response to the system’s Copy command.
func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View
Specifies an action that adds validated items to a view in response to the system’s Paste command.
Current page is cuttable(for:action:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

