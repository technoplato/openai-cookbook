https://developer.apple.com/documentation/swiftui/view-stateSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func defaultAppStorage(UserDefaults) -> some View
Default storage
M
func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View
M
func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View
M
func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View
M
func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View
M
func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View
func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View
func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View
func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View
Presentation modifiers
Search modifiers
Input and event modifiers
Providing interactivity
Graphics and rendering modifiers
Layout modifiers
Style modifiers
Drawing views
Documentation
Open Menu
Swift
State modifiers
Access storage and provide child views with configuration data.
Overview
SwiftUI provides tools for managing data in your app. For example, you can store values and objects in an environment that’s shared among the views in a view hierarchy. Any view that shares the environment — typically all the descendant views of the view that stores the item — can then access the stored item.
For more information about the types that SwiftUI provides to help manage data in your app, see Model data.
Topics
Identity
func tag<V>(V) -> some View
Sets the unique tag value of this view.
func id<ID>(ID) -> some View
Binds a view’s identity to the given proxy value.
func equatable() -> EquatableView<Self>
Prevents the view from updating its child view when its new value is the same as its old value.
Available when Self conforms to Equatable.
Environment values
func environment<T>(T?) -> some View
Sets an observable object of the environment to the given value.
Beta
func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View
Sets the environment value of the specified key path to the given value.
func environmentObject<T>(T) -> some View
Supplies an observable object to a view’s hierarchy.
func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View
Transforms the environment value of the specified key path with the given function.
Preferences
func preference<K>(key: K.Type, value: K.Value) -> some View
Sets a value for the given preference.
func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View
Applies a transformation to a preference value.
func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View
Sets a value for the specified preference key, the value is a function of a geometry value tied to the current coordinate space, allowing readers of the value to convert the geometry to their local coordinates.
func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View
Sets a value for the specified preference key, the value is a function of the key’s current value and a geometry value tied to the current coordinate space, allowing readers of the value to convert the geometry to their local coordinates.
func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View
Adds an action to perform when the specified preference key’s value changes.
func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View
Reads the specified preference value from the view, using it to produce a second view that is applied as the background of the original view.
func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View
Reads the specified preference value from the view, using it to produce a second view that is applied as the background of the original view.
func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View
Reads the specified preference value from the view, using it to produce a second view that is applied as an overlay to the original view.
func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View
Reads the specified preference value from the view, using it to produce a second view that is applied as an overlay to the original view.
Default storage
func defaultAppStorage(UserDefaults) -> some View
The default store used by AppStorage contained within the view.
Configuring a model
func modelContext(ModelContext) -> some View
Sets the model context in this view’s environment.
Beta
func modelContainer(ModelContainer) -> some View
Sets the model container and associated model context in this view’s environment.
Beta
func modelContainer(for: PersistentModel.Type, inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some View
Sets the model container in this view for storing the provided model type, creating a new container if necessary, and also sets a model context for that container in this view’s environment.
Beta
func modelContainer(for: [PersistentModel.Type], inMemory: Bool, isAutosaveEnabled: Bool, isUndoEnabled: Bool, onSetup: (Result<ModelContainer, Error>) -> Void) -> some View
Sets the model container in this view for storing the provided model types, creating a new container if necessary, and also sets a model context for that container in this view’s environment.
Beta
See Also
Providing interactivity
API Reference
Input and event modifiers
Supply actions for a view to perform in response to user input and system events.
API Reference
Search modifiers
Enable people to search for content in your app.
API Reference
Presentation modifiers
Define additional views for the view to present under specified conditions.
Current page is State modifiers
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

