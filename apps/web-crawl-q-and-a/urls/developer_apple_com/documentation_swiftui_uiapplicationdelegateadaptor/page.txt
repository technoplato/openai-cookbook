https://developer.apple.com/documentation/swiftui/uiapplicationdelegateadaptorSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Hello World
Backyard Birds: Building an app with SwiftData and widgets
Food Truck: Building a SwiftUI multiplatform app
Fruta: Building a Feature-Rich App with SwiftUI
r
P
App
Targeting iOS and iPadOS
O
property list key UILaunchScreen
O
property list key UILaunchScreens
Immersive spaces
Documents
Navigation
Modal presentations
Toolbars
Search
App extensions
Documentation
Open Menu
Swift
Structure
UIApplicationDelegateAdaptor
A property wrapper type that you use to create a UIKit app delegate.
iOS 14.0+
iPadOS 14.0+
Mac Catalyst 14.0+
tvOS 14.0+
visionOS 1.0+ Beta
@MainActor @propertyWrapper
struct UIApplicationDelegateAdaptor<DelegateType> where DelegateType : NSObject, DelegateType : UIApplicationDelegate
Overview
To handle app delegate callbacks in an app that uses the SwiftUI life cycle, define a type that conforms to the UIApplicationDelegate protocol, and implement the delegate methods that you need. For example, you can implement the application(_:didRegisterForRemoteNotificationsWithDeviceToken:) method to handle remote notification registration:
class MyAppDelegate: NSObject, UIApplicationDelegate, ObservableObject {
    func application(
        _ application: UIApplication,
        didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data
    ) {
        // Record the device token.
    }
}
Then use the UIApplicationDelegateAdaptor property wrapper inside your App declaration to tell SwiftUI about the delegate type:
@main
struct MyApp: App {
    @UIApplicationDelegateAdaptor private var appDelegate: MyAppDelegate


    var body: some Scene { ... }
}
SwiftUI instantiates the delegate and calls the delegate’s methods in response to life cycle events. Define the delegate adaptor only in your App declaration, and only once for a given app. If you declare it more than once, SwiftUI generates a runtime error.
If your app delegate conforms to the ObservableObject protocol, as in the example above, then SwiftUI puts the delegate it creates into the Environment. You can access the delegate from any scene or view in your app using the EnvironmentObject property wrapper:
@EnvironmentObject private var appDelegate: MyAppDelegate
This enables you to use the dollar sign ($) prefix to get a binding to published properties that you declare in the delegate. For more information, see projectedValue.
Important
Manage an app’s life cycle events without using an app delegate whenever possible. For example, prefer to handle changes in ScenePhase instead of relying on delegate callbacks, like application(_:didFinishLaunchingWithOptions:).
Scene delegates
Some iOS apps define a UIWindowSceneDelegate to handle scene-based events, like app shortcuts:
class MySceneDelegate: NSObject, UIWindowSceneDelegate, ObservableObject {
    func windowScene(
        _ windowScene: UIWindowScene,
        performActionFor shortcutItem: UIApplicationShortcutItem
    ) async -> Bool {
        // Do something with the shortcut...


        return true
    }
}
You can provide this kind of delegate to a SwiftUI app by returning the scene delegate’s type from the application(_:configurationForConnecting:options:) method inside your app delegate:
extension MyAppDelegate {
    func application(
        _ application: UIApplication,
        configurationForConnecting connectingSceneSession: UISceneSession,
        options: UIScene.ConnectionOptions
    ) -> UISceneConfiguration {


        let configuration = UISceneConfiguration(
                                name: nil,
                                sessionRole: connectingSceneSession.role)
        if connectingSceneSession.role == .windowApplication {
            configuration.delegateClass = MySceneDelegate.self
        }
        return configuration
    }
}
When you configure the UISceneConfiguration instance, you only need to indicate the delegate class, and not a scene class or storyboard. SwiftUI creates and manages the delegate instance, and sends it any relevant delegate callbacks.
As with the app delegate, if you make your scene delegate an observable object, SwiftUI automatically puts it in the Environment, from where you can access it with the EnvironmentObject property wrapper, and create bindings to its published properties.
Topics
Creating a delegate adaptor
init(DelegateType.Type)
Creates a UIKit app delegate adaptor.
init(DelegateType.Type)
Creates a UIKit app delegate adaptor using a delegate that’s an observable object.
Available when DelegateType inherits NSObject, DelegateType conforms to ObservableObject, and DelegateType conforms to UIApplicationDelegate.
init(DelegateType.Type)
Creates a UIKit app delegate adaptor using an observable delegate.
Available when DelegateType inherits NSObject, DelegateType conforms to Observable, and DelegateType conforms to UIApplicationDelegate.
Beta
Getting the delegate adaptor
var projectedValue: ObservedObject<DelegateType>.Wrapper
A projection of the observed object that provides bindings to its properties.
Available when DelegateType inherits NSObject, DelegateType conforms to ObservableObject, and DelegateType conforms to UIApplicationDelegate.
var wrappedValue: DelegateType
The underlying app delegate.
Relationships
Conforms To
DynamicProperty
Sendable
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is UIApplicationDelegateAdaptor
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

