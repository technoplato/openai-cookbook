https://developer.apple.com/documentation/swiftui/view/scrollbouncebehavior(_:axes:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Framework integration
Accessible navigation
Accessible descriptions
Accessible controls
Accessible appearance
Accessibility fundamentals
Accessibility
Configuring scroll bounce behavior
P
var isScrollEnabled: Bool
M
func scrollDisabled(Bool) -> some View
Disabling scrolling
M
func scrollClipDisabled(Bool) -> some View
Beta
M
func scrollContentBackground(Visibility) -> some View
Managing content visibility
S
ScrollIndicatorVisibility
Documentation
Open Menu
Swift
Instance Method
scrollBounceBehavior(_:axes:)
Configures the bounce behavior of scrollable views along the specified axis.
iOS 16.4+
iPadOS 16.4+
macOS 13.3+
Mac Catalyst 16.4+
tvOS 16.4+
watchOS 9.4+
visionOS 1.0+ Beta
func scrollBounceBehavior(
    _ behavior: ScrollBounceBehavior,
    axes: Axis.Set = [.vertical]
) -> some View
Parameters
behavior
The bounce behavior to apply to any scrollable views within the configured view. Use one of the ScrollBounceBehavior values.
axes
The set of axes to apply behavior to. The default is Axis.vertical.
Return Value
A view that’s configured with the specified scroll bounce behavior.
Discussion
Use this modifier to indicate whether scrollable views bounce when people scroll to the end of the view’s content, taking into account the relative sizes of the view and its content. For example, the following ScrollView only enables bounce behavior if its content is large enough to require scrolling:
ScrollView {
    Text("Small")
    Text("Content")
}
.scrollBounceBehavior(.basedOnSize)
The modifier passes the scroll bounce mode through the Environment, which means that the mode affects any scrollable views in the modified view hierarchy. Provide an axis to the modifier to constrain the kinds of scrollable views that the mode affects. For example, all the scroll views in the following example can access the mode value, but only the two nested scroll views are affected, because only they use horizontal scrolling:
ScrollView { // Defaults to vertical scrolling.
    ScrollView(.horizontal) {
        ShelfContent()
    }
    ScrollView(.horizontal) {
        ShelfContent()
    }
}
.scrollBounceBehavior(.basedOnSize, axes: .horizontal)
You can use this modifier to configure any kind of scrollable view, including ScrollView, List, Table, and TextEditor:
List {
    Text("Hello")
    Text("World")
}
.scrollBounceBehavior(.basedOnSize)
See Also
Configuring scroll bounce behavior
var horizontalScrollBounceBehavior: ScrollBounceBehavior
The scroll bounce mode for the horizontal axis of scrollable views.
var verticalScrollBounceBehavior: ScrollBounceBehavior
The scroll bounce mode for the vertical axis of scrollable views.
struct ScrollBounceBehavior
The ways that a scrollable view can bounce when it reaches the end of its content.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is scrollBounceBehavior(_:axes:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

