https://developer.apple.com/documentation/swiftui/view/presentationcompactadaptation(horizontal:vertical:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View
M
func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View
M
func fullScreenCover<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View
M
func fullScreenCover<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View
M
func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View
M
func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View
E
PopoverAttachmentAnchor
Adapting a presentation to size classes
func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View
M
func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View
S
PresentationBackgroundInteraction
Presenting an alert
M
func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View
M
func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View
M
func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View
M
func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View
Documentation
Open Menu
Swift
Instance Method
presentationCompactAdaptation(horizontal:vertical:)
Specifies how to adapt a presentation to horizontally and vertically compact size classes.
iOS 16.4+
iPadOS 16.4+
macOS 13.3+
Mac Catalyst 16.4+
tvOS 16.4+
watchOS 9.4+
visionOS 1.0+ Beta
func presentationCompactAdaptation(
    horizontal horizontalAdaptation: PresentationAdaptation,
    vertical verticalAdaptation: PresentationAdaptation
) -> some View
Parameters
horizontalAdaptation
The adaptation to use in a horizontally compact size class.
verticalAdaptation
The adaptation to use in a vertically compact size class. In a size class that is both horizontally and vertically compact, SwiftUI uses the verticalAdaptation value.
Discussion
Some presentations adapt their appearance depending on the context. For example, a popover presentation over a horizontally-compact view uses a sheet appearance by default. Use this modifier to indicate a custom adaptation preference.
struct ContentView: View {
    @State private var showInfo = false


    var body: some View {
        Button("View Info") {
            showInfo = true
        }
        .popover(isPresented: $showInfo) {
            InfoView()
                .presentationCompactAdaptation(
                    horizontal: .popover,
                    vertical: .sheet)
        }
    }
}
If you want to specify the same adaptation for both dimensions, use the presentationCompactAdaptation(_:) method instead.
See Also
Adapting a presentation to size classes
func presentationCompactAdaptation(PresentationAdaptation) -> some View
Specifies how to adapt a presentation to compact size classes.
struct PresentationAdaptation
Strategies for adapting a presentation to a different size class.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is presentationCompactAdaptation(horizontal:vertical:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright Â© 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

