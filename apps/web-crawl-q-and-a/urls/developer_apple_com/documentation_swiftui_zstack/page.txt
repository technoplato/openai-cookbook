https://developer.apple.com/documentation/swiftui/zstackSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
Spacer
Separators
S
ViewThatFits
Automatically choosing the layout that fits
S
ContainerBackgroundPlacement
Beta
M
func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View
Beta
M
func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View
Adding a background to your view
Layering views
S
GridItem
S
LazyVGrid
S
LazyHGrid
Dynamically arranging views in two dimensions
M
func gridColumnAlignment(HorizontalAlignment) -> some View
M
func gridCellUnsizedAxes(Axis.Set) -> some View
Documentation
Open Menu
Swift
Structure
ZStack
A view that overlays its subviews, aligning them in both axes.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
@frozen
struct ZStack<Content> where Content : View
Overview
The ZStack assigns each successive subview a higher z-axis value than the one before it, meaning later subviews appear “on top” of earlier ones.
The following example creates a ZStack of 100 x 100 point Rectangle views filled with one of six colors, offsetting each successive subview by 10 points so they don’t completely overlap:
let colors: [Color] =
    [.red, .orange, .yellow, .green, .blue, .purple]


var body: some View {
    ZStack {
        ForEach(0..<colors.count) {
            Rectangle()
                .fill(colors[$0])
                .frame(width: 100, height: 100)
                .offset(x: CGFloat($0) * 10.0,
                        y: CGFloat($0) * 10.0)
        }
    }
}
The ZStack uses an Alignment to set the x- and y-axis coordinates of each subview, defaulting to a center alignment. In the following example, the ZStack uses a bottomLeading alignment to lay out two subviews, a red 100 x 50 point rectangle below, and a blue 50 x 100 point rectangle on top. Because of the alignment value, both rectangles share a bottom-left corner with the ZStack (in locales where left is the leading side).
var body: some View {
    ZStack(alignment: .bottomLeading) {
        Rectangle()
            .fill(Color.red)
            .frame(width: 100, height: 50)
        Rectangle()
            .fill(Color.blue)
            .frame(width:50, height: 100)
    }
    .border(Color.green, width: 1)
}
Note
If you need a version of this stack that conforms to the Layout protocol, like when you want to create a conditional layout using AnyLayout, use ZStackLayout instead.
Topics
Creating a stack
init(alignment: Alignment, content: () -> Content)
Creates an instance with the given alignment.
Relationships
Conforms To
Sendable
View
See Also
Layering views
Adding a background to your view
Compose a background behind your view and extend it beyond the safe area insets.
func zIndex(Double) -> some View
Controls the display order of overlapping views.
func background<V>(alignment: Alignment, content: () -> V) -> some View
Layers the views that you specify behind this view.
func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View
Sets the view’s background to a style.
func background(ignoresSafeAreaEdges: Edge.Set) -> some View
Sets the view’s background to the default background style.
func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View
Sets the view’s background to an insettable shape filled with a style.
func background<S>(in: S, fillStyle: FillStyle) -> some View
Sets the view’s background to an insettable shape filled with the default background style.
func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View
Sets the view’s background to a shape filled with a style.
func background<S>(in: S, fillStyle: FillStyle) -> some View
Sets the view’s background to a shape filled with the default background style.
func overlay<V>(alignment: Alignment, content: () -> V) -> some View
Layers the views that you specify in front of this view.
func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View
Layers the specified style in front of this view.
func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View
Layers a shape that you specify in front of this view.
var backgroundMaterial: Material?
The material underneath the current view.
func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View
Sets the container background of the enclosing container using a view.
Beta
func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View
Sets the container background of the enclosing container using a view.
Beta
struct ContainerBackgroundPlacement
The placement of a container background.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is ZStack
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

