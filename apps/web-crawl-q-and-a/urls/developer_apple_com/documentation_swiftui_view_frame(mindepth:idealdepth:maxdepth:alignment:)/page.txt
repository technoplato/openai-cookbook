https://developer.apple.com/documentation/swiftui/view/frame(mindepth:idealdepth:maxdepth:alignment:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
VerticalAlignment
S
HorizontalAlignment
S
Alignment
M
func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
M
func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View
Aligning views across stacks
Aligning views within a stack
func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View
func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View
M
func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View
M
func frame(depth: CGFloat?, alignment: DepthAlignment) -> some View
Beta
M
func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View
Influencing a view’s size
S
ScenePadding
M
func scenePadding(ScenePadding, edges: Edge.Set) -> some View
M
func scenePadding(Edge.Set) -> some View
M
func padding3D(Edge3D.Set, CGFloat?) -> some View
Beta
Documentation
Open Menu
Swift
Instance Method
frame(minDepth:idealDepth:maxDepth:alignment:)
Positions this view within an invisible frame having the specified depth constraints.
visionOS 1.0+ Beta
func frame(
    minDepth: CGFloat? = nil,
    idealDepth: CGFloat? = nil,
    maxDepth: CGFloat? = nil,
    alignment: DepthAlignment = .center
) -> some View
Parameters
minDepth
The minimum depth of the resulting frame.
idealDepth
The ideal depth of the resulting frame.
maxDepth
The maximum depth of the resulting frame.
alignment
The alignment of this view inside the resulting frame. Note that most alignment values have no apparent effect when the size of the frame happens to match that of this view.
Return Value
A view with flexible dimensions given by the call’s non-nil parameters.
Discussion
Always specify at least one size characteristic when calling this method. Pass nil or leave out a characteristic to indicate that the frame should adopt this view’s sizing behavior, constrained by the other non-nil arguments.
The size proposed to this view is the size proposed to the frame, limited by any constraints specified, and with an ideal dimension specified replacing any corresponding unspecified dimensions in the proposal.
If no minimum or maximum constraint is specified in a given dimension, the frame adopts the sizing behavior of its child in that dimension. If both constraints are specified in a dimension, the frame unconditionally adopts the size proposed for it, clamped to the constraints. Otherwise, the size of the frame in either dimension is:
If a minimum constraint is specified and the size proposed for the frame by the parent is less than the size of this view, the proposed size, clamped to that minimum.
If a maximum constraint is specified and the size proposed for the frame by the parent is greater than the size of this view, the proposed size, clamped to that maximum.
Otherwise, the size of this view.
See Also
Influencing a view’s size
func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View
Positions this view within an invisible frame with the specified size.
func frame(depth: CGFloat?, alignment: DepthAlignment) -> some View
Positions this view within an invisible frame with the specified depth.
Beta
func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View
Positions this view within an invisible frame having the specified size constraints.
func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View
Positions this view within an invisible frame with a size relative to the nearest container.
Beta
func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View
Positions this view within an invisible frame with a size relative to the nearest container.
Beta
func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View
Positions this view within an invisible frame with a size relative to the nearest container.
Beta
func fixedSize() -> some View
Fixes this view at its ideal size.
func fixedSize(horizontal: Bool, vertical: Bool) -> some View
Fixes this view at its ideal size in the specified dimensions.
func layoutPriority(Double) -> some View
Sets the priority by which a parent layout should apportion space to this child.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is frame(minDepth:idealDepth:maxDepth:alignment:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

