https://developer.apple.com/documentation/swiftui/focusSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
S
FocusedValues
M
func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View
M
func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View
M
func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View
M
func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View
M
func focusedValue<T>(T?) -> some View
Beta
Exposing value types to focused views
Drag and drop
Clipboard
Input events
Gestures
Event handling
Scroll views
View groupings
Tables
Documentation
Open Menu
Swift
Focus
Identify and control which visible object responds to user interaction.
Overview
Focus indicates which element in the display recieves the next input. Use view modifiers to indicate which views can receive focus, to detect which view has focus, and to programmatically control focus state.
For design guidance, see Focus and selection in the Human Interface Guidelines.
Topics
Essentials
Focus Cookbook: Supporting and enhancing focus-driven interactions in your SwiftUI app
Create custom focusable views with key-press handlers that accelerate keyboard input and support movement, and control focus programmatically.
Indicating that a view can receive focus
func focusable(Bool) -> some View
Specifies if the view is focusable.
func focusable(Bool, interactions: FocusInteractions) -> some View
Specifies if the view is focusable, and if so, what focus-driven interactions it supports.
Beta
struct FocusInteractions
Values describe different focus interactions that a view can support.
Beta
Managing focus state
func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View
Modifies this view by binding its focus state to the given state value.
func focused(FocusState<Bool>.Binding) -> some View
Modifies this view by binding its focus state to the given Boolean state value.
var isFocused: Bool
Returns whether the nearest focusable ancestor has focus.
struct FocusState
A property wrapper type that can read and write a value that SwiftUI updates as the placement of focus within the scene changes.
struct FocusedValue
A property wrapper for observing values from the focused view or one of its ancestors.
protocol FocusedValueKey
A protocol for identifier types used when publishing and observing focused values.
struct FocusedBinding
A convenience property wrapper for observing and automatically unwrapping state bindings from the focused view or one of its ancestors.
Exposing value types to focused views
func focusedValue<T>(T?) -> some View
Sets the focused value for the given object type.
Beta
func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View
Modifies this view by injecting a value that you provide for use by other views whose state depends on the focused view hierarchy.
func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View
Creates a new view that exposes the provided value to other views whose state depends on the focused view hierarchy.
func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View
Creates a new view that exposes the provided value to other views whose state depends on the active scene.
func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View
Modifies this view by injecting a value that you provide for use by other views whose state depends on the focused scene.
struct FocusedValues
A collection of state exported by the focused view and its ancestors.
Exposing reference types to focused views
func focusedObject<T>(T?) -> some View
Creates a new view that exposes the provided object to other views whose state depends on the focused view hierarchy.
func focusedObject<T>(T) -> some View
Creates a new view that exposes the provided object to other views whose whose state depends on the focused view hierarchy.
func focusedSceneObject<T>(T?) -> some View
Creates a new view that exposes the provided object to other views whose whose state depends on the active scene.
func focusedSceneObject<T>(T) -> some View
Creates a new view that exposes the provided object to other views whose whose state depends on the active scene.
struct FocusedObject
A property wrapper type for an observable object supplied by the focused view or one of its ancestors.
Setting focus scope
func focusScope(Namespace.ID) -> some View
Creates a focus scope that SwiftUI uses to limit default focus preferences.
func focusSection() -> some View
Indicates that the view’s frame and cohort of focusable descendants should be used to guide focus movement.
Controlling default focus
func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View
Indicates that the view should receive focus by default for a given namespace.
func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View
Defines a region of the window in which default focus is evaluated by assigning a value to a given focus state binding.
struct DefaultFocusEvaluationPriority
Prioritizations for default focus preferences when evaluating where to move focus in different circumstances.
Resetting focus
var resetFocus: ResetFocusAction
An action that requests the focus system to reevaluate default focus.
struct ResetFocusAction
An environment value that provides the ability to reevaluate default focus.
Configuring effects
func focusEffectDisabled(Bool) -> some View
Adds a condition that controls whether this view can display focus effects, such as a default focus ring or hover effect.
Beta
var isFocusEffectEnabled: Bool
A Boolean value that indicates whether the view associated with this environment allows focus effects to be displayed.
Beta
See Also
Event handling
API Reference
Gestures
Define interactions from taps, clicks, and swipes to fine-grained gestures.
API Reference
Input events
Respond to input from a hardware device, like a keyboard or a Touch Bar.
API Reference
Clipboard
Enable people to move or duplicate items by issuing Copy and Paste commands.
API Reference
Drag and drop
Enable people to move or duplicate items by dragging them from one location to another.
API Reference
System events
React to system events, like opening a URL.
Current page is Focus
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

