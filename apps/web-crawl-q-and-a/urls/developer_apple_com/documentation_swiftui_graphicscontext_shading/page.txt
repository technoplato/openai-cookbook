https://developer.apple.com/documentation/swiftui/graphicscontext/shadingSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func draw(Image, at: CGPoint, anchor: UnitPoint)
Drawing an image
S
GraphicsContext.GradientOptions
M
static func shader(Shader, bounds: CGRect) -> GraphicsContext.Shading
Beta
Using a custom Metal shader
P
static var backdrop: GraphicsContext.Shading
M
static func palette([GraphicsContext.Shading]) -> GraphicsContext.Shading
static func tiledImage(Image, origin: CGPoint, sourceRect: CGRect, scale: CGFloat) -> GraphicsContext.Shading
static func conicGradient(Gradient, center: CGPoint, angle: Angle, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading
static func radialGradient(Gradient, center: CGPoint, startRadius: CGFloat, endRadius: CGFloat, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading
static func linearGradient(Gradient, startPoint: CGPoint, endPoint: CGPoint, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading
static func color(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double) -> GraphicsContext.Shading
M
func resolve(GraphicsContext.Shading) -> GraphicsContext.Shading
M
func fill(Path, with: GraphicsContext.Shading, style: FillStyle)
M
func stroke(Path, with: GraphicsContext.Shading, style: StrokeStyle)
M
func stroke(Path, with: GraphicsContext.Shading, lineWidth: CGFloat)
Drawing a path
S
GraphicsContext
S
Canvas
Add Rich Graphics to Your SwiftUI App
Documentation
Open Menu
Swift
Structure
GraphicsContext.Shading
A color or pattern that you can use to outline or fill a path.
iOS 15.0+
iPadOS 15.0+
macOS 12.0+
Mac Catalyst 15.0+
tvOS 15.0+
watchOS 8.0+
visionOS 1.0+ Beta
struct Shading
Overview
Use a shading instance to describe the color or pattern of a path that you outline with a method like stroke(_:with:style:), or of the interior of a region that you fill with the fill(_:with:style:) method. Get a shading instance by calling one of the Shading structure’s factory methods. You can base shading on:
A Color.
A Gradient.
Any type that conforms to ShapeStyle.
An Image.
What you’ve already drawn into the context.
A collection of other shading instances.
Topics
Colors
static func color(Color) -> GraphicsContext.Shading
Returns a shading instance that fills with a color.
static func color(Color.RGBColorSpace, red: Double, green: Double, blue: Double, opacity: Double) -> GraphicsContext.Shading
Returns a shading instance that fills with a color in the given color space.
static func color(Color.RGBColorSpace, white: Double, opacity: Double) -> GraphicsContext.Shading
Returns a shading instance that fills with a monochrome color in the given color space.
Gradients
static func linearGradient(Gradient, startPoint: CGPoint, endPoint: CGPoint, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading
Returns a shading instance that fills a linear (axial) gradient.
static func radialGradient(Gradient, center: CGPoint, startRadius: CGFloat, endRadius: CGFloat, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading
Returns a shading instance that fills a radial gradient.
static func conicGradient(Gradient, center: CGPoint, angle: Angle, options: GraphicsContext.GradientOptions) -> GraphicsContext.Shading
Returns a shading instance that fills a conic (angular) gradient.
Other shape styles
static func style<S>(S) -> GraphicsContext.Shading
Returns a shading instance that fills with the given shape style.
static var foreground: GraphicsContext.Shading
A shading instance that fills with the foreground style from the graphics context’s environment.
Images
static func tiledImage(Image, origin: CGPoint, sourceRect: CGRect, scale: CGFloat) -> GraphicsContext.Shading
Returns a shading instance that tiles an image across the infinite plane.
Composite shading types
static func palette([GraphicsContext.Shading]) -> GraphicsContext.Shading
Returns a multilevel shading instance constructed from an array of shading instances.
static var backdrop: GraphicsContext.Shading
A shading instance that draws a copy of the current background.
Using a custom Metal shader
static func shader(Shader, bounds: CGRect) -> GraphicsContext.Shading
Returns a shading instance that fills with the results of querying a shader for each pixel.
Beta
Relationships
Conforms To
Sendable
See Also
Drawing a path
func stroke(Path, with: GraphicsContext.Shading, lineWidth: CGFloat)
Draws a path into the context with a specified line width.
func stroke(Path, with: GraphicsContext.Shading, style: StrokeStyle)
Draws a path into the context with a specified stroke style.
func fill(Path, with: GraphicsContext.Shading, style: FillStyle)
Draws a path into the context and fills the outlined region.
func resolve(GraphicsContext.Shading) -> GraphicsContext.Shading
Returns a version of a shading resolved with the current values of the graphics context’s environment.
struct GradientOptions
Options that affect the rendering of color gradients.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is GraphicsContext.Shading
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

