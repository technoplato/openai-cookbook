https://developer.apple.com/documentation/swiftui/making-fine-adjustments-to-a-view-s-positionSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func frame(minDepth: CGFloat?, idealDepth: CGFloat?, maxDepth: CGFloat?, alignment: DepthAlignment) -> some View
Beta
M
func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View
Beta
M
func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View
Beta
M
func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View
Beta
M
func fixedSize() -> some View
M
func fixedSize(horizontal: Bool, vertical: Bool) -> some View
M
func layoutPriority(Double) -> some View
Adjusting a view’s position
r
P
AlignmentID
S
ViewDimensions
Setting margins
M
func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View
Beta
M
func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View
Beta
M
func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View
Beta
S
ContentMarginPlacement
Beta
Documentation
Open Menu
Swift
Article
Making fine adjustments to a view’s position
Shift the position of a view by applying the offset or position modifier.
Overview
Use SwiftUI to adaptively lay out and position your views. If you can’t achieve your design with composition alone, fine tune the layout with view modifiers. Add an offset modifier to shift the rendered content of a view from its current position, or a position modifier to set an explicit position within its parent.
Create a view layout
The following example provides a view to illustrate how to position views, providing a rough layout of views composed within a ZStack. The stack contains a quadrant with an overlaid circle image:
struct Crosshairs: View { ... } // Draws crosshairs.


struct Quadrant: View {
    var body: some View {
        ZStack {
            Crosshairs()
            Rectangle()
                .stroke(Color.primary)
            Image(systemName: "circle")
        }
        .frame(width: 160, height: 160)
    }
}
For more detail on composing views with stacks, see Building layouts with stack views.
Shift the location of a view’s content
Fine-tune the position of the circle within the quadrant by using an offset modifier to shift where the parent view places the circle. An offset modifier shifts the image from its default center position. For example, the offset(x:y:) modifier uses the parameters of x and y to represent a relative location within the view’s coordinate space.
In SwiftUI, the view’s coordinate space uses x to represent a horizontal direction and y to represent a vertical direction. The value of x starts at 0 at the leading edge of a view, and increases as the location moves toward the trailing edge of a view. The value of y starts at 0 at the top edge of a view, and increases as the location moves toward the bottom edge of a view. Don’t assume the leading edge is always on the left, because it changes with the layout direction. When the layout direction is set to right-to-left, the 0 horizontal value is on the right side of the view.
The following diagram shows the coordinates in the left-to-right layout direction against a rectangle, with the origin at the top, leading corner:
The following example shifts the circle 40 points from the center, up and toward the trailing edge:
struct Quadrant: View {
    var body: some View {
        ZStack {
            Crosshairs()
            Rectangle()
                .stroke(Color.primary)
            Image(systemName: "circle")
                .offset(x: 40.0, y: -40.0)
        }
        .frame(width: 160, height: 160)
    }
}
Position view content explicitly
To explicitly position elements within a view, use the position(x:y:) view modifier. A position modifier overrides where the parent view places its content. The modifier renders the view at a location offset from the origin of the parent view, unlike an offset modifier that shifts the view from the location chosen by the parent view. The position modifier uses the same x, y coordinate system as the offset modifier, and similarly doesn’t influence the size of the view. In this example, the position of the circle is set halfway down on the right side of the quadrant with explicit values:
struct Quadrant: View {
    var body: some View {
        ZStack {
            Crosshairs()
            Rectangle()
                .stroke(Color.primary)
            Image(systemName: "circle")
                .position(x: 144, y: 80)
        }
        .frame(width: 160, height: 160)
    }
}
See Also
Adjusting a view’s position
func position(CGPoint) -> some View
Positions the center of this view at the specified point in its parent’s coordinate space.
func position(x: CGFloat, y: CGFloat) -> some View
Positions the center of this view at the specified coordinates in its parent’s coordinate space.
func offset(CGSize) -> some View
Offset this view by the horizontal and vertical amount specified in the offset parameter.
func offset(x: CGFloat, y: CGFloat) -> some View
Offset this view by the specified horizontal and vertical distances.
func offset(z: CGFloat) -> some View
Brings a view forward in Z by the provided distance in points.
Beta
Current page is Making fine adjustments to a view’s position
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

