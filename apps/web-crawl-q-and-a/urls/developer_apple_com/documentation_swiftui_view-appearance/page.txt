https://developer.apple.com/documentation/swiftui/view-appearanceSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View
M
func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View
M
func overlay<V>(alignment: Alignment, content: () -> V) -> some View
M
func border<S>(S, width: CGFloat) -> some View
Foreground elements
M
func preferredSurroundingsEffect(SurroundingsEffect?) -> some View
Beta
M
func preferredColorScheme(ColorScheme?) -> some View
Accessibility modifiers
Configuring view elements
Previews in Xcode
M
func modifier<T>(T) -> ModifiedContent<Self, T>
Body
P
var body: Self.Body
Implementing a custom view
r
P
View
Documentation
Open Menu
Swift
Appearance modifiers
Configure a view’s foreground and background styles, controls, and visibility.
Overview
Use these modifiers to configure the appearance of a view, including the use of color and tint, and the application of overlays and background elements. Control the visibility of a view and specific elements within a view. Manage the shape and size of various controls.
For information about configuring views, see View configuration.
Topics
Colors and patterns
func backgroundStyle<S>(S) -> some View
Sets the specified style to render backgrounds within the view.
func foregroundStyle<S>(S) -> some View
Sets a view’s foreground elements to use a given style.
func foregroundStyle<S1, S2>(S1, S2) -> some View
Sets the primary and secondary levels of the foreground style in the child view.
func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View
Sets the primary, secondary, and tertiary levels of the foreground style.
func allowedDynamicRange(Image.DynamicRange?) -> some View
Returns a new view configured with the specified allowed dynamic range.
Beta
Tint
func tint<S>(S?) -> some View
Sets the tint within this view.
func tint(Color?) -> some View
Sets the tint color within this view.
func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View
Sets the tint color associated with a row.
func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View
Sets the tint color associated with a section.
func listItemTint(Color?) -> some View
Sets a fixed tint color associated with specific content in a list.
func listItemTint(ListItemTint?) -> some View
Sets the tint effect associated with specific content in a list.
Light and dark appearance
func preferredColorScheme(ColorScheme?) -> some View
Sets the preferred color scheme for this presentation.
func preferredSurroundingsEffect(SurroundingsEffect?) -> some View
Sets the preference for the video passthrough effect of the user’s surroundings. Use nil to state no preference. Note that this modifier only sets a preference and ultimately the system will decide if it will honor it or not.
Beta
Foreground elements
func border<S>(S, width: CGFloat) -> some View
Adds a border to this view with the specified style and width.
func overlay<V>(alignment: Alignment, content: () -> V) -> some View
Layers the views that you specify in front of this view.
func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View
Layers the specified style in front of this view.
func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View
Layers a shape that you specify in front of this view.
Background elements
func background<V>(alignment: Alignment, content: () -> V) -> some View
Layers the views that you specify behind this view.
func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View
Sets the view’s background to a style.
func background(ignoresSafeAreaEdges: Edge.Set) -> some View
Sets the view’s background to the default background style.
func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View
Sets the view’s background to an insettable shape filled with a style.
func background<S>(in: S, fillStyle: FillStyle) -> some View
Sets the view’s background to an insettable shape filled with the default background style.
func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View
Sets the view’s background to a shape filled with a style.
func background<S>(in: S, fillStyle: FillStyle) -> some View
Sets the view’s background to a shape filled with the default background style.
func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View
Overrides whether lists and tables in this view have alternating row backgrounds.
Beta
func listRowBackground<V>(V?) -> some View
Places a custom background view behind a list row item.
func scrollContentBackground(Visibility) -> some View
Specifies the visibility of the background for scrollable views within this view.
func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View
Sets the container background of the enclosing container using a view.
Beta
func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View
Sets the container background of the enclosing container using a view.
Beta
func glassBackgroundEffect(displayMode: GlassBackgroundDisplayMode) -> some View
Sets the view’s glass background to displayMode, filling the view’s container relative rounded corner shape.
Beta
func glassBackgroundEffect<S>(in: S, displayMode: GlassBackgroundDisplayMode) -> some View
Sets the view’s glass background to a specified shape filled with the dispalyMode.
Beta
Control configuration
func defaultWheelPickerItemHeight(CGFloat) -> some View
Sets the default wheel-style picker item height.
func horizontalRadioGroupLayout() -> some View
Sets the style for radio group style pickers within this view to be horizontally positioned with the radio buttons inside the layout.
func controlSize(ControlSize) -> some View
Sets the size for controls within this view.
func buttonBorderShape(ButtonBorderShape) -> some View
Sets the border shape for buttons in this view.
func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View
Sets whether buttons in this view should repeatedly trigger their actions on prolonged interactions.
Beta
func headerProminence(Prominence) -> some View
Sets the header prominence for this view.
func scrollDisabled(Bool) -> some View
Disables or enables scrolling in scrollable views.
func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View
Configures the bounce behavior of scrollable views along the specified axis.
func scrollIndicatorsFlash(onAppear: Bool) -> some View
Flashes the scroll indicators of a scrollable view when it appears.
Beta
func scrollIndicatorsFlash(trigger: some Equatable) -> some View
Flashes the scroll indicators of scrollable views when a value changes.
Beta
func menuOrder(MenuOrder) -> some View
Sets the preferred order of items for menus presented from this view.
func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View
Tells a menu whether to dismiss after performing an action.
func paletteSelectionEffect(PaletteSelectionEffect) -> some View
Specifies the selection effect to apply to a palette item.
Beta
func typeSelectEquivalent(Text?) -> some View
Sets an explicit type select equivalent text in a collection, such as a list or table.
func typeSelectEquivalent(LocalizedStringKey) -> some View
Sets an explicit type select equivalent text in a collection, such as a list or table.
func typeSelectEquivalent<S>(S) -> some View
Sets an explicit type select equivalent text in a collection, such as a list or table.
Symbol effects
func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View
Returns a new view with a symbol effect added to it.
Beta
func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View
Returns a new view with a symbol effect added to it.
Beta
func symbolEffectsRemoved(Bool) -> some View
Returns a new view with its inherited symbol image effects either removed or left unchanged.
Beta
Privacy and redaction
func privacySensitive(Bool) -> some View
Marks the view as containing sensitive, private user data.
func redacted(reason: RedactionReasons) -> some View
Adds a reason to apply a redaction to this view hierarchy.
func unredacted() -> some View
Removes any reason to apply a redaction to this view hierarchy.
func invalidatableContent(Bool) -> some View
Mark the receiver as their content might be invalidated.
Beta
Visibility
func hidden() -> some View
Hides this view unconditionally.
func labelsHidden() -> some View
Hides the labels of any controls contained within this view.
func menuIndicator(Visibility) -> some View
Sets the menu indicator visibility for controls within this view.
func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View
Sets the display mode for the separator associated with this specific row.
func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View
Sets whether to hide the separator associated with a list section.
func persistentSystemOverlays(Visibility) -> some View
Sets the preferred visibility of the non-transient system views overlaying the app.
func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View
Sets the visibility of scroll indicators within this view.
func scrollClipDisabled(Bool) -> some View
Sets whether a scroll view clips its content to its bounds.
Beta
func tableColumnHeaders(Visibility) -> some View
Controls the visibility of a Table’s column header views.
Beta
func upperLimbVisibility(Visibility) -> some View
Sets the preferred visibility of the user’s upper limbs, while an ImmersiveSpace scene is presented.
Beta
Sensory feedback
func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View
Plays the specified feedback when the provided trigger value changes.
Beta
func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View
Plays feedback when returned from the feedback closure after the provided trigger value changes.
Beta
func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View
Plays the specified feedback when the provided trigger value changes and the condition closure returns true.
Beta
Widget configuration
func widgetAccentable(Bool) -> some View
Adds the view and all of its subviews to the accented group.
func widgetCurvesContent(Bool) -> some View
Displays the widget’s content along a curve if the context allows it.
Beta
func widgetLabel<S>(S) -> some View
Returns a text label that displays additional content outside the accessory family widget’s main SwiftUI view.
func widgetLabel(LocalizedStringKey) -> some View
Returns a localized text label that displays additional content outside the accessory family widget’s main SwiftUI view.
func widgetLabel<Label>(label: () -> Label) -> some View
Creates a label for displaying additional content outside an accessory family widget’s main SwiftUI view.
func dynamicIsland(verticalPlacement: DynamicIslandExpandedRegionVerticalPlacement) -> some View
Specifies the vertical placement for a view of an expanded Live Activity that appears in the Dynamic Island.
See Also
Configuring view elements
API Reference
Accessibility modifiers
Make your SwiftUI apps accessible to everyone, including people with disabilities.
API Reference
Text and symbol modifiers
Manage the rendering, selection, and entry of text in your view.
API Reference
Auxiliary view modifiers
Add and configure supporting views, like toolbars and context menus.
API Reference
Chart view modifiers
Configure charts that you declare with Swift Charts.
Current page is Appearance modifiers
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

