https://developer.apple.com/documentation/swiftui/localizedstringkeySkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Custom layout
Layout adjustments
Layout fundamentals
View layout
Drawing and graphics
Shapes
Menus and commands
Preparing views for localization
Localizing text
M
func typeSelectEquivalent<S>(S) -> some View
M
func typeSelectEquivalent(LocalizedStringKey) -> some View
M
func typeSelectEquivalent(Text?) -> some View
Specifying text equivalents
S
TextInputDictationBehavior
Beta
S
TextInputDictationActivation
Beta
Documentation
Open Menu
Swift
Structure
LocalizedStringKey
The key used to look up an entry in a strings file or strings dictionary file.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
@frozen
struct LocalizedStringKey
Overview
Initializers for several SwiftUI types – such as Text, Toggle, Picker and others – implicitly look up a localized string when you provide a string literal. When you use the initializer Text("Hello"), SwiftUI creates a LocalizedStringKey for you and uses that to look up a localization of the Hello string. This works because LocalizedStringKey conforms to ExpressibleByStringLiteral.
Types whose initializers take a LocalizedStringKey usually have a corresponding initializer that accepts a parameter that conforms to StringProtocol. Passing a String variable to these initializers avoids localization, which is usually appropriate when the variable contains a user-provided value.
As a general rule, use a string literal argument when you want localization, and a string variable argument when you don’t. In the case where you want to localize the value of a string variable, use the string to create a new LocalizedStringKey instance.
The following example shows how to create Text instances both with and without localization. The title parameter provided to the Section is a literal string, so SwiftUI creates a LocalizedStringKey for it. However, the string entries in the messageStore.today array are String variables, so the Text views in the list use the string values verbatim.
List {
    Section(header: Text("Today")) {
        ForEach(messageStore.today) { message in
            Text(message.title)
        }
    }
}
If the app is localized into Japanese with the following translation of its Localizable.strings file:
"Today" = "今日";
When run in Japanese, the example produces a list like the following, localizing “Today” for the section header, but not the list items.
Topics
Creating a key from a literal value
init(String)
Creates a localized string key from the given string value.
init(stringLiteral: String)
Creates a localized string key from the given string literal.
Creating a key from an interpolation
init(stringInterpolation: LocalizedStringKey.StringInterpolation)
Creates a localized string key from the given string interpolation.
struct StringInterpolation
Represents the contents of a string literal with interpolations while it’s being built, for use in creating a localized string key.
Relationships
Conforms To
Equatable
ExpressibleByExtendedGraphemeClusterLiteral
ExpressibleByStringInterpolation
ExpressibleByStringLiteral
ExpressibleByUnicodeScalarLiteral
Sendable
See Also
Localizing text
Preparing views for localization
Specify hints and add strings to localize your SwiftUI views.
var locale: Locale
The current locale that views should use.
func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View
Specifies the language for typesetting.
Beta
func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View
Specifies the language for typesetting.
Beta
struct TypesettingLanguage
Defines how typesetting language is determined for text.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is LocalizedStringKey
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

