https://developer.apple.com/documentation/swiftui/shape/trim(from:to:)Skip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Setting the role
M
func fill(style: FillStyle) -> some View
M
func fill<S>(S, style: FillStyle) -> some View
M
func fill<S>(S, style: FillStyle) -> _ShapeView<Self, S>
Beta
Filling a shape
M
func stroke(style: StrokeStyle) -> some Shape
M
func stroke<S>(S, style: StrokeStyle, antialiased: Bool) -> StrokeShapeView<Self, S, EmptyView>
Transforming a shape
M
func path(in: CGRect) -> Path
M
func sizeThatFits(ProposedViewSize) -> CGSize
Defining a shape’s size and path
M
static func rect(topLeadingRadius: CGFloat, bottomLeadingRadius: CGFloat, bottomTrailingRadius: CGFloat, topTrailingRadius: CGFloat, style: RoundedCornerStyle) -> Self
M
static func rect(cornerSize: CGSize, style: RoundedCornerStyle) -> Self
M
static func rect(cornerRadius: CGFloat, style: RoundedCornerStyle) -> Self
M
static func rect(cornerRadii: RectangleCornerRadii, style: RoundedCornerStyle) -> Self
Documentation
Open Menu
Swift
Instance Method
trim(from:to:)
Trims this shape by a fractional amount based on its representation as a path.
iOS 13.0+
iPadOS 13.0+
macOS 10.15+
Mac Catalyst 13.0+
tvOS 13.0+
watchOS 6.0+
visionOS 1.0+ Beta
func trim(
    from startFraction: CGFloat = 0,
    to endFraction: CGFloat = 1
) -> some Shape
Parameters
startFraction
The fraction of the way through drawing this shape where drawing starts.
endFraction
The fraction of the way through drawing this shape where drawing ends.
Return Value
A shape built by capturing a portion of this shape’s path.
Discussion
To create a Shape instance, you define the shape’s path using lines and curves. Use the trim(from:to:) method to draw a portion of a shape by ignoring portions of the beginning and ending of the shape’s path.
For example, if you’re drawing a figure eight or infinity symbol (∞) starting from its center, setting the startFraction and endFraction to different values determines the parts of the overall shape.
The following example shows a simplified infinity symbol that draws only three quarters of the full shape. That is, of the two lobes of the symbol, one lobe is complete and the other is half complete.
Path { path in
    path.addLines([
        .init(x: 2, y: 1),
        .init(x: 1, y: 0),
        .init(x: 0, y: 1),
        .init(x: 1, y: 2),
        .init(x: 3, y: 0),
        .init(x: 4, y: 1),
        .init(x: 3, y: 2),
        .init(x: 2, y: 1)
    ])
}
.trim(from: 0.25, to: 1.0)
.scale(50, anchor: .topLeading)
.stroke(Color.black, lineWidth: 3)
Changing the parameters of trim(from:to:) to .trim(from: 0, to: 1) draws the full infinity symbol, while .trim(from: 0, to: 0.5) draws only the left lobe of the symbol.
See Also
Transforming a shape
func transform(CGAffineTransform) -> TransformedShape<Self>
Applies an affine transform to this shape.
func size(CGSize) -> some Shape
Returns a new version of self representing the same shape, but that will ask it to create its path from a rect of size. This does not affect the layout properties of any views created from the shape (e.g. by filling it).
func size(width: CGFloat, height: CGFloat) -> some Shape
Returns a new version of self representing the same shape, but that will ask it to create its path from a rect of size (width, height). This does not affect the layout properties of any views created from the shape (e.g. by filling it).
func scale(CGFloat, anchor: UnitPoint) -> ScaledShape<Self>
Scales this shape without changing its bounding frame.
func scale(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> ScaledShape<Self>
Scales this shape without changing its bounding frame.
func rotation(Angle, anchor: UnitPoint) -> RotatedShape<Self>
Rotates this shape around an anchor point at the angle you specify.
func offset(CGSize) -> OffsetShape<Self>
Changes the relative position of this shape using the specified size.
func offset(CGPoint) -> OffsetShape<Self>
Changes the relative position of this shape using the specified point.
func offset(x: CGFloat, y: CGFloat) -> OffsetShape<Self>
Changes the relative position of this shape using the specified point.
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is trim(from:to:)
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

