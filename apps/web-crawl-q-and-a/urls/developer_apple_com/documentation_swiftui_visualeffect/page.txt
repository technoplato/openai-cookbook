https://developer.apple.com/documentation/swiftui/visualeffectSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
M
func clipShape<S>(S, style: FillStyle) -> some View
Applying blur and shadows
M
func blur(radius: CGFloat, opaque: Bool) -> some View
M
func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View
S
ColorMatrix
Applying effects based on geometry
M
func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View
Beta
M
func visualEffect3D((EmptyVisualEffect, GeometryProxy3D) -> some VisualEffect) -> some View
Beta
M
func scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some VisualEffect
Rotating
M
func perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D, perspective: CGFloat) -> some VisualEffect
M
func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some VisualEffect
M
func rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some VisualEffect
M
func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some VisualEffect
M
func rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some VisualEffect
Documentation
Open Menu
Swift
Protocol
VisualEffect
Visual Effects change the visual appearance of a view without changing its ancestors or descendents.
iOS 17.0+ Beta
iPadOS 17.0+ Beta
macOS 14.0+ Beta
Mac Catalyst 17.0+ Beta
tvOS 17.0+ Beta
watchOS 10.0+ Beta
visionOS 1.0+ Beta
protocol VisualEffect : Sendable, Animatable
Overview
Because effects do not impact layout, they are safe to use in situations where layout modification is not allowed. For example, effects may be applied as a function of position, accessed through a geometry proxy:
var body: some View {
    ContentRow()
        .visualEffect { content, geometryProxy in
            content.offset(x: geometryProxy.frame(in: .global).origin.y)
        }
}
You don’t conform to this protocol yourself. Instead, visual effects are created by calling modifier functions (such as .offset(x:y:) on other effects, as seen in the example above.
Topics
Adjusting Color
func brightness(Double) -> some VisualEffect
Brightens the view by the specified amount.
func colorEffect(Shader, isEnabled: Bool) -> some VisualEffect
Returns a new visual effect that applies shader to self as a filter effect on the color of each pixel.
func contrast(Double) -> some VisualEffect
Sets the contrast and separation between similar colors in the view.
func grayscale(Double) -> some VisualEffect
Adds a grayscale effect to the view.
func hueRotation(Angle) -> some VisualEffect
Applies a hue rotation effect to the view.
func saturation(Double) -> some VisualEffect
Adjusts the color saturation of the view.
func opacity(Double) -> some VisualEffect
Sets the transparency of the view.
Scaling
func scaleEffect(CGFloat, anchor: UnitPoint) -> some VisualEffect
Scales the view’s rendered output by the given amount in both the horizontal and vertical directions, relative to an anchor point.
func scaleEffect(CGSize, anchor: UnitPoint) -> some VisualEffect
Scales the view’s rendered output by the given vertical and horizontal size amounts, relative to an anchor point.
func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some VisualEffect
Scales the view’s rendered output by the given horizontal and vertical amounts, relative to an anchor point.
func scaleEffect(Size3D, anchor: UnitPoint3D) -> some VisualEffect
Scales this view uniformly by the specified size in each dimension.
func scaleEffect(CGFloat, anchor: UnitPoint3D) -> some VisualEffect
Scales this view uniformly by the specified factor.
func scaleEffect(x: CGFloat, y: CGFloat, z: CGFloat, anchor: UnitPoint3D) -> some VisualEffect
Scales this view by the specified horizontal, vertical, and depth factors.
Rotating
func perspectiveRotationEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D, perspective: CGFloat) -> some VisualEffect
Rotates the view’s rendered output in three dimensions around the given axis of rotation.
func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some VisualEffect
Rotates the view’s rendered output in three dimensions around the given axis of rotation.
func rotation3DEffect(Rotation3D, anchor: UnitPoint3D) -> some VisualEffect
Rotates this view by a specific amount.
func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint3D) -> some VisualEffect
Rotates this view by the specified angle about an axis and anchor point.
func rotation3DEffect(Angle, axis: RotationAxis3D, anchor: UnitPoint3D) -> some VisualEffect
Rotates this view by the specified angle about an axis and anchor point.
func rotationEffect(Angle, anchor: UnitPoint) -> some VisualEffect
Rotates the view’s rendered output around the specified point.
Translating
func offset(CGSize) -> some VisualEffect
Offsets the view by the horizontal and vertical amount specified in the offset parameter.
func offset(x: CGFloat, y: CGFloat) -> some VisualEffect
Offsets the view by the specified horizontal and vertical distances.
func offset(z: CGFloat) -> some VisualEffect
Brings a view forward in Z by the provided distance in points.
Applying a transform
func transform3DEffect(AffineTransform3D) -> some VisualEffect
Applies a 3D transformation to the receiver.
func transformEffect(CGAffineTransform) -> some VisualEffect
Applies an affine transformation to the view’s rendered output.
func transformEffect(ProjectionTransform) -> some VisualEffect
Applies a projection transformation to the view’s rendered output.
Applying other effects
func blur(radius: CGFloat, opaque: Bool) -> some VisualEffect
Applies a Gaussian blur to the view.
func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some VisualEffect
Returns a new visual effect that applies shader to self as a geometric distortion effect on the location of each pixel.
func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some VisualEffect
Returns a new visual effect that applies shader to self as a filter on the raster layer created from self.
Relationships
Inherits From
Animatable
Sendable
Conforming Types
EmptyVisualEffect
See Also
Applying effects based on geometry
func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View
Applies effects to this view, while providing access to layout information via GeometryProxy.
Beta
func visualEffect3D((EmptyVisualEffect, GeometryProxy3D) -> some VisualEffect) -> some View
Applies effects to this view, while providing access to layout information via GeometryProxy3D.
Beta
struct EmptyVisualEffect
The base visual effect that you apply additional effect to.
Beta
Beta Software
This documentation contains preliminary information about an API or technology in development. This information is subject to change, and software implemented according to this documentation should be tested with final operating system software.
Learn more about using Apple's beta software
Current page is VisualEffect
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

