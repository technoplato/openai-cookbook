https://developer.apple.com/documentation/swiftui/wkinterfaceobjectrepresentableSkip Navigation
Apple Developer
News
Discover
Design
Develop
Distribute
Support
Account
Managing model data in your app
Focus Cookbook: Supporting and enhancing focus-driven interactions in your SwiftUI app
Controlling the timing and movements of your animations
Building a document-based app using SwiftData
Backyard Birds: Building an app with SwiftData and widgets
Articles
Xcode library customization
Adding WatchKit views to SwiftUI view hierarchies
C
WKUserNotificationHostingController
C
WKHostingController
Displaying SwiftUI views in WatchKit
WatchKit integration
UIKit integration
AppKit integration
Framework integration
Documentation
Open Menu
Swift
Protocol
WKInterfaceObjectRepresentable
A view that represents a WatchKit interface object.
watchOS 6.0+
protocol WKInterfaceObjectRepresentable : View where Self.Body == Never
Overview
Use a WKInterfaceObjectRepresentable instance to create and manage a WKInterfaceObject in your SwiftUI interface. Adopt this protocol in one of your app’s custom instances, and use its methods to create, update, and tear down your interface object. The creation and update processes parallel the behavior of SwiftUI views, and you use them to configure your interface object with your app’s current state information. Use the teardown process to remove your interface object cleanly from your SwiftUI. For example, you might use the teardown process to notify other parts of your app that the interface object is disappearing.
To add your interface object into your SwiftUI interface, create your WKInterfaceObjectRepresentable instance and add it to your SwiftUI interface. The system calls the methods of your representable instance at appropriate times to create and update the interface object.
The system doesn’t automatically communicate changes occurring within your interface object to other parts of your SwiftUI interface. When you want your interface object to coordinate with other SwiftUI views, you must provide a Coordinator instance to facilitate those interactions. For example, you use a coordinator to forward target-action and delegate messages from your interface object to any SwiftUI views.
Topics
Creating and updating the interface object
func makeWKInterfaceObject(context: Self.Context) -> Self.WKInterfaceObjectType
Creates a WatchKit interface object and configures its initial state.
Required
func updateWKInterfaceObject(Self.WKInterfaceObjectType, context: Self.Context)
Updates the presented WatchKit interface object (and its coordinator) to the latest configuration.
Required
typealias Context
Cleaning up the interface object
static func dismantleWKInterfaceObject(Self.WKInterfaceObjectType, coordinator: Self.Coordinator)
Cleans up the presented WatchKit interface object (and its coordinator) in anticipation of their removal.
Required Default implementation provided.
Providing a custom coordinator object
func makeCoordinator() -> Self.Coordinator
Creates the custom instance that you use to communicate changes from your interface object to other parts of your SwiftUI interface.
Required Default implementation provided.
associatedtype Coordinator = Void
A type to coordinate with the WatchKit interface object.
Required
associatedtype WKInterfaceObjectType : WKInterfaceObject
The type of WatchKit interface object to be presented.
Required
Relationships
Inherits From
View
See Also
Adding WatchKit views to SwiftUI view hierarchies
struct WKInterfaceObjectRepresentableContext
Contextual information about the state of the system that you use to create and update your WatchKit interface object.
Current page is WKInterfaceObjectRepresentable
Developer
Documentation
Platforms
iOS
iPadOS
macOS
tvOS
watchOS
visionOS
Tools
Swift
SwiftUI
Swift Playgrounds
TestFlight
Xcode
Xcode Cloud
SF Symbols
Topics & Technologies
Accessibility
Accessories
App Extension
App Store
Audio & Video
Augmented Reality
Business
Design
Distribution
Education
Fonts
Games
Health & Fitness
In-App Purchase
Localization
Maps & Location
Machine Learning
Security
Safari & Web
Resources
Documentation
Curriculum
Downloads
Forums
Videos
Support
Support Articles
Contact Us
Bug Reporting
System Status
Account
Apple Developer
App Store Connect
Certificates, IDs, & Profiles
Feedback Assistant
Programs
Apple Developer Program
Apple Developer Enterprise Program
App Store Small Business Program
MFi Program
News Partner Program
Video Partner Program
Security Bounty Program
Security Research Device Program
Events
Events Overview
App Accelerators
App Store Awards
Apple Design Awards
Apple Developer Academies
Entrepreneur Camp
Ask Apple
Tech Talks
WWDC
To view the latest developer news, visit News and Updates .
Light
Dark
Auto
Copyright © 2023 Apple Inc. All rights reserved. Terms of Use Privacy Policy Agreements and Guidelines

